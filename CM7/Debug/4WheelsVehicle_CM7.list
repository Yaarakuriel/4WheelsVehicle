
4WheelsVehicle_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a0c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08007ca4  08007ca4  00008ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008044  08008044  0000a02c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008044  08008044  00009044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800804c  0800804c  0000a02c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008050  08008050  00009050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  08008054  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  2400002c  08008080  0000a02c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000334  08008080  0000a334  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a02c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016447  00000000  00000000  0000a05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292a  00000000  00000000  000204a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00022dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8b  00000000  00000000  00023f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b406  00000000  00000000  00024c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb29  00000000  00000000  000600a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00188524  00000000  00000000  0007bbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002040ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f8  00000000  00000000  00204134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0020892c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007c8c 	.word	0x08007c8c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08007c8c 	.word	0x08007c8c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b70      	ldr	r3, [pc, #448]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ac:	4a6e      	ldr	r2, [pc, #440]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b6:	4b6c      	ldr	r3, [pc, #432]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
 80007c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b68      	ldr	r3, [pc, #416]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ca:	4a67      	ldr	r2, [pc, #412]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d4:	4b64      	ldr	r3, [pc, #400]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e2:	4b61      	ldr	r3, [pc, #388]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a5f      	ldr	r2, [pc, #380]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b5d      	ldr	r3, [pc, #372]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 0310 	and.w	r3, r3, #16
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b59      	ldr	r3, [pc, #356]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000806:	4a58      	ldr	r2, [pc, #352]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000810:	4b55      	ldr	r3, [pc, #340]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	4b52      	ldr	r3, [pc, #328]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000824:	4a50      	ldr	r2, [pc, #320]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800082e:	4b4e      	ldr	r3, [pc, #312]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000834:	f003 0308 	and.w	r3, r3, #8
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083c:	4b4a      	ldr	r3, [pc, #296]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000842:	4a49      	ldr	r2, [pc, #292]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084c:	4b46      	ldr	r3, [pc, #280]	@ (8000968 <MX_GPIO_Init+0x1d8>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|Mot1_Dir_A_Pin|Mot2_Dir_A_Pin|Mot2_Dir_B_Pin
 800085a:	2200      	movs	r2, #0
 800085c:	f240 41fd 	movw	r1, #1277	@ 0x4fd
 8000860:	4842      	ldr	r0, [pc, #264]	@ (800096c <MX_GPIO_Init+0x1dc>)
 8000862:	f001 fdb5 	bl	80023d0 <HAL_GPIO_WritePin>
                          |Mot3_Dir_A_Pin|Mot3_Dir_B_Pin|Mot4_Dir_A_Pin|Mot4_Dir_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000866:	2332      	movs	r3, #50	@ 0x32
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000876:	230b      	movs	r3, #11
 8000878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	483b      	ldr	r0, [pc, #236]	@ (8000970 <MX_GPIO_Init+0x1e0>)
 8000882:	f001 fafb 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000886:	2386      	movs	r3, #134	@ 0x86
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000896:	230b      	movs	r3, #11
 8000898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4834      	ldr	r0, [pc, #208]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 80008a2:	f001 faeb 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b8:	230b      	movs	r3, #11
 80008ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	482d      	ldr	r0, [pc, #180]	@ (8000978 <MX_GPIO_Init+0x1e8>)
 80008c4:	f001 fada 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin Mot1_Dir_A_Pin Mot2_Dir_A_Pin Mot2_Dir_B_Pin
                           Mot3_Dir_A_Pin Mot3_Dir_B_Pin Mot4_Dir_A_Pin Mot4_Dir_B_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|Mot1_Dir_A_Pin|Mot2_Dir_A_Pin|Mot2_Dir_B_Pin
 80008c8:	f240 43fd 	movw	r3, #1277	@ 0x4fd
 80008cc:	61fb      	str	r3, [r7, #28]
                          |Mot3_Dir_A_Pin|Mot3_Dir_B_Pin|Mot4_Dir_A_Pin|Mot4_Dir_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4822      	ldr	r0, [pc, #136]	@ (800096c <MX_GPIO_Init+0x1dc>)
 80008e2:	f001 facb 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80008e6:	2380      	movs	r3, #128	@ 0x80
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4820      	ldr	r0, [pc, #128]	@ (800097c <MX_GPIO_Init+0x1ec>)
 80008fc:	f001 fabe 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000900:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000912:	230a      	movs	r3, #10
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4815      	ldr	r0, [pc, #84]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 800091e:	f001 faad 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : Mot1_Dir_B_Pin */
  GPIO_InitStruct.Pin = Mot1_Dir_B_Pin;
 8000922:	2302      	movs	r3, #2
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Mot1_Dir_B_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	@ (800096c <MX_GPIO_Init+0x1dc>)
 8000938:	f001 faa0 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800093c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094e:	230b      	movs	r3, #11
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4808      	ldr	r0, [pc, #32]	@ (800097c <MX_GPIO_Init+0x1ec>)
 800095a:	f001 fa8f 	bl	8001e7c <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	@ 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	58024400 	.word	0x58024400
 800096c:	58020c00 	.word	0x58020c00
 8000970:	58020800 	.word	0x58020800
 8000974:	58020000 	.word	0x58020000
 8000978:	58020400 	.word	0x58020400
 800097c:	58021800 	.word	0x58021800

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af08      	add	r7, sp, #32
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f000 ffdb 	bl	8001940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f8c3 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098e:	f7ff feff 	bl	8000790 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000992:	f000 fb6f 	bl	8001074 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000996:	f000 fa49 	bl	8000e2c <MX_TIM1_Init>
  MX_TIM2_Init();
 800099a:	f000 fb17 	bl	8000fcc <MX_TIM2_Init>
  MX_TIM4_Init();
 800099e:	f000 fbbf 	bl	8001120 <MX_TIM4_Init>
  MX_TIM8_Init();
 80009a2:	f000 fc13 	bl	80011cc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009a6:	2100      	movs	r1, #0
 80009a8:	484c      	ldr	r0, [pc, #304]	@ (8000adc <main+0x15c>)
 80009aa:	f003 fdb7 	bl	800451c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009ae:	2104      	movs	r1, #4
 80009b0:	484a      	ldr	r0, [pc, #296]	@ (8000adc <main+0x15c>)
 80009b2:	f003 fdb3 	bl	800451c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009b6:	2108      	movs	r1, #8
 80009b8:	4848      	ldr	r0, [pc, #288]	@ (8000adc <main+0x15c>)
 80009ba:	f003 fdaf 	bl	800451c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80009be:	210c      	movs	r1, #12
 80009c0:	4846      	ldr	r0, [pc, #280]	@ (8000adc <main+0x15c>)
 80009c2:	f003 fdab 	bl	800451c <HAL_TIM_PWM_Start>

  /*Motor A Init*/
  MotorDriver_Init(&motorA,
 80009c6:	2308      	movs	r3, #8
 80009c8:	9306      	str	r3, [sp, #24]
 80009ca:	4b45      	ldr	r3, [pc, #276]	@ (8000ae0 <main+0x160>)
 80009cc:	9305      	str	r3, [sp, #20]
 80009ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009d2:	9304      	str	r3, [sp, #16]
 80009d4:	4b43      	ldr	r3, [pc, #268]	@ (8000ae4 <main+0x164>)
 80009d6:	9303      	str	r3, [sp, #12]
 80009d8:	2302      	movs	r3, #2
 80009da:	9302      	str	r3, [sp, #8]
 80009dc:	2301      	movs	r3, #1
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	4b41      	ldr	r3, [pc, #260]	@ (8000ae8 <main+0x168>)
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009e8:	2200      	movs	r2, #0
 80009ea:	4940      	ldr	r1, [pc, #256]	@ (8000aec <main+0x16c>)
 80009ec:	4840      	ldr	r0, [pc, #256]	@ (8000af0 <main+0x170>)
 80009ee:	f000 f96e 	bl	8000cce <MotorDriver_Init>
                   GPIOD, Mot1_Dir_A_Pin, Mot1_Dir_B_Pin,  // Dir pins (adjust as needed)
                   GPIOA, Mot1_Encoder_A_Pin,        // Encoder A
                   GPIOB, Mot1_Encoder_B_Pin);       // Encoder B

  /*Motor B Init*/
  MotorDriver_Init(&motorB,
 80009f2:	2320      	movs	r3, #32
 80009f4:	9306      	str	r3, [sp, #24]
 80009f6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae0 <main+0x160>)
 80009f8:	9305      	str	r3, [sp, #20]
 80009fa:	2310      	movs	r3, #16
 80009fc:	9304      	str	r3, [sp, #16]
 80009fe:	4b38      	ldr	r3, [pc, #224]	@ (8000ae0 <main+0x160>)
 8000a00:	9303      	str	r3, [sp, #12]
 8000a02:	2308      	movs	r3, #8
 8000a04:	9302      	str	r3, [sp, #8]
 8000a06:	2304      	movs	r3, #4
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	4b37      	ldr	r3, [pc, #220]	@ (8000ae8 <main+0x168>)
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	4b39      	ldr	r3, [pc, #228]	@ (8000af4 <main+0x174>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	4936      	ldr	r1, [pc, #216]	@ (8000aec <main+0x16c>)
 8000a14:	4838      	ldr	r0, [pc, #224]	@ (8000af8 <main+0x178>)
 8000a16:	f000 f95a 	bl	8000cce <MotorDriver_Init>
                   GPIOD,  Mot2_Dir_A_Pin, Mot2_Dir_B_Pin,  // Dir pins (adjust as needed)
                   GPIOB, Mot2_Encoder_A_Pin,        // Encoder A
                   GPIOB, Mot2_Encoder_B_Pin);       // Encoder B

  /*Motor C Init*/
  MotorDriver_Init(&motorC,
 8000a1a:	2380      	movs	r3, #128	@ 0x80
 8000a1c:	9306      	str	r3, [sp, #24]
 8000a1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ae0 <main+0x160>)
 8000a20:	9305      	str	r3, [sp, #20]
 8000a22:	2340      	movs	r3, #64	@ 0x40
 8000a24:	9304      	str	r3, [sp, #16]
 8000a26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae0 <main+0x160>)
 8000a28:	9303      	str	r3, [sp, #12]
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	9302      	str	r3, [sp, #8]
 8000a2e:	2310      	movs	r3, #16
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae8 <main+0x168>)
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <main+0x17c>)
 8000a38:	2208      	movs	r2, #8
 8000a3a:	492c      	ldr	r1, [pc, #176]	@ (8000aec <main+0x16c>)
 8000a3c:	4830      	ldr	r0, [pc, #192]	@ (8000b00 <main+0x180>)
 8000a3e:	f000 f946 	bl	8000cce <MotorDriver_Init>
                   GPIOD,  Mot3_Dir_A_Pin, Mot3_Dir_B_Pin,  // Dir pins (adjust as needed)
                   GPIOB, Mot3_Encoder_A_Pin,        // Encoder A
                   GPIOB, Mot3_Encoder_B_Pin);       // Encoder B

  /*Motor D Init*/
  MotorDriver_Init(&motorD,
 8000a42:	2380      	movs	r3, #128	@ 0x80
 8000a44:	9306      	str	r3, [sp, #24]
 8000a46:	4b2f      	ldr	r3, [pc, #188]	@ (8000b04 <main+0x184>)
 8000a48:	9305      	str	r3, [sp, #20]
 8000a4a:	2340      	movs	r3, #64	@ 0x40
 8000a4c:	9304      	str	r3, [sp, #16]
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b04 <main+0x184>)
 8000a50:	9303      	str	r3, [sp, #12]
 8000a52:	2380      	movs	r3, #128	@ 0x80
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2340      	movs	r3, #64	@ 0x40
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <main+0x168>)
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <main+0x188>)
 8000a60:	220c      	movs	r2, #12
 8000a62:	4922      	ldr	r1, [pc, #136]	@ (8000aec <main+0x16c>)
 8000a64:	4829      	ldr	r0, [pc, #164]	@ (8000b0c <main+0x18c>)
 8000a66:	f000 f932 	bl	8000cce <MotorDriver_Init>
                   GPIOC, Mot4_Encoder_A_Pin,        // Encoder A
                   GPIOC, Mot4_Encoder_B_Pin);       // Encoder B
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 fda0 	bl	80015b0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f000 fd9d 	bl	80015b0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000a76:	2002      	movs	r0, #2
 8000a78:	f000 fd9a 	bl	80015b0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 fe0c 	bl	800169c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a84:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <main+0x190>)
 8000a86:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a8a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <main+0x190>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <main+0x190>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <main+0x190>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <main+0x190>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000aa4:	491a      	ldr	r1, [pc, #104]	@ (8000b10 <main+0x190>)
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 fe88 	bl	80017bc <BSP_COM_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <main+0x136>
  {
    Error_Handler();
 8000ab2:	f000 f899 	bl	8000be8 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Motor A
    MotorDriver_CW(&motorA, 100);
 8000ab6:	2164      	movs	r1, #100	@ 0x64
 8000ab8:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <main+0x170>)
 8000aba:	f000 f949 	bl	8000d50 <MotorDriver_CW>

    // Motor B
    MotorDriver_CW(&motorB, 100);
 8000abe:	2164      	movs	r1, #100	@ 0x64
 8000ac0:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <main+0x178>)
 8000ac2:	f000 f945 	bl	8000d50 <MotorDriver_CW>

    // Motor C
    MotorDriver_CW(&motorC, 100);
 8000ac6:	2164      	movs	r1, #100	@ 0x64
 8000ac8:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <main+0x180>)
 8000aca:	f000 f941 	bl	8000d50 <MotorDriver_CW>

    // Motor D
    MotorDriver_CW(&motorD, 100);
 8000ace:	2164      	movs	r1, #100	@ 0x64
 8000ad0:	480e      	ldr	r0, [pc, #56]	@ (8000b0c <main+0x18c>)
 8000ad2:	f000 f93d 	bl	8000d50 <MotorDriver_CW>
    MotorDriver_CW(&motorA, 100);
 8000ad6:	bf00      	nop
 8000ad8:	e7ed      	b.n	8000ab6 <main+0x136>
 8000ada:	bf00      	nop
 8000adc:	24000118 	.word	0x24000118
 8000ae0:	58020400 	.word	0x58020400
 8000ae4:	58020000 	.word	0x58020000
 8000ae8:	58020c00 	.word	0x58020c00
 8000aec:	40010000 	.word	0x40010000
 8000af0:	24000058 	.word	0x24000058
 8000af4:	40000400 	.word	0x40000400
 8000af8:	24000088 	.word	0x24000088
 8000afc:	40000800 	.word	0x40000800
 8000b00:	240000b8 	.word	0x240000b8
 8000b04:	58020800 	.word	0x58020800
 8000b08:	40000c00 	.word	0x40000c00
 8000b0c:	240000e8 	.word	0x240000e8
 8000b10:	24000048 	.word	0x24000048

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b09c      	sub	sp, #112	@ 0x70
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1e:	224c      	movs	r2, #76	@ 0x4c
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f007 f886 	bl	8007c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 f880 	bl	8007c34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b34:	2004      	movs	r0, #4
 8000b36:	f001 fc77 	bl	8002428 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <SystemClock_Config+0xcc>)
 8000b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b42:	4a27      	ldr	r2, [pc, #156]	@ (8000be0 <SystemClock_Config+0xcc>)
 8000b44:	f023 0301 	bic.w	r3, r3, #1
 8000b48:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b4a:	4b25      	ldr	r3, [pc, #148]	@ (8000be0 <SystemClock_Config+0xcc>)
 8000b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <SystemClock_Config+0xd0>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b5c:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <SystemClock_Config+0xd0>)
 8000b5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <SystemClock_Config+0xd0>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b70:	bf00      	nop
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <SystemClock_Config+0xd0>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b7e:	d1f8      	bne.n	8000b72 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b80:	2302      	movs	r3, #2
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b88:	2340      	movs	r3, #64	@ 0x40
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 fcc3 	bl	8002520 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ba0:	f000 f822 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	233f      	movs	r3, #63	@ 0x3f
 8000ba6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 fa59 	bl	8003080 <HAL_RCC_ClockConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bd4:	f000 f808 	bl	8000be8 <Error_Handler>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	3770      	adds	r7, #112	@ 0x70
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	58000400 	.word	0x58000400
 8000be4:	58024800 	.word	0x58024800

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <MD_GetCCR>:
/**
 * @brief  Return pointer to the proper CCR register for the configured channel.
 * @note   Returns NULL if channel is invalid for this timer.
 */
static inline volatile uint32_t *MD_GetCCR(MotorDriver *md)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    switch (md->pwm_channel) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b0c      	cmp	r3, #12
 8000c1a:	d82d      	bhi.n	8000c78 <MD_GetCCR+0x6c>
 8000c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c24 <MD_GetCCR+0x18>)
 8000c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c22:	bf00      	nop
 8000c24:	08000c59 	.word	0x08000c59
 8000c28:	08000c79 	.word	0x08000c79
 8000c2c:	08000c79 	.word	0x08000c79
 8000c30:	08000c79 	.word	0x08000c79
 8000c34:	08000c61 	.word	0x08000c61
 8000c38:	08000c79 	.word	0x08000c79
 8000c3c:	08000c79 	.word	0x08000c79
 8000c40:	08000c79 	.word	0x08000c79
 8000c44:	08000c69 	.word	0x08000c69
 8000c48:	08000c79 	.word	0x08000c79
 8000c4c:	08000c79 	.word	0x08000c79
 8000c50:	08000c79 	.word	0x08000c79
 8000c54:	08000c71 	.word	0x08000c71
    case TIM_CHANNEL_1: return &md->pwm_tim->CCR1;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3334      	adds	r3, #52	@ 0x34
 8000c5e:	e00c      	b.n	8000c7a <MD_GetCCR+0x6e>
    case TIM_CHANNEL_2: return &md->pwm_tim->CCR2;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3338      	adds	r3, #56	@ 0x38
 8000c66:	e008      	b.n	8000c7a <MD_GetCCR+0x6e>
    case TIM_CHANNEL_3: return &md->pwm_tim->CCR3;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	333c      	adds	r3, #60	@ 0x3c
 8000c6e:	e004      	b.n	8000c7a <MD_GetCCR+0x6e>
    case TIM_CHANNEL_4: return &md->pwm_tim->CCR4;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3340      	adds	r3, #64	@ 0x40
 8000c76:	e000      	b.n	8000c7a <MD_GetCCR+0x6e>
    default:            return NULL;
 8000c78:	2300      	movs	r3, #0
    }
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MD_WriteDuty>:
/**
 * @brief  Write duty to the configured PWM channel, clamped to [0..ARR].
 * @param  duty  Raw compare value (same scale as timer ARR)
 */
static inline void MD_WriteDuty(MotorDriver *md, int duty)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
    volatile uint32_t *ccr = MD_GetCCR(md);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffba 	bl	8000c0c <MD_GetCCR>
 8000c98:	60f8      	str	r0, [r7, #12]
    if (!ccr) return;                 // invalid channel; nothing to do
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d012      	beq.n	8000cc6 <MD_WriteDuty+0x3e>

    int arr = (int)md->pwm_tim->ARR;  // timer auto-reload value
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca6:	60bb      	str	r3, [r7, #8]
    if (duty < 0)   duty = 0;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da01      	bge.n	8000cb2 <MD_WriteDuty+0x2a>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
    if (duty > arr) duty = arr;
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dd01      	ble.n	8000cbe <MD_WriteDuty+0x36>
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	603b      	str	r3, [r7, #0]

    *ccr = (uint32_t)duty;
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	e000      	b.n	8000cc8 <MD_WriteDuty+0x40>
    if (!ccr) return;                 // invalid channel; nothing to do
 8000cc6:	bf00      	nop
}
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <MotorDriver_Init>:
                      TIM_TypeDef *pwm_tim, uint32_t pwm_channel,
                      TIM_TypeDef *enc_tim,
                      GPIO_TypeDef *dir_port, uint16_t pin_A, uint16_t pin_B,
                      GPIO_TypeDef *encA_port, uint16_t encA_pin,
                      GPIO_TypeDef *encB_port, uint16_t encB_pin)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	603b      	str	r3, [r7, #0]
    /* Assign config */
    md->pwm_tim     = pwm_tim;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	601a      	str	r2, [r3, #0]
    md->pwm_channel = pwm_channel;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	605a      	str	r2, [r3, #4]
    md->enc_tim     = enc_tim;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	609a      	str	r2, [r3, #8]

    md->dir_port    = dir_port;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	61da      	str	r2, [r3, #28]
    md->pin_A       = pin_A;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	8bba      	ldrh	r2, [r7, #28]
 8000cf8:	841a      	strh	r2, [r3, #32]
    md->pin_B       = pin_B;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	8c3a      	ldrh	r2, [r7, #32]
 8000cfe:	845a      	strh	r2, [r3, #34]	@ 0x22

    md->encA_port   = encA_port;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d04:	60da      	str	r2, [r3, #12]
    md->encA_pin    = encA_pin;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000d0a:	821a      	strh	r2, [r3, #16]
    md->encB_port   = encB_port;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d10:	615a      	str	r2, [r3, #20]
    md->encB_pin    = encB_pin;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000d16:	831a      	strh	r2, [r3, #24]

    /* Reset runtime state */
    md->position    = 0;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    md->speed_pps   = 0;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	629a      	str	r2, [r3, #40]	@ 0x28
    md->last_cnt    = 0;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2200      	movs	r2, #0
 8000d28:	859a      	strh	r2, [r3, #44]	@ 0x2c
    md->curr_cnt    = 0;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset hardware encoder counter */
    if (md->enc_tim != NULL) {
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <MotorDriver_Init+0x72>
        md->enc_tim->CNT = 0;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Ensure PWM starts at 0 */
    MD_WriteDuty(md, 0);
 8000d40:	2100      	movs	r1, #0
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f7ff ffa0 	bl	8000c88 <MD_WriteDuty>
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <MotorDriver_CW>:
/**
 * @brief  Drive motor clockwise (A=0, B=1).
 * @param  duty PWM duty cycle [0..ARR]
 */
void MotorDriver_CW(MotorDriver *md, int duty)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(md->dir_port, md->pin_A, GPIO_PIN_RESET);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69d8      	ldr	r0, [r3, #28]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	8c1b      	ldrh	r3, [r3, #32]
 8000d62:	2200      	movs	r2, #0
 8000d64:	4619      	mov	r1, r3
 8000d66:	f001 fb33 	bl	80023d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(md->dir_port, md->pin_B, GPIO_PIN_SET);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69d8      	ldr	r0, [r3, #28]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000d72:	2201      	movs	r2, #1
 8000d74:	4619      	mov	r1, r3
 8000d76:	f001 fb2b 	bl	80023d0 <HAL_GPIO_WritePin>
    MD_WriteDuty(md, duty);
 8000d7a:	6839      	ldr	r1, [r7, #0]
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff83 	bl	8000c88 <MD_WriteDuty>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_MspInit+0x30>)
 8000d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d98:	4a08      	ldr	r2, [pc, #32]	@ (8000dbc <HAL_MspInit+0x30>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_MspInit+0x30>)
 8000da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e16:	f000 fe05 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 fcac 	bl	8001780 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b09a      	sub	sp, #104	@ 0x68
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e32:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
 8000e5c:	615a      	str	r2, [r3, #20]
 8000e5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	222c      	movs	r2, #44	@ 0x2c
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f006 fee4 	bl	8007c34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e6c:	4b55      	ldr	r3, [pc, #340]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000e6e:	4a56      	ldr	r2, [pc, #344]	@ (8000fc8 <MX_TIM1_Init+0x19c>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000e72:	4b54      	ldr	r3, [pc, #336]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000e74:	221f      	movs	r2, #31
 8000e76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b52      	ldr	r3, [pc, #328]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000e7e:	4b51      	ldr	r3, [pc, #324]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000e80:	2263      	movs	r2, #99	@ 0x63
 8000e82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e90:	4b4c      	ldr	r3, [pc, #304]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000e92:	2280      	movs	r2, #128	@ 0x80
 8000e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e96:	484b      	ldr	r0, [pc, #300]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000e98:	f003 f8f6 	bl	8004088 <HAL_TIM_Base_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ea2:	f7ff fea1 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4844      	ldr	r0, [pc, #272]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000eb4:	f004 f938 	bl	8005128 <HAL_TIM_ConfigClockSource>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ebe:	f7ff fe93 	bl	8000be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ec2:	4840      	ldr	r0, [pc, #256]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000ec4:	f003 fa00 	bl	80042c8 <HAL_TIM_PWM_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ece:	f7ff fe8b 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ede:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4837      	ldr	r0, [pc, #220]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000ee6:	f005 f9f9 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000ef0:	f7ff fe7a 	bl	8000be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef4:	2360      	movs	r3, #96	@ 0x60
 8000ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	482a      	ldr	r0, [pc, #168]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000f1a:	f003 fe9d 	bl	8004c58 <HAL_TIM_PWM_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000f24:	f7ff fe60 	bl	8000be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4824      	ldr	r0, [pc, #144]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000f32:	f003 fe91 	bl	8004c58 <HAL_TIM_PWM_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000f3c:	f7ff fe54 	bl	8000be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f44:	2208      	movs	r2, #8
 8000f46:	4619      	mov	r1, r3
 8000f48:	481e      	ldr	r0, [pc, #120]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000f4a:	f003 fe85 	bl	8004c58 <HAL_TIM_PWM_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000f54:	f7ff fe48 	bl	8000be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f5c:	220c      	movs	r2, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4818      	ldr	r0, [pc, #96]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000f62:	f003 fe79 	bl	8004c58 <HAL_TIM_PWM_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000f6c:	f7ff fe3c 	bl	8000be8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4807      	ldr	r0, [pc, #28]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000fa6:	f005 faff 	bl	80065a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000fb0:	f7ff fe1a 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <MX_TIM1_Init+0x198>)
 8000fb6:	f000 fa93 	bl	80014e0 <HAL_TIM_MspPostInit>

}
 8000fba:	bf00      	nop
 8000fbc:	3768      	adds	r7, #104	@ 0x68
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	24000118 	.word	0x24000118
 8000fc8:	40010000 	.word	0x40010000

08000fcc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	@ 0x30
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2224      	movs	r2, #36	@ 0x24
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f006 fe2a 	bl	8007c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fea:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <MX_TIM2_Init+0xa4>)
 8000fec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ff0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <MX_TIM2_Init+0xa4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <MX_TIM2_Init+0xa4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <MX_TIM2_Init+0xa4>)
 8001000:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001004:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <MX_TIM2_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <MX_TIM2_Init+0xa4>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001012:	2301      	movs	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800101a:	2301      	movs	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800102a:	2301      	movs	r3, #1
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	4619      	mov	r1, r3
 800103c:	480c      	ldr	r0, [pc, #48]	@ (8001070 <MX_TIM2_Init+0xa4>)
 800103e:	f003 fc49 	bl	80048d4 <HAL_TIM_Encoder_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001048:	f7ff fdce 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_TIM2_Init+0xa4>)
 800105a:	f005 f93f 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001064:	f7ff fdc0 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3730      	adds	r7, #48	@ 0x30
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	24000164 	.word	0x24000164

08001074 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	@ 0x30
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2224      	movs	r2, #36	@ 0x24
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f006 fdd6 	bl	8007c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_TIM3_Init+0xa4>)
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <MX_TIM3_Init+0xa8>)
 8001096:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_TIM3_Init+0xa4>)
 800109a:	2209      	movs	r2, #9
 800109c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <MX_TIM3_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 424;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_TIM3_Init+0xa4>)
 80010a6:	f44f 72d4 	mov.w	r2, #424	@ 0x1a8
 80010aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_TIM3_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_TIM3_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010c0:	2301      	movs	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010d0:	2301      	movs	r3, #1
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_TIM3_Init+0xa4>)
 80010e4:	f003 fbf6 	bl	80048d4 <HAL_TIM_Encoder_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010ee:	f7ff fd7b 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	@ (8001118 <MX_TIM3_Init+0xa4>)
 8001100:	f005 f8ec 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800110a:	f7ff fd6d 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	@ 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	240001b0 	.word	0x240001b0
 800111c:	40000400 	.word	0x40000400

08001120 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	@ 0x30
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2224      	movs	r2, #36	@ 0x24
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f006 fd80 	bl	8007c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800113e:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <MX_TIM4_Init+0xa4>)
 8001140:	4a21      	ldr	r2, [pc, #132]	@ (80011c8 <MX_TIM4_Init+0xa8>)
 8001142:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001144:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <MX_TIM4_Init+0xa4>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <MX_TIM4_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001150:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <MX_TIM4_Init+0xa4>)
 8001152:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001156:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_TIM4_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <MX_TIM4_Init+0xa4>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001164:	2301      	movs	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800116c:	2301      	movs	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800117c:	2301      	movs	r3, #1
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <MX_TIM4_Init+0xa4>)
 8001190:	f003 fba0 	bl	80048d4 <HAL_TIM_Encoder_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800119a:	f7ff fd25 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	@ (80011c4 <MX_TIM4_Init+0xa4>)
 80011ac:	f005 f896 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011b6:	f7ff fd17 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3730      	adds	r7, #48	@ 0x30
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	240001fc 	.word	0x240001fc
 80011c8:	40000800 	.word	0x40000800

080011cc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	@ 0x30
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	2224      	movs	r2, #36	@ 0x24
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 fd2a 	bl	8007c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011ea:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <MX_TIM8_Init+0xac>)
 80011ec:	4a23      	ldr	r2, [pc, #140]	@ (800127c <MX_TIM8_Init+0xb0>)
 80011ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011f0:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <MX_TIM8_Init+0xac>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <MX_TIM8_Init+0xac>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <MX_TIM8_Init+0xac>)
 80011fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001202:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <MX_TIM8_Init+0xac>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800120a:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <MX_TIM8_Init+0xac>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <MX_TIM8_Init+0xac>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001216:	2301      	movs	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800121e:	2301      	movs	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800122e:	2301      	movs	r3, #1
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	4619      	mov	r1, r3
 8001240:	480d      	ldr	r0, [pc, #52]	@ (8001278 <MX_TIM8_Init+0xac>)
 8001242:	f003 fb47 	bl	80048d4 <HAL_TIM_Encoder_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800124c:	f7ff fccc 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_TIM8_Init+0xac>)
 8001262:	f005 f83b 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800126c:	f7ff fcbc 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3730      	adds	r7, #48	@ 0x30
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	24000248 	.word	0x24000248
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0b      	ldr	r2, [pc, #44]	@ (80012bc <HAL_TIM_Base_MspInit+0x3c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10e      	bne.n	80012b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <HAL_TIM_Base_MspInit+0x40>)
 8001294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001298:	4a09      	ldr	r2, [pc, #36]	@ (80012c0 <HAL_TIM_Base_MspInit+0x40>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012a2:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <HAL_TIM_Base_MspInit+0x40>)
 80012a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40010000 	.word	0x40010000
 80012c0:	58024400 	.word	0x58024400

080012c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b090      	sub	sp, #64	@ 0x40
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012e4:	d14e      	bne.n	8001384 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012e6:	4b77      	ldr	r3, [pc, #476]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 80012e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012ec:	4a75      	ldr	r2, [pc, #468]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012f6:	4b73      	ldr	r3, [pc, #460]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 80012f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001302:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b6f      	ldr	r3, [pc, #444]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	4a6e      	ldr	r2, [pc, #440]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001314:	4b6b      	ldr	r3, [pc, #428]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	4b68      	ldr	r3, [pc, #416]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001328:	4a66      	ldr	r2, [pc, #408]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001332:	4b64      	ldr	r3, [pc, #400]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	623b      	str	r3, [r7, #32]
 800133e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Mot1_Encoder_A_Pin;
 8001340:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001344:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001352:	2301      	movs	r3, #1
 8001354:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Mot1_Encoder_A_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800135a:	4619      	mov	r1, r3
 800135c:	485a      	ldr	r0, [pc, #360]	@ (80014c8 <HAL_TIM_Encoder_MspInit+0x204>)
 800135e:	f000 fd8d 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Mot1_Encoder_B_Pin;
 8001362:	2308      	movs	r3, #8
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001372:	2301      	movs	r3, #1
 8001374:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(Mot1_Encoder_B_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800137a:	4619      	mov	r1, r3
 800137c:	4853      	ldr	r0, [pc, #332]	@ (80014cc <HAL_TIM_Encoder_MspInit+0x208>)
 800137e:	f000 fd7d 	bl	8001e7c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001382:	e09a      	b.n	80014ba <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(tim_encoderHandle->Instance==TIM3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a51      	ldr	r2, [pc, #324]	@ (80014d0 <HAL_TIM_Encoder_MspInit+0x20c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12e      	bne.n	80013ec <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800138e:	4b4d      	ldr	r3, [pc, #308]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001394:	4a4b      	ldr	r2, [pc, #300]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800139e:	4b49      	ldr	r3, [pc, #292]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 80013a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ac:	4b45      	ldr	r3, [pc, #276]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b2:	4a44      	ldr	r2, [pc, #272]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013bc:	4b41      	ldr	r3, [pc, #260]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Mot2_Encoder_A_Pin|Mot2_Encoder_B_Pin;
 80013ca:	2330      	movs	r3, #48	@ 0x30
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013da:	2302      	movs	r3, #2
 80013dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013e2:	4619      	mov	r1, r3
 80013e4:	4839      	ldr	r0, [pc, #228]	@ (80014cc <HAL_TIM_Encoder_MspInit+0x208>)
 80013e6:	f000 fd49 	bl	8001e7c <HAL_GPIO_Init>
}
 80013ea:	e066      	b.n	80014ba <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(tim_encoderHandle->Instance==TIM4)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a38      	ldr	r2, [pc, #224]	@ (80014d4 <HAL_TIM_Encoder_MspInit+0x210>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12e      	bne.n	8001454 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013f6:	4b33      	ldr	r3, [pc, #204]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 80013f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013fc:	4a31      	ldr	r2, [pc, #196]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001406:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001408:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b2b      	ldr	r3, [pc, #172]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141a:	4a2a      	ldr	r2, [pc, #168]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001424:	4b27      	ldr	r3, [pc, #156]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Mot3_Encoder_A_Pin|Mot3_Encoder_B_Pin;
 8001432:	23c0      	movs	r3, #192	@ 0xc0
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001442:	2302      	movs	r3, #2
 8001444:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800144a:	4619      	mov	r1, r3
 800144c:	481f      	ldr	r0, [pc, #124]	@ (80014cc <HAL_TIM_Encoder_MspInit+0x208>)
 800144e:	f000 fd15 	bl	8001e7c <HAL_GPIO_Init>
}
 8001452:	e032      	b.n	80014ba <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(tim_encoderHandle->Instance==TIM8)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1f      	ldr	r2, [pc, #124]	@ (80014d8 <HAL_TIM_Encoder_MspInit+0x214>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d12d      	bne.n	80014ba <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800145e:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001464:	4a17      	ldr	r2, [pc, #92]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001482:	4a10      	ldr	r2, [pc, #64]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800148c:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <HAL_TIM_Encoder_MspInit+0x200>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Mot4_Encoder_A_Pin|Mot4_Encoder_B_Pin;
 800149a:	23c0      	movs	r3, #192	@ 0xc0
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014aa:	2303      	movs	r3, #3
 80014ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b2:	4619      	mov	r1, r3
 80014b4:	4809      	ldr	r0, [pc, #36]	@ (80014dc <HAL_TIM_Encoder_MspInit+0x218>)
 80014b6:	f000 fce1 	bl	8001e7c <HAL_GPIO_Init>
}
 80014ba:	bf00      	nop
 80014bc:	3740      	adds	r7, #64	@ 0x40
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	58024400 	.word	0x58024400
 80014c8:	58020000 	.word	0x58020000
 80014cc:	58020400 	.word	0x58020400
 80014d0:	40000400 	.word	0x40000400
 80014d4:	40000800 	.word	0x40000800
 80014d8:	40010400 	.word	0x40010400
 80014dc:	58020800 	.word	0x58020800

080014e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a13      	ldr	r2, [pc, #76]	@ (800154c <HAL_TIM_MspPostInit+0x6c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d11f      	bne.n	8001542 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <HAL_TIM_MspPostInit+0x70>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001508:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <HAL_TIM_MspPostInit+0x70>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001512:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <HAL_TIM_MspPostInit+0x70>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Mot1_PWM_Pin|Mot2_PWM_Pin|Mot3_PWM_Pin|Mot4_PWM_Pin;
 8001520:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001524:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001532:	2301      	movs	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	@ (8001554 <HAL_TIM_MspPostInit+0x74>)
 800153e:	f000 fc9d 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40010000 	.word	0x40010000
 8001550:	58024400 	.word	0x58024400
 8001554:	58021000 	.word	0x58021000

08001558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001558:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001594 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800155c:	f7ff f900 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001560:	f7ff f850 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	@ (8001598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	@ (800159c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f006 fb5b 	bl	8007c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7ff f9f7 	bl	8000980 <main>
  bx  lr
 8001592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001598:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800159c:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 80015a0:	08008054 	.word	0x08008054
  ldr r2, =_sbss
 80015a4:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 80015a8:	24000334 	.word	0x24000334

080015ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC3_IRQHandler>
	...

080015b0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	@ 0x30
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <BSP_LED_Init+0x28>
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d006      	beq.n	80015d8 <BSP_LED_Init+0x28>
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d003      	beq.n	80015d8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015d0:	f06f 0301 	mvn.w	r3, #1
 80015d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015d6:	e055      	b.n	8001684 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10f      	bne.n	80015fe <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80015de:	4b2c      	ldr	r3, [pc, #176]	@ (8001690 <BSP_LED_Init+0xe0>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001690 <BSP_LED_Init+0xe0>)
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ee:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <BSP_LED_Init+0xe0>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	e021      	b.n	8001642 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d10f      	bne.n	8001624 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <BSP_LED_Init+0xe0>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160a:	4a21      	ldr	r2, [pc, #132]	@ (8001690 <BSP_LED_Init+0xe0>)
 800160c:	f043 0310 	orr.w	r3, r3, #16
 8001610:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001614:	4b1e      	ldr	r3, [pc, #120]	@ (8001690 <BSP_LED_Init+0xe0>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	e00e      	b.n	8001642 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001624:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <BSP_LED_Init+0xe0>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162a:	4a19      	ldr	r2, [pc, #100]	@ (8001690 <BSP_LED_Init+0xe0>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001634:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <BSP_LED_Init+0xe0>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	4a13      	ldr	r2, [pc, #76]	@ (8001694 <BSP_LED_Init+0xe4>)
 8001646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	4a0f      	ldr	r2, [pc, #60]	@ (8001698 <BSP_LED_Init+0xe8>)
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	f107 0218 	add.w	r2, r7, #24
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fc08 	bl	8001e7c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <BSP_LED_Init+0xe8>)
 8001670:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <BSP_LED_Init+0xe4>)
 8001678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800167c:	2200      	movs	r2, #0
 800167e:	4619      	mov	r1, r3
 8001680:	f000 fea6 	bl	80023d0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001686:	4618      	mov	r0, r3
 8001688:	3730      	adds	r7, #48	@ 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	58024400 	.word	0x58024400
 8001694:	08008020 	.word	0x08008020
 8001698:	2400000c 	.word	0x2400000c

0800169c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	460a      	mov	r2, r1
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	4613      	mov	r3, r2
 80016aa:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80016ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <BSP_PB_Init+0xcc>)
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001768 <BSP_PB_Init+0xcc>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <BSP_PB_Init+0xcc>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80016ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ce:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80016d0:	2302      	movs	r3, #2
 80016d2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4a21      	ldr	r2, [pc, #132]	@ (800176c <BSP_PB_Init+0xd0>)
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	f107 020c 	add.w	r2, r7, #12
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fbc3 	bl	8001e7c <HAL_GPIO_Init>
 80016f6:	e031      	b.n	800175c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80016f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016fc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4a1a      	ldr	r2, [pc, #104]	@ (800176c <BSP_PB_Init+0xd0>)
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	f107 020c 	add.w	r2, r7, #12
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fbb5 	bl	8001e7c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4a16      	ldr	r2, [pc, #88]	@ (8001770 <BSP_PB_Init+0xd4>)
 8001718:	441a      	add	r2, r3
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4915      	ldr	r1, [pc, #84]	@ (8001774 <BSP_PB_Init+0xd8>)
 800171e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f000 fb19 	bl	8001d5c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <BSP_PB_Init+0xd4>)
 8001730:	1898      	adds	r0, r3, r2
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	4a10      	ldr	r2, [pc, #64]	@ (8001778 <BSP_PB_Init+0xdc>)
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	461a      	mov	r2, r3
 800173c:	2100      	movs	r1, #0
 800173e:	f000 faed 	bl	8001d1c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001742:	2028      	movs	r0, #40	@ 0x28
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <BSP_PB_Init+0xe0>)
 8001748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174c:	2200      	movs	r2, #0
 800174e:	4619      	mov	r1, r3
 8001750:	f000 fa84 	bl	8001c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001754:	2328      	movs	r3, #40	@ 0x28
 8001756:	4618      	mov	r0, r3
 8001758:	f000 faaa 	bl	8001cb0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	58024400 	.word	0x58024400
 800176c:	24000018 	.word	0x24000018
 8001770:	24000294 	.word	0x24000294
 8001774:	08008028 	.word	0x08008028
 8001778:	2400001c 	.word	0x2400001c
 800177c:	24000020 	.word	0x24000020

08001780 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <BSP_PB_IRQHandler+0x20>)
 8001790:	4413      	add	r3, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fb36 	bl	8001e04 <HAL_EXTI_IRQHandler>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	24000294 	.word	0x24000294

080017a4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017d2:	f06f 0301 	mvn.w	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e018      	b.n	800180c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2294      	movs	r2, #148	@ 0x94
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001818 <BSP_COM_Init+0x5c>)
 80017e4:	4413      	add	r3, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f852 	bl	8001890 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2294      	movs	r2, #148	@ 0x94
 80017f0:	fb02 f303 	mul.w	r3, r2, r3
 80017f4:	4a08      	ldr	r2, [pc, #32]	@ (8001818 <BSP_COM_Init+0x5c>)
 80017f6:	4413      	add	r3, r2
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f80e 	bl	800181c <MX_USART3_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001806:	f06f 0303 	mvn.w	r3, #3
 800180a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2400029c 	.word	0x2400029c

0800181c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <MX_USART3_Init+0x60>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	220c      	movs	r2, #12
 800183a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	895b      	ldrh	r3, [r3, #10]
 8001840:	461a      	mov	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	891b      	ldrh	r3, [r3, #8]
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	899b      	ldrh	r3, [r3, #12]
 800185c:	461a      	mov	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001868:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f004 ffd4 	bl	8006818 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	24000008 	.word	0x24000008

08001880 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff ff8d 	bl	80017a4 <BSP_PB_Callback>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	@ 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <COM1_MspInit+0xa8>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189e:	4a26      	ldr	r2, [pc, #152]	@ (8001938 <COM1_MspInit+0xa8>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a8:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <COM1_MspInit+0xa8>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <COM1_MspInit+0xa8>)
 80018b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001938 <COM1_MspInit+0xa8>)
 80018be:	f043 0308 	orr.w	r3, r3, #8
 80018c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <COM1_MspInit+0xa8>)
 80018c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <COM1_MspInit+0xa8>)
 80018d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018da:	4a17      	ldr	r2, [pc, #92]	@ (8001938 <COM1_MspInit+0xa8>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018e4:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <COM1_MspInit+0xa8>)
 80018e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80018f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001900:	2301      	movs	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001904:	2307      	movs	r3, #7
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	480b      	ldr	r0, [pc, #44]	@ (800193c <COM1_MspInit+0xac>)
 8001910:	f000 fab4 	bl	8001e7c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001914:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001918:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800191e:	2307      	movs	r3, #7
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	4804      	ldr	r0, [pc, #16]	@ (800193c <COM1_MspInit+0xac>)
 800192a:	f000 faa7 	bl	8001e7c <HAL_GPIO_Init>
}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	@ 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	58024400 	.word	0x58024400
 800193c:	58020c00 	.word	0x58020c00

08001940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001946:	2003      	movs	r0, #3
 8001948:	f000 f968 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800194c:	f001 ff08 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_Init+0x68>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	4913      	ldr	r1, [pc, #76]	@ (80019ac <HAL_Init+0x6c>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800196a:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <HAL_Init+0x68>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	4a0e      	ldr	r2, [pc, #56]	@ (80019ac <HAL_Init+0x6c>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	4a0b      	ldr	r2, [pc, #44]	@ (80019b0 <HAL_Init+0x70>)
 8001982:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001984:	4a0b      	ldr	r2, [pc, #44]	@ (80019b4 <HAL_Init+0x74>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f814 	bl	80019b8 <HAL_InitTick>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e002      	b.n	80019a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800199a:	f7ff f9f7 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	58024400 	.word	0x58024400
 80019ac:	08008010 	.word	0x08008010
 80019b0:	24000004 	.word	0x24000004
 80019b4:	24000000 	.word	0x24000000

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019c0:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_InitTick+0x60>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e021      	b.n	8001a10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019cc:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <HAL_InitTick+0x64>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <HAL_InitTick+0x60>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019da:	fbb3 f3f1 	udiv	r3, r3, r1
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f97c 	bl	8001ce0 <HAL_SYSTICK_Config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00e      	b.n	8001a10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d80a      	bhi.n	8001a0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a00:	f000 f92c 	bl	8001c5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4a06      	ldr	r2, [pc, #24]	@ (8001a20 <HAL_InitTick+0x68>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	24000028 	.word	0x24000028
 8001a1c:	24000000 	.word	0x24000000
 8001a20:	24000024 	.word	0x24000024

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	24000028 	.word	0x24000028
 8001a48:	24000330 	.word	0x24000330

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	24000330 	.word	0x24000330

08001a64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_GetREVID+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	5c001000 	.word	0x5c001000

08001a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <__NVIC_SetPriorityGrouping+0x40>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	@ (8001abc <__NVIC_SetPriorityGrouping+0x40>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00
 8001ac0:	05fa0000 	.word	0x05fa0000

08001ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	db0b      	blt.n	8001b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	4907      	ldr	r1, [pc, #28]	@ (8001b18 <__NVIC_EnableIRQ+0x38>)
 8001afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2001      	movs	r0, #1
 8001b02:	fa00 f202 	lsl.w	r2, r0, r2
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	@ (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	@ (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	@ 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	@ 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001be8:	d301      	bcc.n	8001bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00f      	b.n	8001c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bee:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <SysTick_Config+0x40>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bfc:	f7ff ff8e 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <SysTick_Config+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c06:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <SysTick_Config+0x40>)
 8001c08:	2207      	movs	r2, #7
 8001c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b07      	cmp	r3, #7
 8001c28:	d00f      	beq.n	8001c4a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b06      	cmp	r3, #6
 8001c2e:	d00c      	beq.n	8001c4a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d009      	beq.n	8001c4a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d006      	beq.n	8001c4a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d003      	beq.n	8001c4a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c42:	2191      	movs	r1, #145	@ 0x91
 8001c44:	4804      	ldr	r0, [pc, #16]	@ (8001c58 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001c46:	f7fe ffd5 	bl	8000bf4 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ff16 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	08007ca4 	.word	0x08007ca4

08001c5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d903      	bls.n	8001c78 <HAL_NVIC_SetPriority+0x1c>
 8001c70:	21a9      	movs	r1, #169	@ 0xa9
 8001c72:	480e      	ldr	r0, [pc, #56]	@ (8001cac <HAL_NVIC_SetPriority+0x50>)
 8001c74:	f7fe ffbe 	bl	8000bf4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	d903      	bls.n	8001c86 <HAL_NVIC_SetPriority+0x2a>
 8001c7e:	21aa      	movs	r1, #170	@ 0xaa
 8001c80:	480a      	ldr	r0, [pc, #40]	@ (8001cac <HAL_NVIC_SetPriority+0x50>)
 8001c82:	f7fe ffb7 	bl	8000bf4 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c86:	f7ff ff1d 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001c8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	6978      	ldr	r0, [r7, #20]
 8001c92:	f7ff ff6d 	bl	8001b70 <NVIC_EncodePriority>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff3c 	bl	8001b1c <__NVIC_SetPriority>
}
 8001ca4:	bf00      	nop
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	08007ca4 	.word	0x08007ca4

08001cb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	da03      	bge.n	8001cca <HAL_NVIC_EnableIRQ+0x1a>
 8001cc2:	21bd      	movs	r1, #189	@ 0xbd
 8001cc4:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <HAL_NVIC_EnableIRQ+0x2c>)
 8001cc6:	f7fe ff95 	bl	8000bf4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff06 	bl	8001ae0 <__NVIC_EnableIRQ>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	08007ca4 	.word	0x08007ca4

08001ce0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff75 	bl	8001bd8 <SysTick_Config>
 8001cee:	4603      	mov	r3, r0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_GetCurrentCPUID+0x20>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d04:	2b70      	cmp	r3, #112	@ 0x70
 8001d06:	d101      	bne.n	8001d0c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8001d0c:	2301      	movs	r3, #1
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	460b      	mov	r3, r1
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e00a      	b.n	8001d4e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001d38:	7afb      	ldrb	r3, [r7, #11]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	605a      	str	r2, [r3, #4]
      break;
 8001d44:	e002      	b.n	8001d4c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
      break;
 8001d4a:	bf00      	nop
  }

  return status;
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <HAL_EXTI_GetHandle+0x98>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d12f      	bne.n	8001dd0 <HAL_EXTI_GetHandle+0x74>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8001d76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d7a:	d00b      	beq.n	8001d94 <HAL_EXTI_GetHandle+0x38>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8001d82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d86:	d005      	beq.n	8001d94 <HAL_EXTI_GetHandle+0x38>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8001d8e:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8001d92:	d11d      	bne.n	8001dd0 <HAL_EXTI_GetHandle+0x74>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8001d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d9e:	d011      	beq.n	8001dc4 <HAL_EXTI_GetHandle+0x68>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8001da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001daa:	d00b      	beq.n	8001dc4 <HAL_EXTI_GetHandle+0x68>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8001db2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8001db6:	d005      	beq.n	8001dc4 <HAL_EXTI_GetHandle+0x68>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8001dbe:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8001dc2:	d105      	bne.n	8001dd0 <HAL_EXTI_GetHandle+0x74>
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <HAL_EXTI_GetHandle+0x9c>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	4a0c      	ldr	r2, [pc, #48]	@ (8001dfc <HAL_EXTI_GetHandle+0xa0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d904      	bls.n	8001dda <HAL_EXTI_GetHandle+0x7e>
 8001dd0:	f240 2187 	movw	r1, #647	@ 0x287
 8001dd4:	480a      	ldr	r0, [pc, #40]	@ (8001e00 <HAL_EXTI_GetHandle+0xa4>)
 8001dd6:	f7fe ff0d 	bl	8000bf4 <assert_failed>

  /* Check null pointer */
  if (hexti == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_EXTI_GetHandle+0x88>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e003      	b.n	8001dec <HAL_EXTI_GetHandle+0x90>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001dea:	2300      	movs	r3, #0
  }
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	e88cffe0 	.word	0xe88cffe0
 8001df8:	0003001f 	.word	0x0003001f
 8001dfc:	00020017 	.word	0x00020017
 8001e00:	08007d14 	.word	0x08007d14

08001e04 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2201      	movs	r2, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001e28:	f7ff ff66 	bl	8001cf8 <HAL_GetCurrentCPUID>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d105      	bne.n	8001e3e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	011a      	lsls	r2, r3, #4
 8001e36:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <HAL_EXTI_IRQHandler+0x70>)
 8001e38:	4413      	add	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	e004      	b.n	8001e48 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	011a      	lsls	r2, r3, #4
 8001e42:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <HAL_EXTI_IRQHandler+0x74>)
 8001e44:	4413      	add	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4798      	blx	r3
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	58000088 	.word	0x58000088
 8001e78:	580000c8 	.word	0x580000c8

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e8a:	4b43      	ldr	r3, [pc, #268]	@ (8001f98 <HAL_GPIO_Init+0x11c>)
 8001e8c:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a42      	ldr	r2, [pc, #264]	@ (8001f9c <HAL_GPIO_Init+0x120>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d02b      	beq.n	8001eee <HAL_GPIO_Init+0x72>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a41      	ldr	r2, [pc, #260]	@ (8001fa0 <HAL_GPIO_Init+0x124>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d027      	beq.n	8001eee <HAL_GPIO_Init+0x72>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a40      	ldr	r2, [pc, #256]	@ (8001fa4 <HAL_GPIO_Init+0x128>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d023      	beq.n	8001eee <HAL_GPIO_Init+0x72>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a3f      	ldr	r2, [pc, #252]	@ (8001fa8 <HAL_GPIO_Init+0x12c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01f      	beq.n	8001eee <HAL_GPIO_Init+0x72>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a3e      	ldr	r2, [pc, #248]	@ (8001fac <HAL_GPIO_Init+0x130>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01b      	beq.n	8001eee <HAL_GPIO_Init+0x72>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a3d      	ldr	r2, [pc, #244]	@ (8001fb0 <HAL_GPIO_Init+0x134>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d017      	beq.n	8001eee <HAL_GPIO_Init+0x72>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb4 <HAL_GPIO_Init+0x138>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x72>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb8 <HAL_GPIO_Init+0x13c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00f      	beq.n	8001eee <HAL_GPIO_Init+0x72>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a3a      	ldr	r2, [pc, #232]	@ (8001fbc <HAL_GPIO_Init+0x140>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00b      	beq.n	8001eee <HAL_GPIO_Init+0x72>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a39      	ldr	r2, [pc, #228]	@ (8001fc0 <HAL_GPIO_Init+0x144>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <HAL_GPIO_Init+0x72>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a38      	ldr	r2, [pc, #224]	@ (8001fc4 <HAL_GPIO_Init+0x148>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x72>
 8001ee6:	21b3      	movs	r1, #179	@ 0xb3
 8001ee8:	4837      	ldr	r0, [pc, #220]	@ (8001fc8 <HAL_GPIO_Init+0x14c>)
 8001eea:	f7fe fe83 	bl	8000bf4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <HAL_GPIO_Init+0x86>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f00:	d303      	bcc.n	8001f0a <HAL_GPIO_Init+0x8e>
 8001f02:	21b4      	movs	r1, #180	@ 0xb4
 8001f04:	4830      	ldr	r0, [pc, #192]	@ (8001fc8 <HAL_GPIO_Init+0x14c>)
 8001f06:	f7fe fe75 	bl	8000bf4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 824f 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	f000 824a 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b11      	cmp	r3, #17
 8001f24:	f000 8245 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	f000 8240 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b12      	cmp	r3, #18
 8001f38:	f000 823b 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001f44:	f000 8235 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001f50:	f000 822f 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001f5c:	f000 8229 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001f68:	f000 8223 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8001f74:	f000 821d 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8001f80:	f000 8217 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	f000 8212 	beq.w	80023b2 <HAL_GPIO_Init+0x536>
 8001f8e:	21b5      	movs	r1, #181	@ 0xb5
 8001f90:	480d      	ldr	r0, [pc, #52]	@ (8001fc8 <HAL_GPIO_Init+0x14c>)
 8001f92:	f7fe fe2f 	bl	8000bf4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f96:	e20c      	b.n	80023b2 <HAL_GPIO_Init+0x536>
 8001f98:	58000080 	.word	0x58000080
 8001f9c:	58020000 	.word	0x58020000
 8001fa0:	58020400 	.word	0x58020400
 8001fa4:	58020800 	.word	0x58020800
 8001fa8:	58020c00 	.word	0x58020c00
 8001fac:	58021000 	.word	0x58021000
 8001fb0:	58021400 	.word	0x58021400
 8001fb4:	58021800 	.word	0x58021800
 8001fb8:	58021c00 	.word	0x58021c00
 8001fbc:	58022000 	.word	0x58022000
 8001fc0:	58022400 	.word	0x58022400
 8001fc4:	58022800 	.word	0x58022800
 8001fc8:	08007d80 	.word	0x08007d80
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 81e4 	beq.w	80023ac <HAL_GPIO_Init+0x530>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d005      	beq.n	8001ffc <HAL_GPIO_Init+0x180>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d144      	bne.n	8002086 <HAL_GPIO_Init+0x20a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00f      	beq.n	8002024 <HAL_GPIO_Init+0x1a8>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d00b      	beq.n	8002024 <HAL_GPIO_Init+0x1a8>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d007      	beq.n	8002024 <HAL_GPIO_Init+0x1a8>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x1a8>
 800201c:	21c4      	movs	r1, #196	@ 0xc4
 800201e:	489a      	ldr	r0, [pc, #616]	@ (8002288 <HAL_GPIO_Init+0x40c>)
 8002020:	f7fe fde8 	bl	8000bf4 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800205a:	2201      	movs	r2, #1
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 0201 	and.w	r2, r3, #1
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b03      	cmp	r3, #3
 8002090:	d027      	beq.n	80020e2 <HAL_GPIO_Init+0x266>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_GPIO_Init+0x236>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d007      	beq.n	80020b2 <HAL_GPIO_Init+0x236>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x236>
 80020aa:	21d6      	movs	r1, #214	@ 0xd6
 80020ac:	4876      	ldr	r0, [pc, #472]	@ (8002288 <HAL_GPIO_Init+0x40c>)
 80020ae:	f7fe fda1 	bl	8000bf4 <assert_failed>

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d15b      	bne.n	80021a6 <HAL_GPIO_Init+0x32a>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a66      	ldr	r2, [pc, #408]	@ (800228c <HAL_GPIO_Init+0x410>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02b      	beq.n	800214e <HAL_GPIO_Init+0x2d2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a65      	ldr	r2, [pc, #404]	@ (8002290 <HAL_GPIO_Init+0x414>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d027      	beq.n	800214e <HAL_GPIO_Init+0x2d2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a64      	ldr	r2, [pc, #400]	@ (8002294 <HAL_GPIO_Init+0x418>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d023      	beq.n	800214e <HAL_GPIO_Init+0x2d2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a63      	ldr	r2, [pc, #396]	@ (8002298 <HAL_GPIO_Init+0x41c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01f      	beq.n	800214e <HAL_GPIO_Init+0x2d2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a62      	ldr	r2, [pc, #392]	@ (800229c <HAL_GPIO_Init+0x420>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01b      	beq.n	800214e <HAL_GPIO_Init+0x2d2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a61      	ldr	r2, [pc, #388]	@ (80022a0 <HAL_GPIO_Init+0x424>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d017      	beq.n	800214e <HAL_GPIO_Init+0x2d2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a60      	ldr	r2, [pc, #384]	@ (80022a4 <HAL_GPIO_Init+0x428>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_GPIO_Init+0x2d2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a5f      	ldr	r2, [pc, #380]	@ (80022a8 <HAL_GPIO_Init+0x42c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00f      	beq.n	800214e <HAL_GPIO_Init+0x2d2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a5e      	ldr	r2, [pc, #376]	@ (80022ac <HAL_GPIO_Init+0x430>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00b      	beq.n	800214e <HAL_GPIO_Init+0x2d2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a5d      	ldr	r2, [pc, #372]	@ (80022b0 <HAL_GPIO_Init+0x434>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d007      	beq.n	800214e <HAL_GPIO_Init+0x2d2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a5c      	ldr	r2, [pc, #368]	@ (80022b4 <HAL_GPIO_Init+0x438>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x2d2>
 8002146:	21e3      	movs	r1, #227	@ 0xe3
 8002148:	484f      	ldr	r0, [pc, #316]	@ (8002288 <HAL_GPIO_Init+0x40c>)
 800214a:	f7fe fd53 	bl	8000bf4 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d903      	bls.n	800215e <HAL_GPIO_Init+0x2e2>
 8002156:	21e4      	movs	r1, #228	@ 0xe4
 8002158:	484b      	ldr	r0, [pc, #300]	@ (8002288 <HAL_GPIO_Init+0x40c>)
 800215a:	f7fe fd4b 	bl	8000bf4 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3208      	adds	r2, #8
 80021a0:	69b9      	ldr	r1, [r7, #24]
 80021a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0203 	and.w	r2, r3, #3
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80e2 	beq.w	80023ac <HAL_GPIO_Init+0x530>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e8:	4b33      	ldr	r3, [pc, #204]	@ (80022b8 <HAL_GPIO_Init+0x43c>)
 80021ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021ee:	4a32      	ldr	r2, [pc, #200]	@ (80022b8 <HAL_GPIO_Init+0x43c>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021f8:	4b2f      	ldr	r3, [pc, #188]	@ (80022b8 <HAL_GPIO_Init+0x43c>)
 80021fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <HAL_GPIO_Init+0x440>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a17      	ldr	r2, [pc, #92]	@ (800228c <HAL_GPIO_Init+0x410>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d054      	beq.n	80022dc <HAL_GPIO_Init+0x460>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a16      	ldr	r2, [pc, #88]	@ (8002290 <HAL_GPIO_Init+0x414>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d04e      	beq.n	80022d8 <HAL_GPIO_Init+0x45c>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a15      	ldr	r2, [pc, #84]	@ (8002294 <HAL_GPIO_Init+0x418>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d048      	beq.n	80022d4 <HAL_GPIO_Init+0x458>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <HAL_GPIO_Init+0x41c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d042      	beq.n	80022d0 <HAL_GPIO_Init+0x454>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a13      	ldr	r2, [pc, #76]	@ (800229c <HAL_GPIO_Init+0x420>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d03c      	beq.n	80022cc <HAL_GPIO_Init+0x450>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <HAL_GPIO_Init+0x424>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d036      	beq.n	80022c8 <HAL_GPIO_Init+0x44c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a11      	ldr	r2, [pc, #68]	@ (80022a4 <HAL_GPIO_Init+0x428>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d030      	beq.n	80022c4 <HAL_GPIO_Init+0x448>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a10      	ldr	r2, [pc, #64]	@ (80022a8 <HAL_GPIO_Init+0x42c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d02a      	beq.n	80022c0 <HAL_GPIO_Init+0x444>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a0f      	ldr	r2, [pc, #60]	@ (80022ac <HAL_GPIO_Init+0x430>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x406>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a0e      	ldr	r2, [pc, #56]	@ (80022b0 <HAL_GPIO_Init+0x434>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x402>
 800227a:	2309      	movs	r3, #9
 800227c:	e02f      	b.n	80022de <HAL_GPIO_Init+0x462>
 800227e:	230a      	movs	r3, #10
 8002280:	e02d      	b.n	80022de <HAL_GPIO_Init+0x462>
 8002282:	2308      	movs	r3, #8
 8002284:	e02b      	b.n	80022de <HAL_GPIO_Init+0x462>
 8002286:	bf00      	nop
 8002288:	08007d80 	.word	0x08007d80
 800228c:	58020000 	.word	0x58020000
 8002290:	58020400 	.word	0x58020400
 8002294:	58020800 	.word	0x58020800
 8002298:	58020c00 	.word	0x58020c00
 800229c:	58021000 	.word	0x58021000
 80022a0:	58021400 	.word	0x58021400
 80022a4:	58021800 	.word	0x58021800
 80022a8:	58021c00 	.word	0x58021c00
 80022ac:	58022000 	.word	0x58022000
 80022b0:	58022400 	.word	0x58022400
 80022b4:	58022800 	.word	0x58022800
 80022b8:	58024400 	.word	0x58024400
 80022bc:	58000400 	.word	0x58000400
 80022c0:	2307      	movs	r3, #7
 80022c2:	e00c      	b.n	80022de <HAL_GPIO_Init+0x462>
 80022c4:	2306      	movs	r3, #6
 80022c6:	e00a      	b.n	80022de <HAL_GPIO_Init+0x462>
 80022c8:	2305      	movs	r3, #5
 80022ca:	e008      	b.n	80022de <HAL_GPIO_Init+0x462>
 80022cc:	2304      	movs	r3, #4
 80022ce:	e006      	b.n	80022de <HAL_GPIO_Init+0x462>
 80022d0:	2303      	movs	r3, #3
 80022d2:	e004      	b.n	80022de <HAL_GPIO_Init+0x462>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e002      	b.n	80022de <HAL_GPIO_Init+0x462>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_GPIO_Init+0x462>
 80022dc:	2300      	movs	r3, #0
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	f002 0203 	and.w	r2, r2, #3
 80022e4:	0092      	lsls	r2, r2, #2
 80022e6:	4093      	lsls	r3, r2
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ee:	4937      	ldr	r1, [pc, #220]	@ (80023cc <HAL_GPIO_Init+0x550>)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x4a6>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002322:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800232a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002350:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x500>
        {
          temp |= iocurrent;
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x52a>
        {
          temp |= iocurrent;
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	3301      	adds	r3, #1
 80023b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f47f ae05 	bne.w	8001fcc <HAL_GPIO_Init+0x150>
  }
}
 80023c2:	bf00      	nop
 80023c4:	bf00      	nop
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	58000400 	.word	0x58000400

080023d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
 80023dc:	4613      	mov	r3, r2
 80023de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d104      	bne.n	80023f0 <HAL_GPIO_WritePin+0x20>
 80023e6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80023ea:	480e      	ldr	r0, [pc, #56]	@ (8002424 <HAL_GPIO_WritePin+0x54>)
 80023ec:	f7fe fc02 	bl	8000bf4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_WritePin+0x36>
 80023f6:	787b      	ldrb	r3, [r7, #1]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d004      	beq.n	8002406 <HAL_GPIO_WritePin+0x36>
 80023fc:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002400:	4808      	ldr	r0, [pc, #32]	@ (8002424 <HAL_GPIO_WritePin+0x54>)
 8002402:	f7fe fbf7 	bl	8000bf4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002406:	787b      	ldrb	r3, [r7, #1]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240c:	887a      	ldrh	r2, [r7, #2]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002412:	e003      	b.n	800241c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002414:	887b      	ldrh	r3, [r7, #2]
 8002416:	041a      	lsls	r2, r3, #16
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	08007d80 	.word	0x08007d80

08002428 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d01c      	beq.n	8002470 <HAL_PWREx_ConfigSupply+0x48>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b04      	cmp	r3, #4
 800243a:	d019      	beq.n	8002470 <HAL_PWREx_ConfigSupply+0x48>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b16      	cmp	r3, #22
 8002440:	d016      	beq.n	8002470 <HAL_PWREx_ConfigSupply+0x48>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b26      	cmp	r3, #38	@ 0x26
 8002446:	d013      	beq.n	8002470 <HAL_PWREx_ConfigSupply+0x48>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b1e      	cmp	r3, #30
 800244c:	d010      	beq.n	8002470 <HAL_PWREx_ConfigSupply+0x48>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b2e      	cmp	r3, #46	@ 0x2e
 8002452:	d00d      	beq.n	8002470 <HAL_PWREx_ConfigSupply+0x48>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b1d      	cmp	r3, #29
 8002458:	d00a      	beq.n	8002470 <HAL_PWREx_ConfigSupply+0x48>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b2d      	cmp	r3, #45	@ 0x2d
 800245e:	d007      	beq.n	8002470 <HAL_PWREx_ConfigSupply+0x48>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d004      	beq.n	8002470 <HAL_PWREx_ConfigSupply+0x48>
 8002466:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 800246a:	482b      	ldr	r0, [pc, #172]	@ (8002518 <HAL_PWREx_ConfigSupply+0xf0>)
 800246c:	f7fe fbc2 	bl	8000bf4 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002470:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <HAL_PWREx_ConfigSupply+0xf4>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	2b06      	cmp	r3, #6
 800247a:	d00a      	beq.n	8002492 <HAL_PWREx_ConfigSupply+0x6a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800247c:	4b27      	ldr	r3, [pc, #156]	@ (800251c <HAL_PWREx_ConfigSupply+0xf4>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <HAL_PWREx_ConfigSupply+0x66>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e040      	b.n	8002510 <HAL_PWREx_ConfigSupply+0xe8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e03e      	b.n	8002510 <HAL_PWREx_ConfigSupply+0xe8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002492:	4b22      	ldr	r3, [pc, #136]	@ (800251c <HAL_PWREx_ConfigSupply+0xf4>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800249a:	4920      	ldr	r1, [pc, #128]	@ (800251c <HAL_PWREx_ConfigSupply+0xf4>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024a2:	f7ff fad3 	bl	8001a4c <HAL_GetTick>
 80024a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024a8:	e009      	b.n	80024be <HAL_PWREx_ConfigSupply+0x96>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024aa:	f7ff facf 	bl	8001a4c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024b8:	d901      	bls.n	80024be <HAL_PWREx_ConfigSupply+0x96>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e028      	b.n	8002510 <HAL_PWREx_ConfigSupply+0xe8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024be:	4b17      	ldr	r3, [pc, #92]	@ (800251c <HAL_PWREx_ConfigSupply+0xf4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ca:	d1ee      	bne.n	80024aa <HAL_PWREx_ConfigSupply+0x82>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b1e      	cmp	r3, #30
 80024d0:	d008      	beq.n	80024e4 <HAL_PWREx_ConfigSupply+0xbc>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80024d6:	d005      	beq.n	80024e4 <HAL_PWREx_ConfigSupply+0xbc>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b1d      	cmp	r3, #29
 80024dc:	d002      	beq.n	80024e4 <HAL_PWREx_ConfigSupply+0xbc>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b2d      	cmp	r3, #45	@ 0x2d
 80024e2:	d114      	bne.n	800250e <HAL_PWREx_ConfigSupply+0xe6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024e4:	f7ff fab2 	bl	8001a4c <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024ea:	e009      	b.n	8002500 <HAL_PWREx_ConfigSupply+0xd8>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024ec:	f7ff faae 	bl	8001a4c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024fa:	d901      	bls.n	8002500 <HAL_PWREx_ConfigSupply+0xd8>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e007      	b.n	8002510 <HAL_PWREx_ConfigSupply+0xe8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_PWREx_ConfigSupply+0xf4>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250c:	d1ee      	bne.n	80024ec <HAL_PWREx_ConfigSupply+0xc4>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	08007dec 	.word	0x08007dec
 800251c:	58024800 	.word	0x58024800

08002520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	f000 bd9c 	b.w	800306c <HAL_RCC_OscConfig+0xb4c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d028      	beq.n	800258e <HAL_RCC_OscConfig+0x6e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d122      	bne.n	800258e <HAL_RCC_OscConfig+0x6e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d11c      	bne.n	800258e <HAL_RCC_OscConfig+0x6e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d116      	bne.n	800258e <HAL_RCC_OscConfig+0x6e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d110      	bne.n	800258e <HAL_RCC_OscConfig+0x6e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_RCC_OscConfig+0x6e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <HAL_RCC_OscConfig+0x6e>
 8002584:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8002588:	4897      	ldr	r0, [pc, #604]	@ (80027e8 <HAL_RCC_OscConfig+0x2c8>)
 800258a:	f7fe fb33 	bl	8000bf4 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 809d 	beq.w	80026d6 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00e      	beq.n	80025c2 <HAL_RCC_OscConfig+0xa2>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_OscConfig+0xa2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025b6:	d004      	beq.n	80025c2 <HAL_RCC_OscConfig+0xa2>
 80025b8:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 80025bc:	488a      	ldr	r0, [pc, #552]	@ (80027e8 <HAL_RCC_OscConfig+0x2c8>)
 80025be:	f7fe fb19 	bl	8000bf4 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c2:	4b8a      	ldr	r3, [pc, #552]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025cc:	4b87      	ldr	r3, [pc, #540]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d007      	beq.n	80025e8 <HAL_RCC_OscConfig+0xc8>
 80025d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025da:	2b18      	cmp	r3, #24
 80025dc:	d111      	bne.n	8002602 <HAL_RCC_OscConfig+0xe2>
 80025de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_OscConfig+0xe2>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b80      	ldr	r3, [pc, #512]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d06f      	beq.n	80026d4 <HAL_RCC_OscConfig+0x1b4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d16b      	bne.n	80026d4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f000 bd35 	b.w	800306c <HAL_RCC_OscConfig+0xb4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0xfa>
 800260c:	4b77      	ldr	r3, [pc, #476]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a76      	ldr	r2, [pc, #472]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	e02e      	b.n	8002678 <HAL_RCC_OscConfig+0x158>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x11c>
 8002622:	4b72      	ldr	r3, [pc, #456]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a71      	ldr	r2, [pc, #452]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b6f      	ldr	r3, [pc, #444]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6e      	ldr	r2, [pc, #440]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002634:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e01d      	b.n	8002678 <HAL_RCC_OscConfig+0x158>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x140>
 8002646:	4b69      	ldr	r3, [pc, #420]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a68      	ldr	r2, [pc, #416]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 800264c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b66      	ldr	r3, [pc, #408]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a65      	ldr	r2, [pc, #404]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0x158>
 8002660:	4b62      	ldr	r3, [pc, #392]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a61      	ldr	r2, [pc, #388]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b5f      	ldr	r3, [pc, #380]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a5e      	ldr	r2, [pc, #376]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d014      	beq.n	80026aa <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7ff f9e4 	bl	8001a4c <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002686:	e009      	b.n	800269c <HAL_RCC_OscConfig+0x17c>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002688:	f7ff f9e0 	bl	8001a4c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	@ 0x64
 8002694:	d902      	bls.n	800269c <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	f000 bce8 	b.w	800306c <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800269c:	4b53      	ldr	r3, [pc, #332]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ef      	beq.n	8002688 <HAL_RCC_OscConfig+0x168>
 80026a8:	e015      	b.n	80026d6 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7ff f9cf 	bl	8001a4c <HAL_GetTick>
 80026ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026b0:	e009      	b.n	80026c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b2:	f7ff f9cb 	bl	8001a4c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b64      	cmp	r3, #100	@ 0x64
 80026be:	d902      	bls.n	80026c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	f000 bcd3 	b.w	800306c <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026c6:	4b49      	ldr	r3, [pc, #292]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1ef      	bne.n	80026b2 <HAL_RCC_OscConfig+0x192>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x1b6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80f5 	beq.w	80028ce <HAL_RCC_OscConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d018      	beq.n	800271e <HAL_RCC_OscConfig+0x1fe>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d014      	beq.n	800271e <HAL_RCC_OscConfig+0x1fe>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d010      	beq.n	800271e <HAL_RCC_OscConfig+0x1fe>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b09      	cmp	r3, #9
 8002702:	d00c      	beq.n	800271e <HAL_RCC_OscConfig+0x1fe>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b11      	cmp	r3, #17
 800270a:	d008      	beq.n	800271e <HAL_RCC_OscConfig+0x1fe>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b19      	cmp	r3, #25
 8002712:	d004      	beq.n	800271e <HAL_RCC_OscConfig+0x1fe>
 8002714:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8002718:	4833      	ldr	r0, [pc, #204]	@ (80027e8 <HAL_RCC_OscConfig+0x2c8>)
 800271a:	f7fe fa6b 	bl	8000bf4 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b7f      	cmp	r3, #127	@ 0x7f
 8002724:	d904      	bls.n	8002730 <HAL_RCC_OscConfig+0x210>
 8002726:	f240 11db 	movw	r1, #475	@ 0x1db
 800272a:	482f      	ldr	r0, [pc, #188]	@ (80027e8 <HAL_RCC_OscConfig+0x2c8>)
 800272c:	f7fe fa62 	bl	8000bf4 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002730:	4b2e      	ldr	r3, [pc, #184]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002738:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800273a:	4b2c      	ldr	r3, [pc, #176]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_RCC_OscConfig+0x236>
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	2b18      	cmp	r3, #24
 800274a:	d15c      	bne.n	8002806 <HAL_RCC_OscConfig+0x2e6>
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d157      	bne.n	8002806 <HAL_RCC_OscConfig+0x2e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002756:	4b25      	ldr	r3, [pc, #148]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <HAL_RCC_OscConfig+0x250>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d102      	bne.n	8002770 <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	f000 bc7e 	b.w	800306c <HAL_RCC_OscConfig+0xb4c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002770:	4b1e      	ldr	r3, [pc, #120]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 0219 	bic.w	r2, r3, #25
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	491b      	ldr	r1, [pc, #108]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7ff f963 	bl	8001a4c <HAL_GetTick>
 8002786:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002788:	e009      	b.n	800279e <HAL_RCC_OscConfig+0x27e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278a:	f7ff f95f 	bl	8001a4c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d902      	bls.n	800279e <HAL_RCC_OscConfig+0x27e>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	f000 bc67 	b.w	800306c <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800279e:	4b13      	ldr	r3, [pc, #76]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ef      	beq.n	800278a <HAL_RCC_OscConfig+0x26a>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	f7ff f95b 	bl	8001a64 <HAL_GetREVID>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d81b      	bhi.n	80027f0 <HAL_RCC_OscConfig+0x2d0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b40      	cmp	r3, #64	@ 0x40
 80027be:	d108      	bne.n	80027d2 <HAL_RCC_OscConfig+0x2b2>
 80027c0:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027c8:	4a08      	ldr	r2, [pc, #32]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 80027ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d0:	e07d      	b.n	80028ce <HAL_RCC_OscConfig+0x3ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	031b      	lsls	r3, r3, #12
 80027e0:	4902      	ldr	r1, [pc, #8]	@ (80027ec <HAL_RCC_OscConfig+0x2cc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e6:	e072      	b.n	80028ce <HAL_RCC_OscConfig+0x3ae>
 80027e8:	08007e5c 	.word	0x08007e5c
 80027ec:	58024400 	.word	0x58024400
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f0:	4b97      	ldr	r3, [pc, #604]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	4994      	ldr	r1, [pc, #592]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002804:	e063      	b.n	80028ce <HAL_RCC_OscConfig+0x3ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d046      	beq.n	800289c <HAL_RCC_OscConfig+0x37c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800280e:	4b90      	ldr	r3, [pc, #576]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 0219 	bic.w	r2, r3, #25
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	498d      	ldr	r1, [pc, #564]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7ff f914 	bl	8001a4c <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002826:	e009      	b.n	800283c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7ff f910 	bl	8001a4c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d902      	bls.n	800283c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	f000 bc18 	b.w	800306c <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800283c:	4b84      	ldr	r3, [pc, #528]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ef      	beq.n	8002828 <HAL_RCC_OscConfig+0x308>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002848:	f7ff f90c 	bl	8001a64 <HAL_GetREVID>
 800284c:	4603      	mov	r3, r0
 800284e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002852:	4293      	cmp	r3, r2
 8002854:	d817      	bhi.n	8002886 <HAL_RCC_OscConfig+0x366>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b40      	cmp	r3, #64	@ 0x40
 800285c:	d108      	bne.n	8002870 <HAL_RCC_OscConfig+0x350>
 800285e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002866:	4a7a      	ldr	r2, [pc, #488]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800286c:	6053      	str	r3, [r2, #4]
 800286e:	e02e      	b.n	80028ce <HAL_RCC_OscConfig+0x3ae>
 8002870:	4b77      	ldr	r3, [pc, #476]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	031b      	lsls	r3, r3, #12
 800287e:	4974      	ldr	r1, [pc, #464]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
 8002884:	e023      	b.n	80028ce <HAL_RCC_OscConfig+0x3ae>
 8002886:	4b72      	ldr	r3, [pc, #456]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	061b      	lsls	r3, r3, #24
 8002894:	496e      	ldr	r1, [pc, #440]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
 800289a:	e018      	b.n	80028ce <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7ff f8d0 	bl	8001a4c <HAL_GetTick>
 80028ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b0:	f7ff f8cc 	bl	8001a4c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e3d4      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028c2:	4b63      	ldr	r3, [pc, #396]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80c4 	beq.w	8002a64 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_OscConfig+0x3d6>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b80      	cmp	r3, #128	@ 0x80
 80028ea:	d004      	beq.n	80028f6 <HAL_RCC_OscConfig+0x3d6>
 80028ec:	f240 212b 	movw	r1, #555	@ 0x22b
 80028f0:	4858      	ldr	r0, [pc, #352]	@ (8002a54 <HAL_RCC_OscConfig+0x534>)
 80028f2:	f7fe f97f 	bl	8000bf4 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80028fc:	d904      	bls.n	8002908 <HAL_RCC_OscConfig+0x3e8>
 80028fe:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8002902:	4854      	ldr	r0, [pc, #336]	@ (8002a54 <HAL_RCC_OscConfig+0x534>)
 8002904:	f7fe f976 	bl	8000bf4 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002908:	4b51      	ldr	r3, [pc, #324]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002910:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002912:	4b4f      	ldr	r3, [pc, #316]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002916:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b08      	cmp	r3, #8
 800291c:	d007      	beq.n	800292e <HAL_RCC_OscConfig+0x40e>
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b18      	cmp	r3, #24
 8002922:	d13a      	bne.n	800299a <HAL_RCC_OscConfig+0x47a>
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d135      	bne.n	800299a <HAL_RCC_OscConfig+0x47a>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800292e:	4b48      	ldr	r3, [pc, #288]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x426>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	2b80      	cmp	r3, #128	@ 0x80
 8002940:	d001      	beq.n	8002946 <HAL_RCC_OscConfig+0x426>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e392      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002946:	f7ff f88d 	bl	8001a64 <HAL_GetREVID>
 800294a:	4603      	mov	r3, r0
 800294c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002950:	4293      	cmp	r3, r2
 8002952:	d817      	bhi.n	8002984 <HAL_RCC_OscConfig+0x464>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	2b20      	cmp	r3, #32
 800295a:	d108      	bne.n	800296e <HAL_RCC_OscConfig+0x44e>
 800295c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002964:	4a3a      	ldr	r2, [pc, #232]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002966:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800296a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800296c:	e07a      	b.n	8002a64 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800296e:	4b38      	ldr	r3, [pc, #224]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	069b      	lsls	r3, r3, #26
 800297c:	4934      	ldr	r1, [pc, #208]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002982:	e06f      	b.n	8002a64 <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002984:	4b32      	ldr	r3, [pc, #200]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	492f      	ldr	r1, [pc, #188]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002994:	4313      	orrs	r3, r2
 8002996:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002998:	e064      	b.n	8002a64 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d042      	beq.n	8002a28 <HAL_RCC_OscConfig+0x508>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 80029a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7ff f84d 	bl	8001a4c <HAL_GetTick>
 80029b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029b6:	f7ff f849 	bl	8001a4c <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e351      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029c8:	4b21      	ldr	r3, [pc, #132]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029d4:	f7ff f846 	bl	8001a64 <HAL_GetREVID>
 80029d8:	4603      	mov	r3, r0
 80029da:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029de:	4293      	cmp	r3, r2
 80029e0:	d817      	bhi.n	8002a12 <HAL_RCC_OscConfig+0x4f2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d108      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
 80029ea:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029f2:	4a17      	ldr	r2, [pc, #92]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 80029f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029f8:	6053      	str	r3, [r2, #4]
 80029fa:	e033      	b.n	8002a64 <HAL_RCC_OscConfig+0x544>
 80029fc:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	069b      	lsls	r3, r3, #26
 8002a0a:	4911      	ldr	r1, [pc, #68]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
 8002a10:	e028      	b.n	8002a64 <HAL_RCC_OscConfig+0x544>
 8002a12:	4b0f      	ldr	r3, [pc, #60]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	490b      	ldr	r1, [pc, #44]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60cb      	str	r3, [r1, #12]
 8002a26:	e01d      	b.n	8002a64 <HAL_RCC_OscConfig+0x544>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a28:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a08      	ldr	r2, [pc, #32]	@ (8002a50 <HAL_RCC_OscConfig+0x530>)
 8002a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff f80a 	bl	8001a4c <HAL_GetTick>
 8002a38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a3a:	e00d      	b.n	8002a58 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a3c:	f7ff f806 	bl	8001a4c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d906      	bls.n	8002a58 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e30e      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
 8002a4e:	bf00      	nop
 8002a50:	58024400 	.word	0x58024400
 8002a54:	08007e5c 	.word	0x08007e5c
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a58:	4b96      	ldr	r3, [pc, #600]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d043      	beq.n	8002af8 <HAL_RCC_OscConfig+0x5d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_OscConfig+0x56a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d004      	beq.n	8002a8a <HAL_RCC_OscConfig+0x56a>
 8002a80:	f240 216d 	movw	r1, #621	@ 0x26d
 8002a84:	488c      	ldr	r0, [pc, #560]	@ (8002cb8 <HAL_RCC_OscConfig+0x798>)
 8002a86:	f7fe f8b5 	bl	8000bf4 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d019      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x5a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a92:	4b88      	ldr	r3, [pc, #544]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a96:	4a87      	ldr	r2, [pc, #540]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7fe ffd5 	bl	8001a4c <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x598>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa6:	f7fe ffd1 	bl	8001a4c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x598>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e2d9      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ab8:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x586>
 8002ac4:	e018      	b.n	8002af8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac6:	4b7b      	ldr	r3, [pc, #492]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aca:	4a7a      	ldr	r2, [pc, #488]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad2:	f7fe ffbb 	bl	8001a4c <HAL_GetTick>
 8002ad6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ada:	f7fe ffb7 	bl	8001a4c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e2bf      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aec:	4b71      	ldr	r3, [pc, #452]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f0      	bne.n	8002ada <HAL_RCC_OscConfig+0x5ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d043      	beq.n	8002b8c <HAL_RCC_OscConfig+0x66c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_OscConfig+0x5fe>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d004      	beq.n	8002b1e <HAL_RCC_OscConfig+0x5fe>
 8002b14:	f44f 7126 	mov.w	r1, #664	@ 0x298
 8002b18:	4867      	ldr	r0, [pc, #412]	@ (8002cb8 <HAL_RCC_OscConfig+0x798>)
 8002b1a:	f7fe f86b 	bl	8000bf4 <assert_failed>

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d019      	beq.n	8002b5a <HAL_RCC_OscConfig+0x63a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b26:	4b63      	ldr	r3, [pc, #396]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a62      	ldr	r2, [pc, #392]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b32:	f7fe ff8b 	bl	8001a4c <HAL_GetTick>
 8002b36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x62c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b3a:	f7fe ff87 	bl	8001a4c <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e28f      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b4c:	4b59      	ldr	r3, [pc, #356]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x61a>
 8002b58:	e018      	b.n	8002b8c <HAL_RCC_OscConfig+0x66c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b5a:	4b56      	ldr	r3, [pc, #344]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a55      	ldr	r2, [pc, #340]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b66:	f7fe ff71 	bl	8001a4c <HAL_GetTick>
 8002b6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x660>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b6e:	f7fe ff6d 	bl	8001a4c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e275      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b80:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8099 	beq.w	8002ccc <HAL_RCC_OscConfig+0x7ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00c      	beq.n	8002bbc <HAL_RCC_OscConfig+0x69c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d008      	beq.n	8002bbc <HAL_RCC_OscConfig+0x69c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d004      	beq.n	8002bbc <HAL_RCC_OscConfig+0x69c>
 8002bb2:	f240 21c2 	movw	r1, #706	@ 0x2c2
 8002bb6:	4840      	ldr	r0, [pc, #256]	@ (8002cb8 <HAL_RCC_OscConfig+0x798>)
 8002bb8:	f7fe f81c 	bl	8000bf4 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8002cbc <HAL_RCC_OscConfig+0x79c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8002cbc <HAL_RCC_OscConfig+0x79c>)
 8002bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe ff40 	bl	8001a4c <HAL_GetTick>
 8002bcc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x6c2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd0:	f7fe ff3c 	bl	8001a4c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	@ 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x6c2>
      {
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e244      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002be2:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <HAL_RCC_OscConfig+0x79c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x6b0>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCC_OscConfig+0x6e4>
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c02:	e02d      	b.n	8002c60 <HAL_RCC_OscConfig+0x740>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10c      	bne.n	8002c26 <HAL_RCC_OscConfig+0x706>
 8002c0c:	4b29      	ldr	r3, [pc, #164]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c10:	4a28      	ldr	r2, [pc, #160]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c18:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1c:	4a25      	ldr	r2, [pc, #148]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c1e:	f023 0304 	bic.w	r3, r3, #4
 8002c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c24:	e01c      	b.n	8002c60 <HAL_RCC_OscConfig+0x740>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x728>
 8002c2e:	4b21      	ldr	r3, [pc, #132]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c32:	4a20      	ldr	r2, [pc, #128]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c34:	f043 0304 	orr.w	r3, r3, #4
 8002c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0x740>
 8002c48:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	4a19      	ldr	r2, [pc, #100]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c54:	4b17      	ldr	r3, [pc, #92]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c58:	4a16      	ldr	r2, [pc, #88]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c5a:	f023 0304 	bic.w	r3, r3, #4
 8002c5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d015      	beq.n	8002c94 <HAL_RCC_OscConfig+0x774>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe fef0 	bl	8001a4c <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_OscConfig+0x766>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c70:	f7fe feec 	bl	8001a4c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x766>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1f2      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c86:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_RCC_OscConfig+0x794>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0ee      	beq.n	8002c70 <HAL_RCC_OscConfig+0x750>
 8002c92:	e01b      	b.n	8002ccc <HAL_RCC_OscConfig+0x7ac>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe feda 	bl	8001a4c <HAL_GetTick>
 8002c98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c9a:	e011      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f7fe fed6 	bl	8001a4c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d908      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x7a0>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e1dc      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
 8002cb2:	bf00      	nop
 8002cb4:	58024400 	.word	0x58024400
 8002cb8:	08007e5c 	.word	0x08007e5c
 8002cbc:	58024800 	.word	0x58024800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cc0:	4b97      	ldr	r3, [pc, #604]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e7      	bne.n	8002c9c <HAL_RCC_OscConfig+0x77c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00c      	beq.n	8002cee <HAL_RCC_OscConfig+0x7ce>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d008      	beq.n	8002cee <HAL_RCC_OscConfig+0x7ce>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d004      	beq.n	8002cee <HAL_RCC_OscConfig+0x7ce>
 8002ce4:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8002ce8:	488e      	ldr	r0, [pc, #568]	@ (8002f24 <HAL_RCC_OscConfig+0xa04>)
 8002cea:	f7fd ff83 	bl	8000bf4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 81b9 	beq.w	800306a <HAL_RCC_OscConfig+0xb4a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cf8:	4b89      	ldr	r3, [pc, #548]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d00:	2b18      	cmp	r3, #24
 8002d02:	f000 813f 	beq.w	8002f84 <HAL_RCC_OscConfig+0xa64>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	f040 8120 	bne.w	8002f50 <HAL_RCC_OscConfig+0xa30>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d010      	beq.n	8002d3a <HAL_RCC_OscConfig+0x81a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00c      	beq.n	8002d3a <HAL_RCC_OscConfig+0x81a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_OscConfig+0x81a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d004      	beq.n	8002d3a <HAL_RCC_OscConfig+0x81a>
 8002d30:	f240 21fd 	movw	r1, #765	@ 0x2fd
 8002d34:	487b      	ldr	r0, [pc, #492]	@ (8002f24 <HAL_RCC_OscConfig+0xa04>)
 8002d36:	f7fd ff5d 	bl	8000bf4 <assert_failed>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d010      	beq.n	8002d64 <HAL_RCC_OscConfig+0x844>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d00c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x844>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d008      	beq.n	8002d64 <HAL_RCC_OscConfig+0x844>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d004      	beq.n	8002d64 <HAL_RCC_OscConfig+0x844>
 8002d5a:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8002d5e:	4871      	ldr	r0, [pc, #452]	@ (8002f24 <HAL_RCC_OscConfig+0xa04>)
 8002d60:	f7fd ff48 	bl	8000bf4 <assert_failed>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCC_OscConfig+0x85e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d004      	beq.n	8002d7e <HAL_RCC_OscConfig+0x85e>
 8002d74:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8002d78:	486a      	ldr	r0, [pc, #424]	@ (8002f24 <HAL_RCC_OscConfig+0xa04>)
 8002d7a:	f7fd ff3b 	bl	8000bf4 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_RCC_OscConfig+0x86e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d8c:	d904      	bls.n	8002d98 <HAL_RCC_OscConfig+0x878>
 8002d8e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002d92:	4864      	ldr	r0, [pc, #400]	@ (8002f24 <HAL_RCC_OscConfig+0xa04>)
 8002d94:	f7fd ff2e 	bl	8000bf4 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d904      	bls.n	8002daa <HAL_RCC_OscConfig+0x88a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da8:	d904      	bls.n	8002db4 <HAL_RCC_OscConfig+0x894>
 8002daa:	f240 3101 	movw	r1, #769	@ 0x301
 8002dae:	485d      	ldr	r0, [pc, #372]	@ (8002f24 <HAL_RCC_OscConfig+0xa04>)
 8002db0:	f7fd ff20 	bl	8000bf4 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x8a4>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc0:	2b80      	cmp	r3, #128	@ 0x80
 8002dc2:	d904      	bls.n	8002dce <HAL_RCC_OscConfig+0x8ae>
 8002dc4:	f240 3102 	movw	r1, #770	@ 0x302
 8002dc8:	4856      	ldr	r0, [pc, #344]	@ (8002f24 <HAL_RCC_OscConfig+0xa04>)
 8002dca:	f7fd ff13 	bl	8000bf4 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_OscConfig+0x8be>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dda:	2b80      	cmp	r3, #128	@ 0x80
 8002ddc:	d904      	bls.n	8002de8 <HAL_RCC_OscConfig+0x8c8>
 8002dde:	f240 3103 	movw	r1, #771	@ 0x303
 8002de2:	4850      	ldr	r0, [pc, #320]	@ (8002f24 <HAL_RCC_OscConfig+0xa04>)
 8002de4:	f7fd ff06 	bl	8000bf4 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_RCC_OscConfig+0x8d8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df4:	2b80      	cmp	r3, #128	@ 0x80
 8002df6:	d904      	bls.n	8002e02 <HAL_RCC_OscConfig+0x8e2>
 8002df8:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8002dfc:	4849      	ldr	r0, [pc, #292]	@ (8002f24 <HAL_RCC_OscConfig+0xa04>)
 8002dfe:	f7fd fef9 	bl	8000bf4 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e0a:	d304      	bcc.n	8002e16 <HAL_RCC_OscConfig+0x8f6>
 8002e0c:	f240 3105 	movw	r1, #773	@ 0x305
 8002e10:	4844      	ldr	r0, [pc, #272]	@ (8002f24 <HAL_RCC_OscConfig+0xa04>)
 8002e12:	f7fd feef 	bl	8000bf4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	4b42      	ldr	r3, [pc, #264]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a41      	ldr	r2, [pc, #260]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002e1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe fe13 	bl	8001a4c <HAL_GetTick>
 8002e26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x91c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe fe0f 	bl	8001a4c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x91c>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e117      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3c:	4b38      	ldr	r3, [pc, #224]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0x90a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e48:	4b35      	ldr	r3, [pc, #212]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002e4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e4c:	4b36      	ldr	r3, [pc, #216]	@ (8002f28 <HAL_RCC_OscConfig+0xa08>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	4930      	ldr	r1, [pc, #192]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e70:	3b01      	subs	r3, #1
 8002e72:	025b      	lsls	r3, r3, #9
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002e92:	4923      	ldr	r1, [pc, #140]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002e98:	4b21      	ldr	r3, [pc, #132]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	4a20      	ldr	r2, [pc, #128]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002ea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ea8:	4b20      	ldr	r3, [pc, #128]	@ (8002f2c <HAL_RCC_OscConfig+0xa0c>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eb0:	00d2      	lsls	r2, r2, #3
 8002eb2:	491b      	ldr	r1, [pc, #108]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	f023 020c 	bic.w	r2, r3, #12
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	4916      	ldr	r1, [pc, #88]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	f023 0202 	bic.w	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	4912      	ldr	r1, [pc, #72]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002edc:	4b10      	ldr	r3, [pc, #64]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	4a0c      	ldr	r2, [pc, #48]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	4a09      	ldr	r2, [pc, #36]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002efa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f00:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	4a06      	ldr	r2, [pc, #24]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a03      	ldr	r2, [pc, #12]	@ (8002f20 <HAL_RCC_OscConfig+0xa00>)
 8002f12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fd98 	bl	8001a4c <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f1e:	e010      	b.n	8002f42 <HAL_RCC_OscConfig+0xa22>
 8002f20:	58024400 	.word	0x58024400
 8002f24:	08007e5c 	.word	0x08007e5c
 8002f28:	fffffc0c 	.word	0xfffffc0c
 8002f2c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe fd8c 	bl	8001a4c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xa22>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e094      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f42:	4b4c      	ldr	r3, [pc, #304]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0xa10>
 8002f4e:	e08c      	b.n	800306a <HAL_RCC_OscConfig+0xb4a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b48      	ldr	r3, [pc, #288]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a47      	ldr	r2, [pc, #284]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 8002f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fd76 	bl	8001a4c <HAL_GetTick>
 8002f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xa56>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fe fd72 	bl	8001a4c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xa56>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e07a      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f76:	4b3f      	ldr	r3, [pc, #252]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0xa44>
 8002f82:	e072      	b.n	800306a <HAL_RCC_OscConfig+0xb4a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f84:	4b3b      	ldr	r3, [pc, #236]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 8002f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d031      	beq.n	8002ffc <HAL_RCC_OscConfig+0xadc>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f003 0203 	and.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d12a      	bne.n	8002ffc <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d122      	bne.n	8002ffc <HAL_RCC_OscConfig+0xadc>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d11a      	bne.n	8002ffc <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	0a5b      	lsrs	r3, r3, #9
 8002fca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d111      	bne.n	8002ffc <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	0c1b      	lsrs	r3, r3, #16
 8002fdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d108      	bne.n	8002ffc <HAL_RCC_OscConfig+0xadc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	0e1b      	lsrs	r3, r3, #24
 8002fee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_OscConfig+0xae0>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e035      	b.n	800306c <HAL_RCC_OscConfig+0xb4c>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003000:	4b1c      	ldr	r3, [pc, #112]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 8003002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003004:	08db      	lsrs	r3, r3, #3
 8003006:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800300a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	429a      	cmp	r2, r3
 8003014:	d029      	beq.n	800306a <HAL_RCC_OscConfig+0xb4a>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800301a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800301e:	d304      	bcc.n	800302a <HAL_RCC_OscConfig+0xb0a>
 8003020:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8003024:	4814      	ldr	r0, [pc, #80]	@ (8003078 <HAL_RCC_OscConfig+0xb58>)
 8003026:	f7fd fde5 	bl	8000bf4 <assert_failed>
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800302a:	4b12      	ldr	r3, [pc, #72]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 800302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302e:	4a11      	ldr	r2, [pc, #68]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003036:	f7fe fd09 	bl	8001a4c <HAL_GetTick>
 800303a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800303c:	bf00      	nop
 800303e:	f7fe fd05 	bl	8001a4c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	4293      	cmp	r3, r2
 8003048:	d0f9      	beq.n	800303e <HAL_RCC_OscConfig+0xb1e>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800304a:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 800304c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800304e:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <HAL_RCC_OscConfig+0xb5c>)
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003056:	00d2      	lsls	r2, r2, #3
 8003058:	4906      	ldr	r1, [pc, #24]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 800305a:	4313      	orrs	r3, r2
 800305c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800305e:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 8003060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003062:	4a04      	ldr	r2, [pc, #16]	@ (8003074 <HAL_RCC_OscConfig+0xb54>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3730      	adds	r7, #48	@ 0x30
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	58024400 	.word	0x58024400
 8003078:	08007e5c 	.word	0x08007e5c
 800307c:	ffff0007 	.word	0xffff0007

08003080 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e354      	b.n	800373e <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x24>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80030a2:	d904      	bls.n	80030ae <HAL_RCC_ClockConfig+0x2e>
 80030a4:	f240 31a7 	movw	r1, #935	@ 0x3a7
 80030a8:	4827      	ldr	r0, [pc, #156]	@ (8003148 <HAL_RCC_ClockConfig+0xc8>)
 80030aa:	f7fd fda3 	bl	8000bf4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d031      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d02e      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d02b      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d028      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d025      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b05      	cmp	r3, #5
 80030d0:	d022      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b06      	cmp	r3, #6
 80030d6:	d01f      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b07      	cmp	r3, #7
 80030dc:	d01c      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d019      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b09      	cmp	r3, #9
 80030e8:	d016      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b0a      	cmp	r3, #10
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b0b      	cmp	r3, #11
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b0c      	cmp	r3, #12
 80030fa:	d00d      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b0d      	cmp	r3, #13
 8003100:	d00a      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b0e      	cmp	r3, #14
 8003106:	d007      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b0f      	cmp	r3, #15
 800310c:	d004      	beq.n	8003118 <HAL_RCC_ClockConfig+0x98>
 800310e:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
 8003112:	480d      	ldr	r0, [pc, #52]	@ (8003148 <HAL_RCC_ClockConfig+0xc8>)
 8003114:	f7fd fd6e 	bl	8000bf4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <HAL_RCC_ClockConfig+0xcc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d914      	bls.n	8003150 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <HAL_RCC_ClockConfig+0xcc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	4907      	ldr	r1, [pc, #28]	@ (800314c <HAL_RCC_ClockConfig+0xcc>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b05      	ldr	r3, [pc, #20]	@ (800314c <HAL_RCC_ClockConfig+0xcc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e2fa      	b.n	800373e <HAL_RCC_ClockConfig+0x6be>
 8003148:	08007e5c 	.word	0x08007e5c
 800314c:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d029      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	4b7e      	ldr	r3, [pc, #504]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003168:	429a      	cmp	r2, r3
 800316a:	d921      	bls.n	80031b0 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d014      	beq.n	800319e <HAL_RCC_ClockConfig+0x11e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b40      	cmp	r3, #64	@ 0x40
 800317a:	d010      	beq.n	800319e <HAL_RCC_ClockConfig+0x11e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b50      	cmp	r3, #80	@ 0x50
 8003182:	d00c      	beq.n	800319e <HAL_RCC_ClockConfig+0x11e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	2b60      	cmp	r3, #96	@ 0x60
 800318a:	d008      	beq.n	800319e <HAL_RCC_ClockConfig+0x11e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b70      	cmp	r3, #112	@ 0x70
 8003192:	d004      	beq.n	800319e <HAL_RCC_ClockConfig+0x11e>
 8003194:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
 8003198:	4871      	ldr	r0, [pc, #452]	@ (8003360 <HAL_RCC_ClockConfig+0x2e0>)
 800319a:	f7fd fd2b 	bl	8000bf4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800319e:	4b6f      	ldr	r3, [pc, #444]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	496c      	ldr	r1, [pc, #432]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d029      	beq.n	8003210 <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	4b66      	ldr	r3, [pc, #408]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d921      	bls.n	8003210 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d014      	beq.n	80031fe <HAL_RCC_ClockConfig+0x17e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	2b40      	cmp	r3, #64	@ 0x40
 80031da:	d010      	beq.n	80031fe <HAL_RCC_ClockConfig+0x17e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	2b50      	cmp	r3, #80	@ 0x50
 80031e2:	d00c      	beq.n	80031fe <HAL_RCC_ClockConfig+0x17e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	2b60      	cmp	r3, #96	@ 0x60
 80031ea:	d008      	beq.n	80031fe <HAL_RCC_ClockConfig+0x17e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	2b70      	cmp	r3, #112	@ 0x70
 80031f2:	d004      	beq.n	80031fe <HAL_RCC_ClockConfig+0x17e>
 80031f4:	f240 31d6 	movw	r1, #982	@ 0x3d6
 80031f8:	4859      	ldr	r0, [pc, #356]	@ (8003360 <HAL_RCC_ClockConfig+0x2e0>)
 80031fa:	f7fd fcfb 	bl	8000bf4 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031fe:	4b57      	ldr	r3, [pc, #348]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	4954      	ldr	r1, [pc, #336]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 800320c:	4313      	orrs	r3, r2
 800320e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	d02d      	beq.n	8003278 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	4b4e      	ldr	r3, [pc, #312]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003228:	429a      	cmp	r2, r3
 800322a:	d925      	bls.n	8003278 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d018      	beq.n	8003266 <HAL_RCC_ClockConfig+0x1e6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323c:	d013      	beq.n	8003266 <HAL_RCC_ClockConfig+0x1e6>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003246:	d00e      	beq.n	8003266 <HAL_RCC_ClockConfig+0x1e6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003250:	d009      	beq.n	8003266 <HAL_RCC_ClockConfig+0x1e6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800325a:	d004      	beq.n	8003266 <HAL_RCC_ClockConfig+0x1e6>
 800325c:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8003260:	483f      	ldr	r0, [pc, #252]	@ (8003360 <HAL_RCC_ClockConfig+0x2e0>)
 8003262:	f7fd fcc7 	bl	8000bf4 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003266:	4b3d      	ldr	r3, [pc, #244]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	493a      	ldr	r1, [pc, #232]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d029      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	4b34      	ldr	r3, [pc, #208]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003290:	429a      	cmp	r2, r3
 8003292:	d921      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d014      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x246>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b40      	cmp	r3, #64	@ 0x40
 80032a2:	d010      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x246>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b50      	cmp	r3, #80	@ 0x50
 80032aa:	d00c      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x246>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	2b60      	cmp	r3, #96	@ 0x60
 80032b2:	d008      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x246>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2b70      	cmp	r3, #112	@ 0x70
 80032ba:	d004      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x246>
 80032bc:	f240 31f9 	movw	r1, #1017	@ 0x3f9
 80032c0:	4827      	ldr	r0, [pc, #156]	@ (8003360 <HAL_RCC_ClockConfig+0x2e0>)
 80032c2:	f7fd fc97 	bl	8000bf4 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032c6:	4b25      	ldr	r3, [pc, #148]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4922      	ldr	r1, [pc, #136]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d03f      	beq.n	8003364 <HAL_RCC_ClockConfig+0x2e4>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4b1c      	ldr	r3, [pc, #112]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d937      	bls.n	8003364 <HAL_RCC_ClockConfig+0x2e4>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d024      	beq.n	8003346 <HAL_RCC_ClockConfig+0x2c6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d020      	beq.n	8003346 <HAL_RCC_ClockConfig+0x2c6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b09      	cmp	r3, #9
 800330a:	d01c      	beq.n	8003346 <HAL_RCC_ClockConfig+0x2c6>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b0a      	cmp	r3, #10
 8003312:	d018      	beq.n	8003346 <HAL_RCC_ClockConfig+0x2c6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b0b      	cmp	r3, #11
 800331a:	d014      	beq.n	8003346 <HAL_RCC_ClockConfig+0x2c6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d010      	beq.n	8003346 <HAL_RCC_ClockConfig+0x2c6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b0d      	cmp	r3, #13
 800332a:	d00c      	beq.n	8003346 <HAL_RCC_ClockConfig+0x2c6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b0e      	cmp	r3, #14
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x2c6>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b0f      	cmp	r3, #15
 800333a:	d004      	beq.n	8003346 <HAL_RCC_ClockConfig+0x2c6>
 800333c:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003340:	4807      	ldr	r0, [pc, #28]	@ (8003360 <HAL_RCC_ClockConfig+0x2e0>)
 8003342:	f7fd fc57 	bl	8000bf4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003346:	4b05      	ldr	r3, [pc, #20]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f023 020f 	bic.w	r2, r3, #15
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	4902      	ldr	r1, [pc, #8]	@ (800335c <HAL_RCC_ClockConfig+0x2dc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	618b      	str	r3, [r1, #24]
 8003358:	e004      	b.n	8003364 <HAL_RCC_ClockConfig+0x2e4>
 800335a:	bf00      	nop
 800335c:	58024400 	.word	0x58024400
 8003360:	08007e5c 	.word	0x08007e5c
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 809c 	beq.w	80034aa <HAL_RCC_ClockConfig+0x42a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d02c      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x354>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003382:	d027      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x354>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 800338c:	d022      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x354>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003396:	d01d      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x354>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80033a0:	d018      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x354>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x354>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 80033b4:	d00e      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x354>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80033be:	d009      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x354>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80033c8:	d004      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x354>
 80033ca:	f240 411c 	movw	r1, #1052	@ 0x41c
 80033ce:	4863      	ldr	r0, [pc, #396]	@ (800355c <HAL_RCC_ClockConfig+0x4dc>)
 80033d0:	f7fd fc10 	bl	8000bf4 <assert_failed>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d010      	beq.n	80033fe <HAL_RCC_ClockConfig+0x37e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00c      	beq.n	80033fe <HAL_RCC_ClockConfig+0x37e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_ClockConfig+0x37e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d004      	beq.n	80033fe <HAL_RCC_ClockConfig+0x37e>
 80033f4:	f240 411d 	movw	r1, #1053	@ 0x41d
 80033f8:	4858      	ldr	r0, [pc, #352]	@ (800355c <HAL_RCC_ClockConfig+0x4dc>)
 80033fa:	f7fd fbfb 	bl	8000bf4 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033fe:	4b58      	ldr	r3, [pc, #352]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	4955      	ldr	r1, [pc, #340]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 800340c:	4313      	orrs	r3, r2
 800340e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d107      	bne.n	8003428 <HAL_RCC_ClockConfig+0x3a8>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003418:	4b51      	ldr	r3, [pc, #324]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d121      	bne.n	8003468 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e18a      	b.n	800373e <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d107      	bne.n	8003440 <HAL_RCC_ClockConfig+0x3c0>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003430:	4b4b      	ldr	r3, [pc, #300]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d115      	bne.n	8003468 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e17e      	b.n	800373e <HAL_RCC_ClockConfig+0x6be>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d107      	bne.n	8003458 <HAL_RCC_ClockConfig+0x3d8>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003448:	4b45      	ldr	r3, [pc, #276]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e172      	b.n	800373e <HAL_RCC_ClockConfig+0x6be>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003458:	4b41      	ldr	r3, [pc, #260]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x3e8>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e16a      	b.n	800373e <HAL_RCC_ClockConfig+0x6be>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003468:	4b3d      	ldr	r3, [pc, #244]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f023 0207 	bic.w	r2, r3, #7
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	493a      	ldr	r1, [pc, #232]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 8003476:	4313      	orrs	r3, r2
 8003478:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347a:	f7fe fae7 	bl	8001a4c <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003480:	e00a      	b.n	8003498 <HAL_RCC_ClockConfig+0x418>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003482:	f7fe fae3 	bl	8001a4c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_ClockConfig+0x418>
      {
        return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e152      	b.n	800373e <HAL_RCC_ClockConfig+0x6be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003498:	4b31      	ldr	r3, [pc, #196]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d1eb      	bne.n	8003482 <HAL_RCC_ClockConfig+0x402>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d039      	beq.n	800352a <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	4b29      	ldr	r3, [pc, #164]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d231      	bcs.n	800352a <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d024      	beq.n	8003518 <HAL_RCC_ClockConfig+0x498>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d020      	beq.n	8003518 <HAL_RCC_ClockConfig+0x498>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b09      	cmp	r3, #9
 80034dc:	d01c      	beq.n	8003518 <HAL_RCC_ClockConfig+0x498>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b0a      	cmp	r3, #10
 80034e4:	d018      	beq.n	8003518 <HAL_RCC_ClockConfig+0x498>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b0b      	cmp	r3, #11
 80034ec:	d014      	beq.n	8003518 <HAL_RCC_ClockConfig+0x498>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d010      	beq.n	8003518 <HAL_RCC_ClockConfig+0x498>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b0d      	cmp	r3, #13
 80034fc:	d00c      	beq.n	8003518 <HAL_RCC_ClockConfig+0x498>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b0e      	cmp	r3, #14
 8003504:	d008      	beq.n	8003518 <HAL_RCC_ClockConfig+0x498>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	d004      	beq.n	8003518 <HAL_RCC_ClockConfig+0x498>
 800350e:	f240 415e 	movw	r1, #1118	@ 0x45e
 8003512:	4812      	ldr	r0, [pc, #72]	@ (800355c <HAL_RCC_ClockConfig+0x4dc>)
 8003514:	f7fd fb6e 	bl	8000bf4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003518:	4b11      	ldr	r3, [pc, #68]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f023 020f 	bic.w	r2, r3, #15
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	490e      	ldr	r1, [pc, #56]	@ (8003560 <HAL_RCC_ClockConfig+0x4e0>)
 8003526:	4313      	orrs	r3, r2
 8003528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800352a:	4b0e      	ldr	r3, [pc, #56]	@ (8003564 <HAL_RCC_ClockConfig+0x4e4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d217      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003538:	4b0a      	ldr	r3, [pc, #40]	@ (8003564 <HAL_RCC_ClockConfig+0x4e4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f023 020f 	bic.w	r2, r3, #15
 8003540:	4908      	ldr	r1, [pc, #32]	@ (8003564 <HAL_RCC_ClockConfig+0x4e4>)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	4313      	orrs	r3, r2
 8003546:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_RCC_ClockConfig+0x4e4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d008      	beq.n	8003568 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0f1      	b.n	800373e <HAL_RCC_ClockConfig+0x6be>
 800355a:	bf00      	nop
 800355c:	08007e5c 	.word	0x08007e5c
 8003560:	58024400 	.word	0x58024400
 8003564:	52002000 	.word	0x52002000
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d029      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x548>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	4b73      	ldr	r3, [pc, #460]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003580:	429a      	cmp	r2, r3
 8003582:	d221      	bcs.n	80035c8 <HAL_RCC_ClockConfig+0x548>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d014      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x536>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b40      	cmp	r3, #64	@ 0x40
 8003592:	d010      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x536>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b50      	cmp	r3, #80	@ 0x50
 800359a:	d00c      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x536>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b60      	cmp	r3, #96	@ 0x60
 80035a2:	d008      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x536>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b70      	cmp	r3, #112	@ 0x70
 80035aa:	d004      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x536>
 80035ac:	f240 417f 	movw	r1, #1151	@ 0x47f
 80035b0:	4866      	ldr	r0, [pc, #408]	@ (800374c <HAL_RCC_ClockConfig+0x6cc>)
 80035b2:	f7fd fb1f 	bl	8000bf4 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035b6:	4b64      	ldr	r3, [pc, #400]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	4961      	ldr	r1, [pc, #388]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d029      	beq.n	8003628 <HAL_RCC_ClockConfig+0x5a8>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d221      	bcs.n	8003628 <HAL_RCC_ClockConfig+0x5a8>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d014      	beq.n	8003616 <HAL_RCC_ClockConfig+0x596>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	2b40      	cmp	r3, #64	@ 0x40
 80035f2:	d010      	beq.n	8003616 <HAL_RCC_ClockConfig+0x596>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	2b50      	cmp	r3, #80	@ 0x50
 80035fa:	d00c      	beq.n	8003616 <HAL_RCC_ClockConfig+0x596>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	2b60      	cmp	r3, #96	@ 0x60
 8003602:	d008      	beq.n	8003616 <HAL_RCC_ClockConfig+0x596>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	2b70      	cmp	r3, #112	@ 0x70
 800360a:	d004      	beq.n	8003616 <HAL_RCC_ClockConfig+0x596>
 800360c:	f240 4191 	movw	r1, #1169	@ 0x491
 8003610:	484e      	ldr	r0, [pc, #312]	@ (800374c <HAL_RCC_ClockConfig+0x6cc>)
 8003612:	f7fd faef 	bl	8000bf4 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003616:	4b4c      	ldr	r3, [pc, #304]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	4949      	ldr	r1, [pc, #292]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 8003624:	4313      	orrs	r3, r2
 8003626:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	d02d      	beq.n	8003690 <HAL_RCC_ClockConfig+0x610>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	4b43      	ldr	r3, [pc, #268]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003640:	429a      	cmp	r2, r3
 8003642:	d225      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x610>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d018      	beq.n	800367e <HAL_RCC_ClockConfig+0x5fe>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003654:	d013      	beq.n	800367e <HAL_RCC_ClockConfig+0x5fe>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800365e:	d00e      	beq.n	800367e <HAL_RCC_ClockConfig+0x5fe>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003668:	d009      	beq.n	800367e <HAL_RCC_ClockConfig+0x5fe>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003672:	d004      	beq.n	800367e <HAL_RCC_ClockConfig+0x5fe>
 8003674:	f240 41a3 	movw	r1, #1187	@ 0x4a3
 8003678:	4834      	ldr	r0, [pc, #208]	@ (800374c <HAL_RCC_ClockConfig+0x6cc>)
 800367a:	f7fd fabb 	bl	8000bf4 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800367e:	4b32      	ldr	r3, [pc, #200]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	492f      	ldr	r1, [pc, #188]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 800368c:	4313      	orrs	r3, r2
 800368e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d029      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x670>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	4b29      	ldr	r3, [pc, #164]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d221      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x670>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d014      	beq.n	80036de <HAL_RCC_ClockConfig+0x65e>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	2b40      	cmp	r3, #64	@ 0x40
 80036ba:	d010      	beq.n	80036de <HAL_RCC_ClockConfig+0x65e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b50      	cmp	r3, #80	@ 0x50
 80036c2:	d00c      	beq.n	80036de <HAL_RCC_ClockConfig+0x65e>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b60      	cmp	r3, #96	@ 0x60
 80036ca:	d008      	beq.n	80036de <HAL_RCC_ClockConfig+0x65e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2b70      	cmp	r3, #112	@ 0x70
 80036d2:	d004      	beq.n	80036de <HAL_RCC_ClockConfig+0x65e>
 80036d4:	f240 41b5 	movw	r1, #1205	@ 0x4b5
 80036d8:	481c      	ldr	r0, [pc, #112]	@ (800374c <HAL_RCC_ClockConfig+0x6cc>)
 80036da:	f7fd fa8b 	bl	8000bf4 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036de:	4b1a      	ldr	r3, [pc, #104]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4917      	ldr	r1, [pc, #92]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036f0:	f000 f836 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b14      	ldr	r3, [pc, #80]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	4913      	ldr	r1, [pc, #76]	@ (8003750 <HAL_RCC_ClockConfig+0x6d0>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
 800370c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800370e:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <HAL_RCC_ClockConfig+0x6c8>)
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	4a0e      	ldr	r2, [pc, #56]	@ (8003750 <HAL_RCC_ClockConfig+0x6d0>)
 8003718:	5cd3      	ldrb	r3, [r2, r3]
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	4a0b      	ldr	r2, [pc, #44]	@ (8003754 <HAL_RCC_ClockConfig+0x6d4>)
 8003726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003728:	4a0b      	ldr	r2, [pc, #44]	@ (8003758 <HAL_RCC_ClockConfig+0x6d8>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800372e:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <HAL_RCC_ClockConfig+0x6dc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe f940 	bl	80019b8 <HAL_InitTick>
 8003738:	4603      	mov	r3, r0
 800373a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	58024400 	.word	0x58024400
 800374c:	08007e5c 	.word	0x08007e5c
 8003750:	08008010 	.word	0x08008010
 8003754:	24000004 	.word	0x24000004
 8003758:	24000000 	.word	0x24000000
 800375c:	24000024 	.word	0x24000024

08003760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	@ 0x24
 8003764:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003766:	4bb3      	ldr	r3, [pc, #716]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800376e:	2b18      	cmp	r3, #24
 8003770:	f200 8155 	bhi.w	8003a1e <HAL_RCC_GetSysClockFreq+0x2be>
 8003774:	a201      	add	r2, pc, #4	@ (adr r2, 800377c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	080037e1 	.word	0x080037e1
 8003780:	08003a1f 	.word	0x08003a1f
 8003784:	08003a1f 	.word	0x08003a1f
 8003788:	08003a1f 	.word	0x08003a1f
 800378c:	08003a1f 	.word	0x08003a1f
 8003790:	08003a1f 	.word	0x08003a1f
 8003794:	08003a1f 	.word	0x08003a1f
 8003798:	08003a1f 	.word	0x08003a1f
 800379c:	08003807 	.word	0x08003807
 80037a0:	08003a1f 	.word	0x08003a1f
 80037a4:	08003a1f 	.word	0x08003a1f
 80037a8:	08003a1f 	.word	0x08003a1f
 80037ac:	08003a1f 	.word	0x08003a1f
 80037b0:	08003a1f 	.word	0x08003a1f
 80037b4:	08003a1f 	.word	0x08003a1f
 80037b8:	08003a1f 	.word	0x08003a1f
 80037bc:	0800380d 	.word	0x0800380d
 80037c0:	08003a1f 	.word	0x08003a1f
 80037c4:	08003a1f 	.word	0x08003a1f
 80037c8:	08003a1f 	.word	0x08003a1f
 80037cc:	08003a1f 	.word	0x08003a1f
 80037d0:	08003a1f 	.word	0x08003a1f
 80037d4:	08003a1f 	.word	0x08003a1f
 80037d8:	08003a1f 	.word	0x08003a1f
 80037dc:	08003813 	.word	0x08003813
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037e0:	4b94      	ldr	r3, [pc, #592]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037ec:	4b91      	ldr	r3, [pc, #580]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	4a90      	ldr	r2, [pc, #576]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80037fe:	e111      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003800:	4b8d      	ldr	r3, [pc, #564]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003802:	61bb      	str	r3, [r7, #24]
      break;
 8003804:	e10e      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003806:	4b8d      	ldr	r3, [pc, #564]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003808:	61bb      	str	r3, [r7, #24]
      break;
 800380a:	e10b      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800380c:	4b8c      	ldr	r3, [pc, #560]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800380e:	61bb      	str	r3, [r7, #24]
      break;
 8003810:	e108      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003812:	4b88      	ldr	r3, [pc, #544]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800381c:	4b85      	ldr	r3, [pc, #532]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003826:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003828:	4b82      	ldr	r3, [pc, #520]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003832:	4b80      	ldr	r3, [pc, #512]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003836:	08db      	lsrs	r3, r3, #3
 8003838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80e1 	beq.w	8003a18 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b02      	cmp	r3, #2
 800385a:	f000 8083 	beq.w	8003964 <HAL_RCC_GetSysClockFreq+0x204>
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b02      	cmp	r3, #2
 8003862:	f200 80a1 	bhi.w	80039a8 <HAL_RCC_GetSysClockFreq+0x248>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x114>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d056      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003872:	e099      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003874:	4b6f      	ldr	r3, [pc, #444]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d02d      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003880:	4b6c      	ldr	r3, [pc, #432]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	08db      	lsrs	r3, r3, #3
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	4a6b      	ldr	r2, [pc, #428]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
 8003890:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038aa:	4b62      	ldr	r3, [pc, #392]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80038be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003a44 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80038da:	e087      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003a48 <HAL_RCC_GetSysClockFreq+0x2e8>
 80038ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ee:	4b51      	ldr	r3, [pc, #324]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003902:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003a44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800391e:	e065      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003a4c <HAL_RCC_GetSysClockFreq+0x2ec>
 800392e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003932:	4b40      	ldr	r3, [pc, #256]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003942:	ed97 6a02 	vldr	s12, [r7, #8]
 8003946:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003a44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800394a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003962:	e043      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003a50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003976:	4b2f      	ldr	r3, [pc, #188]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a02 	vldr	s12, [r7, #8]
 800398a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003a44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039a6:	e021      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003a4c <HAL_RCC_GetSysClockFreq+0x2ec>
 80039b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003a44 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80039ec:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	0a5b      	lsrs	r3, r3, #9
 80039f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039f6:	3301      	adds	r3, #1
 80039f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a04:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a10:	ee17 3a90 	vmov	r3, s15
 8003a14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a16:	e005      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61bb      	str	r3, [r7, #24]
      break;
 8003a1c:	e002      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a1e:	4b07      	ldr	r3, [pc, #28]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a20:	61bb      	str	r3, [r7, #24]
      break;
 8003a22:	bf00      	nop
  }

  return sysclockfreq;
 8003a24:	69bb      	ldr	r3, [r7, #24]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3724      	adds	r7, #36	@ 0x24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	58024400 	.word	0x58024400
 8003a38:	03d09000 	.word	0x03d09000
 8003a3c:	003d0900 	.word	0x003d0900
 8003a40:	017d7840 	.word	0x017d7840
 8003a44:	46000000 	.word	0x46000000
 8003a48:	4c742400 	.word	0x4c742400
 8003a4c:	4a742400 	.word	0x4a742400
 8003a50:	4bbebc20 	.word	0x4bbebc20

08003a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a5a:	f7ff fe81 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	490f      	ldr	r1, [pc, #60]	@ (8003aa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a6c:	5ccb      	ldrb	r3, [r1, r3]
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a78:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	4a09      	ldr	r2, [pc, #36]	@ (8003aa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8e:	4a07      	ldr	r2, [pc, #28]	@ (8003aac <HAL_RCC_GetHCLKFreq+0x58>)
 8003a90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a92:	4a07      	ldr	r2, [pc, #28]	@ (8003ab0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a98:	4b04      	ldr	r3, [pc, #16]	@ (8003aac <HAL_RCC_GetHCLKFreq+0x58>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	08008010 	.word	0x08008010
 8003aac:	24000004 	.word	0x24000004
 8003ab0:	24000000 	.word	0x24000000

08003ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ab8:	f7ff ffcc 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4904      	ldr	r1, [pc, #16]	@ (8003adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	58024400 	.word	0x58024400
 8003adc:	08008010 	.word	0x08008010

08003ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ae4:	f7ff ffb6 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4904      	ldr	r1, [pc, #16]	@ (8003b08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	58024400 	.word	0x58024400
 8003b08:	08008010 	.word	0x08008010

08003b0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b10:	f7ff ffa0 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4904      	ldr	r1, [pc, #16]	@ (8003b34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	58024400 	.word	0x58024400
 8003b34:	08008010 	.word	0x08008010

08003b38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	@ 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b40:	4ba1      	ldr	r3, [pc, #644]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003b4a:	4b9f      	ldr	r3, [pc, #636]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4e:	0b1b      	lsrs	r3, r3, #12
 8003b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b56:	4b9c      	ldr	r3, [pc, #624]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b62:	4b99      	ldr	r3, [pc, #612]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b66:	08db      	lsrs	r3, r3, #3
 8003b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8111 	beq.w	8003da8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	f000 8083 	beq.w	8003c94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	f200 80a1 	bhi.w	8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d056      	beq.n	8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003ba2:	e099      	b.n	8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ba4:	4b88      	ldr	r3, [pc, #544]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d02d      	beq.n	8003c0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bb0:	4b85      	ldr	r3, [pc, #532]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	08db      	lsrs	r3, r3, #3
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	4a84      	ldr	r2, [pc, #528]	@ (8003dcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bda:	4b7b      	ldr	r3, [pc, #492]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c0a:	e087      	b.n	8003d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c4e:	e065      	b.n	8003d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c62:	4b59      	ldr	r3, [pc, #356]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c92:	e043      	b.n	8003d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003ddc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca6:	4b48      	ldr	r3, [pc, #288]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cd6:	e021      	b.n	8003d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cea:	4b37      	ldr	r3, [pc, #220]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cfe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d20:	0a5b      	lsrs	r3, r3, #9
 8003d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d42:	ee17 2a90 	vmov	r2, s15
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4e:	0c1b      	lsrs	r3, r3, #16
 8003d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d70:	ee17 2a90 	vmov	r2, s15
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d78:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	0e1b      	lsrs	r3, r3, #24
 8003d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9e:	ee17 2a90 	vmov	r2, s15
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003da6:	e008      	b.n	8003dba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
}
 8003dba:	bf00      	nop
 8003dbc:	3724      	adds	r7, #36	@ 0x24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	58024400 	.word	0x58024400
 8003dcc:	03d09000 	.word	0x03d09000
 8003dd0:	46000000 	.word	0x46000000
 8003dd4:	4c742400 	.word	0x4c742400
 8003dd8:	4a742400 	.word	0x4a742400
 8003ddc:	4bbebc20 	.word	0x4bbebc20

08003de0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	@ 0x24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003de8:	4ba1      	ldr	r3, [pc, #644]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003df2:	4b9f      	ldr	r3, [pc, #636]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	0d1b      	lsrs	r3, r3, #20
 8003df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dfc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003dfe:	4b9c      	ldr	r3, [pc, #624]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003e0a:	4b99      	ldr	r3, [pc, #612]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	08db      	lsrs	r3, r3, #3
 8003e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8111 	beq.w	8004050 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	f000 8083 	beq.w	8003f3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	f200 80a1 	bhi.w	8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d056      	beq.n	8003ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003e4a:	e099      	b.n	8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e4c:	4b88      	ldr	r3, [pc, #544]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d02d      	beq.n	8003eb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e58:	4b85      	ldr	r3, [pc, #532]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	08db      	lsrs	r3, r3, #3
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	4a84      	ldr	r2, [pc, #528]	@ (8004074 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e82:	4b7b      	ldr	r3, [pc, #492]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003eb2:	e087      	b.n	8003fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800407c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ef6:	e065      	b.n	8003fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f0a:	4b59      	ldr	r3, [pc, #356]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f3a:	e043      	b.n	8003fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004084 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4e:	4b48      	ldr	r3, [pc, #288]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f7e:	e021      	b.n	8003fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f92:	4b37      	ldr	r3, [pc, #220]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fa6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	0a5b      	lsrs	r3, r3, #9
 8003fca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fea:	ee17 2a90 	vmov	r2, s15
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004008:	ee37 7a87 	vadd.f32	s14, s15, s14
 800400c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004018:	ee17 2a90 	vmov	r2, s15
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004020:	4b13      	ldr	r3, [pc, #76]	@ (8004070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	0e1b      	lsrs	r3, r3, #24
 8004026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004032:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800403a:	edd7 6a07 	vldr	s13, [r7, #28]
 800403e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004046:	ee17 2a90 	vmov	r2, s15
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800404e:	e008      	b.n	8004062 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
}
 8004062:	bf00      	nop
 8004064:	3724      	adds	r7, #36	@ 0x24
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	58024400 	.word	0x58024400
 8004074:	03d09000 	.word	0x03d09000
 8004078:	46000000 	.word	0x46000000
 800407c:	4c742400 	.word	0x4c742400
 8004080:	4a742400 	.word	0x4a742400
 8004084:	4bbebc20 	.word	0x4bbebc20

08004088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0f5      	b.n	8004286 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a7c      	ldr	r2, [pc, #496]	@ (8004290 <HAL_TIM_Base_Init+0x208>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d045      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ac:	d040      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a78      	ldr	r2, [pc, #480]	@ (8004294 <HAL_TIM_Base_Init+0x20c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d03b      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a76      	ldr	r2, [pc, #472]	@ (8004298 <HAL_TIM_Base_Init+0x210>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d036      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a75      	ldr	r2, [pc, #468]	@ (800429c <HAL_TIM_Base_Init+0x214>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d031      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a73      	ldr	r2, [pc, #460]	@ (80042a0 <HAL_TIM_Base_Init+0x218>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d02c      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a72      	ldr	r2, [pc, #456]	@ (80042a4 <HAL_TIM_Base_Init+0x21c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d027      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a70      	ldr	r2, [pc, #448]	@ (80042a8 <HAL_TIM_Base_Init+0x220>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d022      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a6f      	ldr	r2, [pc, #444]	@ (80042ac <HAL_TIM_Base_Init+0x224>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d01d      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6d      	ldr	r2, [pc, #436]	@ (80042b0 <HAL_TIM_Base_Init+0x228>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d018      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6c      	ldr	r2, [pc, #432]	@ (80042b4 <HAL_TIM_Base_Init+0x22c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d013      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a6a      	ldr	r2, [pc, #424]	@ (80042b8 <HAL_TIM_Base_Init+0x230>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00e      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a69      	ldr	r2, [pc, #420]	@ (80042bc <HAL_TIM_Base_Init+0x234>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d009      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a67      	ldr	r2, [pc, #412]	@ (80042c0 <HAL_TIM_Base_Init+0x238>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <HAL_TIM_Base_Init+0xa8>
 8004126:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800412a:	4866      	ldr	r0, [pc, #408]	@ (80042c4 <HAL_TIM_Base_Init+0x23c>)
 800412c:	f7fc fd62 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d014      	beq.n	8004162 <HAL_TIM_Base_Init+0xda>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b10      	cmp	r3, #16
 800413e:	d010      	beq.n	8004162 <HAL_TIM_Base_Init+0xda>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b20      	cmp	r3, #32
 8004146:	d00c      	beq.n	8004162 <HAL_TIM_Base_Init+0xda>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b40      	cmp	r3, #64	@ 0x40
 800414e:	d008      	beq.n	8004162 <HAL_TIM_Base_Init+0xda>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b60      	cmp	r3, #96	@ 0x60
 8004156:	d004      	beq.n	8004162 <HAL_TIM_Base_Init+0xda>
 8004158:	f240 1117 	movw	r1, #279	@ 0x117
 800415c:	4859      	ldr	r0, [pc, #356]	@ (80042c4 <HAL_TIM_Base_Init+0x23c>)
 800415e:	f7fc fd49 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00e      	beq.n	8004188 <HAL_TIM_Base_Init+0x100>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004172:	d009      	beq.n	8004188 <HAL_TIM_Base_Init+0x100>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800417c:	d004      	beq.n	8004188 <HAL_TIM_Base_Init+0x100>
 800417e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8004182:	4850      	ldr	r0, [pc, #320]	@ (80042c4 <HAL_TIM_Base_Init+0x23c>)
 8004184:	f7fc fd36 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004190:	d004      	beq.n	800419c <HAL_TIM_Base_Init+0x114>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a41      	ldr	r2, [pc, #260]	@ (800429c <HAL_TIM_Base_Init+0x214>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d107      	bne.n	80041ac <HAL_TIM_Base_Init+0x124>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e00e      	b.n	80041ca <HAL_TIM_Base_Init+0x142>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d006      	beq.n	80041c2 <HAL_TIM_Base_Init+0x13a>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041bc:	d201      	bcs.n	80041c2 <HAL_TIM_Base_Init+0x13a>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_TIM_Base_Init+0x13c>
 80041c2:	2300      	movs	r3, #0
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <HAL_TIM_Base_Init+0x150>
 80041ce:	f240 1119 	movw	r1, #281	@ 0x119
 80041d2:	483c      	ldr	r0, [pc, #240]	@ (80042c4 <HAL_TIM_Base_Init+0x23c>)
 80041d4:	f7fc fd0e 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_TIM_Base_Init+0x16a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b80      	cmp	r3, #128	@ 0x80
 80041e6:	d004      	beq.n	80041f2 <HAL_TIM_Base_Init+0x16a>
 80041e8:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80041ec:	4835      	ldr	r0, [pc, #212]	@ (80042c4 <HAL_TIM_Base_Init+0x23c>)
 80041ee:	f7fc fd01 	bl	8000bf4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fd f83a 	bl	8001280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f001 fb34 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40010000 	.word	0x40010000
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40001000 	.word	0x40001000
 80042a4:	40001400 	.word	0x40001400
 80042a8:	40010400 	.word	0x40010400
 80042ac:	40001800 	.word	0x40001800
 80042b0:	40001c00 	.word	0x40001c00
 80042b4:	40002000 	.word	0x40002000
 80042b8:	40014000 	.word	0x40014000
 80042bc:	40014400 	.word	0x40014400
 80042c0:	40014800 	.word	0x40014800
 80042c4:	08007ec8 	.word	0x08007ec8

080042c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0f5      	b.n	80044c6 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a7c      	ldr	r2, [pc, #496]	@ (80044d0 <HAL_TIM_PWM_Init+0x208>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d045      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ec:	d040      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a78      	ldr	r2, [pc, #480]	@ (80044d4 <HAL_TIM_PWM_Init+0x20c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d03b      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a76      	ldr	r2, [pc, #472]	@ (80044d8 <HAL_TIM_PWM_Init+0x210>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d036      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a75      	ldr	r2, [pc, #468]	@ (80044dc <HAL_TIM_PWM_Init+0x214>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d031      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a73      	ldr	r2, [pc, #460]	@ (80044e0 <HAL_TIM_PWM_Init+0x218>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d02c      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a72      	ldr	r2, [pc, #456]	@ (80044e4 <HAL_TIM_PWM_Init+0x21c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d027      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a70      	ldr	r2, [pc, #448]	@ (80044e8 <HAL_TIM_PWM_Init+0x220>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d022      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6f      	ldr	r2, [pc, #444]	@ (80044ec <HAL_TIM_PWM_Init+0x224>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d01d      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a6d      	ldr	r2, [pc, #436]	@ (80044f0 <HAL_TIM_PWM_Init+0x228>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d018      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6c      	ldr	r2, [pc, #432]	@ (80044f4 <HAL_TIM_PWM_Init+0x22c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d013      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a6a      	ldr	r2, [pc, #424]	@ (80044f8 <HAL_TIM_PWM_Init+0x230>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00e      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a69      	ldr	r2, [pc, #420]	@ (80044fc <HAL_TIM_PWM_Init+0x234>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d009      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a67      	ldr	r2, [pc, #412]	@ (8004500 <HAL_TIM_PWM_Init+0x238>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_TIM_PWM_Init+0xa8>
 8004366:	f240 5133 	movw	r1, #1331	@ 0x533
 800436a:	4866      	ldr	r0, [pc, #408]	@ (8004504 <HAL_TIM_PWM_Init+0x23c>)
 800436c:	f7fc fc42 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d014      	beq.n	80043a2 <HAL_TIM_PWM_Init+0xda>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b10      	cmp	r3, #16
 800437e:	d010      	beq.n	80043a2 <HAL_TIM_PWM_Init+0xda>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b20      	cmp	r3, #32
 8004386:	d00c      	beq.n	80043a2 <HAL_TIM_PWM_Init+0xda>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b40      	cmp	r3, #64	@ 0x40
 800438e:	d008      	beq.n	80043a2 <HAL_TIM_PWM_Init+0xda>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b60      	cmp	r3, #96	@ 0x60
 8004396:	d004      	beq.n	80043a2 <HAL_TIM_PWM_Init+0xda>
 8004398:	f240 5134 	movw	r1, #1332	@ 0x534
 800439c:	4859      	ldr	r0, [pc, #356]	@ (8004504 <HAL_TIM_PWM_Init+0x23c>)
 800439e:	f7fc fc29 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00e      	beq.n	80043c8 <HAL_TIM_PWM_Init+0x100>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043b2:	d009      	beq.n	80043c8 <HAL_TIM_PWM_Init+0x100>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043bc:	d004      	beq.n	80043c8 <HAL_TIM_PWM_Init+0x100>
 80043be:	f240 5135 	movw	r1, #1333	@ 0x535
 80043c2:	4850      	ldr	r0, [pc, #320]	@ (8004504 <HAL_TIM_PWM_Init+0x23c>)
 80043c4:	f7fc fc16 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d0:	d004      	beq.n	80043dc <HAL_TIM_PWM_Init+0x114>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a41      	ldr	r2, [pc, #260]	@ (80044dc <HAL_TIM_PWM_Init+0x214>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d107      	bne.n	80043ec <HAL_TIM_PWM_Init+0x124>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e00e      	b.n	800440a <HAL_TIM_PWM_Init+0x142>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d006      	beq.n	8004402 <HAL_TIM_PWM_Init+0x13a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043fc:	d201      	bcs.n	8004402 <HAL_TIM_PWM_Init+0x13a>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <HAL_TIM_PWM_Init+0x13c>
 8004402:	2300      	movs	r3, #0
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d104      	bne.n	8004418 <HAL_TIM_PWM_Init+0x150>
 800440e:	f240 5136 	movw	r1, #1334	@ 0x536
 8004412:	483c      	ldr	r0, [pc, #240]	@ (8004504 <HAL_TIM_PWM_Init+0x23c>)
 8004414:	f7fc fbee 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_TIM_PWM_Init+0x16a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	2b80      	cmp	r3, #128	@ 0x80
 8004426:	d004      	beq.n	8004432 <HAL_TIM_PWM_Init+0x16a>
 8004428:	f240 5137 	movw	r1, #1335	@ 0x537
 800442c:	4835      	ldr	r0, [pc, #212]	@ (8004504 <HAL_TIM_PWM_Init+0x23c>)
 800442e:	f7fc fbe1 	bl	8000bf4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f85e 	bl	8004508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f001 fa14 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40010000 	.word	0x40010000
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40000c00 	.word	0x40000c00
 80044e0:	40001000 	.word	0x40001000
 80044e4:	40001400 	.word	0x40001400
 80044e8:	40010400 	.word	0x40010400
 80044ec:	40001800 	.word	0x40001800
 80044f0:	40001c00 	.word	0x40001c00
 80044f4:	40002000 	.word	0x40002000
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40014400 	.word	0x40014400
 8004500:	40014800 	.word	0x40014800
 8004504:	08007ec8 	.word	0x08007ec8

08004508 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a89      	ldr	r2, [pc, #548]	@ (8004750 <HAL_TIM_PWM_Start+0x234>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d117      	bne.n	8004560 <HAL_TIM_PWM_Start+0x44>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80ae 	beq.w	8004694 <HAL_TIM_PWM_Start+0x178>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b04      	cmp	r3, #4
 800453c:	f000 80aa 	beq.w	8004694 <HAL_TIM_PWM_Start+0x178>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b08      	cmp	r3, #8
 8004544:	f000 80a6 	beq.w	8004694 <HAL_TIM_PWM_Start+0x178>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b0c      	cmp	r3, #12
 800454c:	f000 80a2 	beq.w	8004694 <HAL_TIM_PWM_Start+0x178>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b10      	cmp	r3, #16
 8004554:	f000 809e 	beq.w	8004694 <HAL_TIM_PWM_Start+0x178>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b14      	cmp	r3, #20
 800455c:	f000 809a 	beq.w	8004694 <HAL_TIM_PWM_Start+0x178>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004568:	d10f      	bne.n	800458a <HAL_TIM_PWM_Start+0x6e>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8091 	beq.w	8004694 <HAL_TIM_PWM_Start+0x178>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b04      	cmp	r3, #4
 8004576:	f000 808d 	beq.w	8004694 <HAL_TIM_PWM_Start+0x178>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b08      	cmp	r3, #8
 800457e:	f000 8089 	beq.w	8004694 <HAL_TIM_PWM_Start+0x178>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b0c      	cmp	r3, #12
 8004586:	f000 8085 	beq.w	8004694 <HAL_TIM_PWM_Start+0x178>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a71      	ldr	r2, [pc, #452]	@ (8004754 <HAL_TIM_PWM_Start+0x238>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10b      	bne.n	80045ac <HAL_TIM_PWM_Start+0x90>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d07c      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b04      	cmp	r3, #4
 800459e:	d079      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d076      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b0c      	cmp	r3, #12
 80045aa:	d073      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a69      	ldr	r2, [pc, #420]	@ (8004758 <HAL_TIM_PWM_Start+0x23c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d10b      	bne.n	80045ce <HAL_TIM_PWM_Start+0xb2>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d06b      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d068      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d065      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d062      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a62      	ldr	r2, [pc, #392]	@ (800475c <HAL_TIM_PWM_Start+0x240>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10b      	bne.n	80045f0 <HAL_TIM_PWM_Start+0xd4>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d05a      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d057      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d054      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	d051      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004760 <HAL_TIM_PWM_Start+0x244>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d111      	bne.n	800461e <HAL_TIM_PWM_Start+0x102>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d049      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b04      	cmp	r3, #4
 8004604:	d046      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d043      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d040      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b10      	cmp	r3, #16
 8004616:	d03d      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b14      	cmp	r3, #20
 800461c:	d03a      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a50      	ldr	r2, [pc, #320]	@ (8004764 <HAL_TIM_PWM_Start+0x248>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d105      	bne.n	8004634 <HAL_TIM_PWM_Start+0x118>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d032      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b04      	cmp	r3, #4
 8004632:	d02f      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a4b      	ldr	r2, [pc, #300]	@ (8004768 <HAL_TIM_PWM_Start+0x24c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d102      	bne.n	8004644 <HAL_TIM_PWM_Start+0x128>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d027      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a48      	ldr	r2, [pc, #288]	@ (800476c <HAL_TIM_PWM_Start+0x250>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d102      	bne.n	8004654 <HAL_TIM_PWM_Start+0x138>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01f      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a45      	ldr	r2, [pc, #276]	@ (8004770 <HAL_TIM_PWM_Start+0x254>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d105      	bne.n	800466a <HAL_TIM_PWM_Start+0x14e>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d017      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b04      	cmp	r3, #4
 8004668:	d014      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a41      	ldr	r2, [pc, #260]	@ (8004774 <HAL_TIM_PWM_Start+0x258>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d102      	bne.n	800467a <HAL_TIM_PWM_Start+0x15e>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00c      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a3e      	ldr	r2, [pc, #248]	@ (8004778 <HAL_TIM_PWM_Start+0x25c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d102      	bne.n	800468a <HAL_TIM_PWM_Start+0x16e>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <HAL_TIM_PWM_Start+0x178>
 800468a:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800468e:	483b      	ldr	r0, [pc, #236]	@ (800477c <HAL_TIM_PWM_Start+0x260>)
 8004690:	f7fc fab0 	bl	8000bf4 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <HAL_TIM_PWM_Start+0x192>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	bf14      	ite	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	2300      	moveq	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	e03c      	b.n	8004728 <HAL_TIM_PWM_Start+0x20c>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d109      	bne.n	80046c8 <HAL_TIM_PWM_Start+0x1ac>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	e02f      	b.n	8004728 <HAL_TIM_PWM_Start+0x20c>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d109      	bne.n	80046e2 <HAL_TIM_PWM_Start+0x1c6>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	bf14      	ite	ne
 80046da:	2301      	movne	r3, #1
 80046dc:	2300      	moveq	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	e022      	b.n	8004728 <HAL_TIM_PWM_Start+0x20c>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b0c      	cmp	r3, #12
 80046e6:	d109      	bne.n	80046fc <HAL_TIM_PWM_Start+0x1e0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e015      	b.n	8004728 <HAL_TIM_PWM_Start+0x20c>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d109      	bne.n	8004716 <HAL_TIM_PWM_Start+0x1fa>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	e008      	b.n	8004728 <HAL_TIM_PWM_Start+0x20c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	bf14      	ite	ne
 8004722:	2301      	movne	r3, #1
 8004724:	2300      	moveq	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0b9      	b.n	80048a4 <HAL_TIM_PWM_Start+0x388>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <HAL_TIM_PWM_Start+0x224>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800473e:	e03b      	b.n	80047b8 <HAL_TIM_PWM_Start+0x29c>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b04      	cmp	r3, #4
 8004744:	d11c      	bne.n	8004780 <HAL_TIM_PWM_Start+0x264>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800474e:	e033      	b.n	80047b8 <HAL_TIM_PWM_Start+0x29c>
 8004750:	40010000 	.word	0x40010000
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40000c00 	.word	0x40000c00
 8004760:	40010400 	.word	0x40010400
 8004764:	40001800 	.word	0x40001800
 8004768:	40001c00 	.word	0x40001c00
 800476c:	40002000 	.word	0x40002000
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800
 800477c:	08007ec8 	.word	0x08007ec8
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b08      	cmp	r3, #8
 8004784:	d104      	bne.n	8004790 <HAL_TIM_PWM_Start+0x274>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800478e:	e013      	b.n	80047b8 <HAL_TIM_PWM_Start+0x29c>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b0c      	cmp	r3, #12
 8004794:	d104      	bne.n	80047a0 <HAL_TIM_PWM_Start+0x284>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800479e:	e00b      	b.n	80047b8 <HAL_TIM_PWM_Start+0x29c>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d104      	bne.n	80047b0 <HAL_TIM_PWM_Start+0x294>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047ae:	e003      	b.n	80047b8 <HAL_TIM_PWM_Start+0x29c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2201      	movs	r2, #1
 80047be:	6839      	ldr	r1, [r7, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 fd01 	bl	80061c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a38      	ldr	r2, [pc, #224]	@ (80048ac <HAL_TIM_PWM_Start+0x390>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x2dc>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a36      	ldr	r2, [pc, #216]	@ (80048b0 <HAL_TIM_PWM_Start+0x394>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x2dc>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a35      	ldr	r2, [pc, #212]	@ (80048b4 <HAL_TIM_PWM_Start+0x398>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x2dc>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a33      	ldr	r2, [pc, #204]	@ (80048b8 <HAL_TIM_PWM_Start+0x39c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x2dc>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a32      	ldr	r2, [pc, #200]	@ (80048bc <HAL_TIM_PWM_Start+0x3a0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_PWM_Start+0x2e0>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_TIM_PWM_Start+0x2e2>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_TIM_PWM_Start+0x2f6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004810:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <HAL_TIM_PWM_Start+0x390>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d022      	beq.n	8004862 <HAL_TIM_PWM_Start+0x346>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004824:	d01d      	beq.n	8004862 <HAL_TIM_PWM_Start+0x346>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a25      	ldr	r2, [pc, #148]	@ (80048c0 <HAL_TIM_PWM_Start+0x3a4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d018      	beq.n	8004862 <HAL_TIM_PWM_Start+0x346>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a23      	ldr	r2, [pc, #140]	@ (80048c4 <HAL_TIM_PWM_Start+0x3a8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <HAL_TIM_PWM_Start+0x346>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a22      	ldr	r2, [pc, #136]	@ (80048c8 <HAL_TIM_PWM_Start+0x3ac>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00e      	beq.n	8004862 <HAL_TIM_PWM_Start+0x346>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a19      	ldr	r2, [pc, #100]	@ (80048b0 <HAL_TIM_PWM_Start+0x394>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d009      	beq.n	8004862 <HAL_TIM_PWM_Start+0x346>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1e      	ldr	r2, [pc, #120]	@ (80048cc <HAL_TIM_PWM_Start+0x3b0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_TIM_PWM_Start+0x346>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a15      	ldr	r2, [pc, #84]	@ (80048b4 <HAL_TIM_PWM_Start+0x398>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d115      	bne.n	800488e <HAL_TIM_PWM_Start+0x372>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	4b19      	ldr	r3, [pc, #100]	@ (80048d0 <HAL_TIM_PWM_Start+0x3b4>)
 800486a:	4013      	ands	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b06      	cmp	r3, #6
 8004872:	d015      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x384>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487a:	d011      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x384>
    {
      __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488c:	e008      	b.n	80048a0 <HAL_TIM_PWM_Start+0x384>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e000      	b.n	80048a2 <HAL_TIM_PWM_Start+0x386>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40010400 	.word	0x40010400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40014400 	.word	0x40014400
 80048bc:	40014800 	.word	0x40014800
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40000c00 	.word	0x40000c00
 80048cc:	40001800 	.word	0x40001800
 80048d0:	00010007 	.word	0x00010007

080048d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e1a8      	b.n	8004c3a <HAL_TIM_Encoder_Init+0x366>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a7f      	ldr	r2, [pc, #508]	@ (8004aec <HAL_TIM_Encoder_Init+0x218>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01d      	beq.n	800492e <HAL_TIM_Encoder_Init+0x5a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048fa:	d018      	beq.n	800492e <HAL_TIM_Encoder_Init+0x5a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a7b      	ldr	r2, [pc, #492]	@ (8004af0 <HAL_TIM_Encoder_Init+0x21c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_TIM_Encoder_Init+0x5a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a7a      	ldr	r2, [pc, #488]	@ (8004af4 <HAL_TIM_Encoder_Init+0x220>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIM_Encoder_Init+0x5a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a78      	ldr	r2, [pc, #480]	@ (8004af8 <HAL_TIM_Encoder_Init+0x224>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_TIM_Encoder_Init+0x5a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a77      	ldr	r2, [pc, #476]	@ (8004afc <HAL_TIM_Encoder_Init+0x228>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIM_Encoder_Init+0x5a>
 8004924:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8004928:	4875      	ldr	r0, [pc, #468]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 800492a:	f7fc f963 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d014      	beq.n	8004960 <HAL_TIM_Encoder_Init+0x8c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b10      	cmp	r3, #16
 800493c:	d010      	beq.n	8004960 <HAL_TIM_Encoder_Init+0x8c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b20      	cmp	r3, #32
 8004944:	d00c      	beq.n	8004960 <HAL_TIM_Encoder_Init+0x8c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b40      	cmp	r3, #64	@ 0x40
 800494c:	d008      	beq.n	8004960 <HAL_TIM_Encoder_Init+0x8c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b60      	cmp	r3, #96	@ 0x60
 8004954:	d004      	beq.n	8004960 <HAL_TIM_Encoder_Init+0x8c>
 8004956:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 800495a:	4869      	ldr	r0, [pc, #420]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 800495c:	f7fc f94a 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00e      	beq.n	8004986 <HAL_TIM_Encoder_Init+0xb2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004970:	d009      	beq.n	8004986 <HAL_TIM_Encoder_Init+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800497a:	d004      	beq.n	8004986 <HAL_TIM_Encoder_Init+0xb2>
 800497c:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8004980:	485f      	ldr	r0, [pc, #380]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 8004982:	f7fc f937 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d008      	beq.n	80049a0 <HAL_TIM_Encoder_Init+0xcc>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b80      	cmp	r3, #128	@ 0x80
 8004994:	d004      	beq.n	80049a0 <HAL_TIM_Encoder_Init+0xcc>
 8004996:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 800499a:	4859      	ldr	r0, [pc, #356]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 800499c:	f7fc f92a 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d00c      	beq.n	80049c2 <HAL_TIM_Encoder_Init+0xee>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d008      	beq.n	80049c2 <HAL_TIM_Encoder_Init+0xee>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d004      	beq.n	80049c2 <HAL_TIM_Encoder_Init+0xee>
 80049b8:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 80049bc:	4850      	ldr	r0, [pc, #320]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 80049be:	f7fc f919 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d00c      	beq.n	80049e4 <HAL_TIM_Encoder_Init+0x110>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d008      	beq.n	80049e4 <HAL_TIM_Encoder_Init+0x110>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d004      	beq.n	80049e4 <HAL_TIM_Encoder_Init+0x110>
 80049da:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 80049de:	4848      	ldr	r0, [pc, #288]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 80049e0:	f7fc f908 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d00c      	beq.n	8004a06 <HAL_TIM_Encoder_Init+0x132>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d008      	beq.n	8004a06 <HAL_TIM_Encoder_Init+0x132>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d004      	beq.n	8004a06 <HAL_TIM_Encoder_Init+0x132>
 80049fc:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8004a00:	483f      	ldr	r0, [pc, #252]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 8004a02:	f7fc f8f7 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d008      	beq.n	8004a20 <HAL_TIM_Encoder_Init+0x14c>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d004      	beq.n	8004a20 <HAL_TIM_Encoder_Init+0x14c>
 8004a16:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8004a1a:	4839      	ldr	r0, [pc, #228]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 8004a1c:	f7fc f8ea 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_TIM_Encoder_Init+0x166>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d004      	beq.n	8004a3a <HAL_TIM_Encoder_Init+0x166>
 8004a30:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 8004a34:	4832      	ldr	r0, [pc, #200]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 8004a36:	f7fc f8dd 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d010      	beq.n	8004a64 <HAL_TIM_Encoder_Init+0x190>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d00c      	beq.n	8004a64 <HAL_TIM_Encoder_Init+0x190>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d008      	beq.n	8004a64 <HAL_TIM_Encoder_Init+0x190>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	d004      	beq.n	8004a64 <HAL_TIM_Encoder_Init+0x190>
 8004a5a:	f640 31ec 	movw	r1, #3052	@ 0xbec
 8004a5e:	4828      	ldr	r0, [pc, #160]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 8004a60:	f7fc f8c8 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d010      	beq.n	8004a8e <HAL_TIM_Encoder_Init+0x1ba>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d00c      	beq.n	8004a8e <HAL_TIM_Encoder_Init+0x1ba>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d008      	beq.n	8004a8e <HAL_TIM_Encoder_Init+0x1ba>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d004      	beq.n	8004a8e <HAL_TIM_Encoder_Init+0x1ba>
 8004a84:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8004a88:	481d      	ldr	r0, [pc, #116]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 8004a8a:	f7fc f8b3 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b0f      	cmp	r3, #15
 8004a94:	d904      	bls.n	8004aa0 <HAL_TIM_Encoder_Init+0x1cc>
 8004a96:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8004a9a:	4819      	ldr	r0, [pc, #100]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 8004a9c:	f7fc f8aa 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	2b0f      	cmp	r3, #15
 8004aa6:	d904      	bls.n	8004ab2 <HAL_TIM_Encoder_Init+0x1de>
 8004aa8:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8004aac:	4814      	ldr	r0, [pc, #80]	@ (8004b00 <HAL_TIM_Encoder_Init+0x22c>)
 8004aae:	f7fc f8a1 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIM_Encoder_Init+0x1f2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8004af8 <HAL_TIM_Encoder_Init+0x224>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d107      	bne.n	8004ad6 <HAL_TIM_Encoder_Init+0x202>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf14      	ite	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	2300      	moveq	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e01a      	b.n	8004b0c <HAL_TIM_Encoder_Init+0x238>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d012      	beq.n	8004b04 <HAL_TIM_Encoder_Init+0x230>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae6:	d20d      	bcs.n	8004b04 <HAL_TIM_Encoder_Init+0x230>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e00c      	b.n	8004b06 <HAL_TIM_Encoder_Init+0x232>
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00
 8004afc:	40010400 	.word	0x40010400
 8004b00:	08007ec8 	.word	0x08007ec8
 8004b04:	2300      	movs	r3, #0
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_Encoder_Init+0x246>
 8004b10:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8004b14:	484b      	ldr	r0, [pc, #300]	@ (8004c44 <HAL_TIM_Encoder_Init+0x370>)
 8004b16:	f7fc f86d 	bl	8000bf4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fbc8 	bl	80012c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6899      	ldr	r1, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b40      	ldr	r3, [pc, #256]	@ (8004c48 <HAL_TIM_Encoder_Init+0x374>)
 8004b48:	400b      	ands	r3, r1
 8004b4a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f000 fe98 	bl	800588c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4b32      	ldr	r3, [pc, #200]	@ (8004c4c <HAL_TIM_Encoder_Init+0x378>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	4313      	orrs	r3, r2
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004c50 <HAL_TIM_Encoder_Init+0x37c>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8004c54 <HAL_TIM_Encoder_Init+0x380>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	011a      	lsls	r2, r3, #4
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	031b      	lsls	r3, r3, #12
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004bd4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004bdc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	4313      	orrs	r3, r2
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	08007ec8 	.word	0x08007ec8
 8004c48:	fffebff8 	.word	0xfffebff8
 8004c4c:	fffffcfc 	.word	0xfffffcfc
 8004c50:	fffff3f3 	.word	0xfffff3f3
 8004c54:	ffff0f0f 	.word	0xffff0f0f

08004c58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d016      	beq.n	8004c9c <HAL_TIM_PWM_ConfigChannel+0x44>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d013      	beq.n	8004c9c <HAL_TIM_PWM_ConfigChannel+0x44>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d010      	beq.n	8004c9c <HAL_TIM_PWM_ConfigChannel+0x44>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b0c      	cmp	r3, #12
 8004c7e:	d00d      	beq.n	8004c9c <HAL_TIM_PWM_ConfigChannel+0x44>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d00a      	beq.n	8004c9c <HAL_TIM_PWM_ConfigChannel+0x44>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b14      	cmp	r3, #20
 8004c8a:	d007      	beq.n	8004c9c <HAL_TIM_PWM_ConfigChannel+0x44>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b3c      	cmp	r3, #60	@ 0x3c
 8004c90:	d004      	beq.n	8004c9c <HAL_TIM_PWM_ConfigChannel+0x44>
 8004c92:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 8004c96:	4895      	ldr	r0, [pc, #596]	@ (8004eec <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004c98:	f7fb ffac 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b60      	cmp	r3, #96	@ 0x60
 8004ca2:	d01c      	beq.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x86>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b70      	cmp	r3, #112	@ 0x70
 8004caa:	d018      	beq.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x86>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a8f      	ldr	r2, [pc, #572]	@ (8004ef0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x86>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a8e      	ldr	r2, [pc, #568]	@ (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x86>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a8c      	ldr	r2, [pc, #560]	@ (8004ef8 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x86>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a8b      	ldr	r2, [pc, #556]	@ (8004efc <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x86>
 8004cd4:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8004cd8:	4884      	ldr	r0, [pc, #528]	@ (8004eec <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004cda:	f7fb ff8b 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d008      	beq.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d004      	beq.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004cee:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8004cf2:	487e      	ldr	r0, [pc, #504]	@ (8004eec <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004cf4:	f7fb ff7e 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0xba>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d004      	beq.n	8004d12 <HAL_TIM_PWM_ConfigChannel+0xba>
 8004d08:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8004d0c:	4877      	ldr	r0, [pc, #476]	@ (8004eec <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004d0e:	f7fb ff71 	bl	8000bf4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e1f3      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b14      	cmp	r3, #20
 8004d2c:	f200 81e4 	bhi.w	80050f8 <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8004d30:	a201      	add	r2, pc, #4	@ (adr r2, 8004d38 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d8d 	.word	0x08004d8d
 8004d3c:	080050f9 	.word	0x080050f9
 8004d40:	080050f9 	.word	0x080050f9
 8004d44:	080050f9 	.word	0x080050f9
 8004d48:	08004e4f 	.word	0x08004e4f
 8004d4c:	080050f9 	.word	0x080050f9
 8004d50:	080050f9 	.word	0x080050f9
 8004d54:	080050f9 	.word	0x080050f9
 8004d58:	08004f2d 	.word	0x08004f2d
 8004d5c:	080050f9 	.word	0x080050f9
 8004d60:	080050f9 	.word	0x080050f9
 8004d64:	080050f9 	.word	0x080050f9
 8004d68:	08004fb3 	.word	0x08004fb3
 8004d6c:	080050f9 	.word	0x080050f9
 8004d70:	080050f9 	.word	0x080050f9
 8004d74:	080050f9 	.word	0x080050f9
 8004d78:	0800503b 	.word	0x0800503b
 8004d7c:	080050f9 	.word	0x080050f9
 8004d80:	080050f9 	.word	0x080050f9
 8004d84:	080050f9 	.word	0x080050f9
 8004d88:	08005099 	.word	0x08005099
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a5b      	ldr	r2, [pc, #364]	@ (8004f00 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d03b      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9e:	d036      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a57      	ldr	r2, [pc, #348]	@ (8004f04 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d031      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a56      	ldr	r2, [pc, #344]	@ (8004f08 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d02c      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a54      	ldr	r2, [pc, #336]	@ (8004f0c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d027      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a53      	ldr	r2, [pc, #332]	@ (8004f10 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d022      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a51      	ldr	r2, [pc, #324]	@ (8004f14 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01d      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a50      	ldr	r2, [pc, #320]	@ (8004f18 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d018      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a4e      	ldr	r2, [pc, #312]	@ (8004f1c <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a4d      	ldr	r2, [pc, #308]	@ (8004f20 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a4b      	ldr	r2, [pc, #300]	@ (8004f24 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a4a      	ldr	r2, [pc, #296]	@ (8004f28 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8004e04:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8004e08:	4838      	ldr	r0, [pc, #224]	@ (8004eec <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004e0a:	f7fb fef3 	bl	8000bf4 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fdd9 	bl	80059cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0208 	orr.w	r2, r2, #8
 8004e28:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0204 	bic.w	r2, r2, #4
 8004e38:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6999      	ldr	r1, [r3, #24]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	619a      	str	r2, [r3, #24]
      break;
 8004e4c:	e157      	b.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2b      	ldr	r2, [pc, #172]	@ (8004f00 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d027      	beq.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e60:	d022      	beq.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a27      	ldr	r2, [pc, #156]	@ (8004f04 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d01d      	beq.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a25      	ldr	r2, [pc, #148]	@ (8004f08 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d018      	beq.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a24      	ldr	r2, [pc, #144]	@ (8004f0c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d013      	beq.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a22      	ldr	r2, [pc, #136]	@ (8004f10 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00e      	beq.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a21      	ldr	r2, [pc, #132]	@ (8004f14 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d009      	beq.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a21      	ldr	r2, [pc, #132]	@ (8004f20 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x250>
 8004e9e:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 8004ea2:	4812      	ldr	r0, [pc, #72]	@ (8004eec <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004ea4:	f7fb fea6 	bl	8000bf4 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fe46 	bl	8005b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6999      	ldr	r1, [r3, #24]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	021a      	lsls	r2, r3, #8
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	619a      	str	r2, [r3, #24]
      break;
 8004ee8:	e109      	b.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x4a6>
 8004eea:	bf00      	nop
 8004eec:	08007ec8 	.word	0x08007ec8
 8004ef0:	00010040 	.word	0x00010040
 8004ef4:	00010050 	.word	0x00010050
 8004ef8:	00010060 	.word	0x00010060
 8004efc:	00010070 	.word	0x00010070
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40010400 	.word	0x40010400
 8004f14:	40001800 	.word	0x40001800
 8004f18:	40001c00 	.word	0x40001c00
 8004f1c:	40002000 	.word	0x40002000
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a77      	ldr	r2, [pc, #476]	@ (8005110 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01d      	beq.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3e:	d018      	beq.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a73      	ldr	r2, [pc, #460]	@ (8005114 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a72      	ldr	r2, [pc, #456]	@ (8005118 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00e      	beq.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a70      	ldr	r2, [pc, #448]	@ (800511c <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d009      	beq.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a6f      	ldr	r2, [pc, #444]	@ (8005120 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8004f68:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8004f6c:	486d      	ldr	r0, [pc, #436]	@ (8005124 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8004f6e:	f7fb fe41 	bl	8000bf4 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fe93 	bl	8005ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0208 	orr.w	r2, r2, #8
 8004f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0204 	bic.w	r2, r2, #4
 8004f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69d9      	ldr	r1, [r3, #28]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	61da      	str	r2, [r3, #28]
      break;
 8004fb0:	e0a5      	b.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a56      	ldr	r2, [pc, #344]	@ (8005110 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d01d      	beq.n	8004ff8 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc4:	d018      	beq.n	8004ff8 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a52      	ldr	r2, [pc, #328]	@ (8005114 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a50      	ldr	r2, [pc, #320]	@ (8005118 <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00e      	beq.n	8004ff8 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a4f      	ldr	r2, [pc, #316]	@ (800511c <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a4d      	ldr	r2, [pc, #308]	@ (8005120 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004fee:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 8004ff2:	484c      	ldr	r0, [pc, #304]	@ (8005124 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8004ff4:	f7fb fdfe 	bl	8000bf4 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 ff02 	bl	8005e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69da      	ldr	r2, [r3, #28]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005012:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69da      	ldr	r2, [r3, #28]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005022:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69d9      	ldr	r1, [r3, #28]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	021a      	lsls	r2, r3, #8
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	61da      	str	r2, [r3, #28]
      break;
 8005038:	e061      	b.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a34      	ldr	r2, [pc, #208]	@ (8005110 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_TIM_PWM_ConfigChannel+0x400>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a35      	ldr	r2, [pc, #212]	@ (8005120 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_TIM_PWM_ConfigChannel+0x400>
 800504e:	f241 1104 	movw	r1, #4356	@ 0x1104
 8005052:	4834      	ldr	r0, [pc, #208]	@ (8005124 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8005054:	f7fb fdce 	bl	8000bf4 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 ff4a 	bl	8005ef8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0208 	orr.w	r2, r2, #8
 8005072:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0204 	bic.w	r2, r2, #4
 8005082:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005096:	e032      	b.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1c      	ldr	r2, [pc, #112]	@ (8005110 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x45e>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005120 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x45e>
 80050ac:	f241 1115 	movw	r1, #4373	@ 0x1115
 80050b0:	481c      	ldr	r0, [pc, #112]	@ (8005124 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80050b2:	f7fb fd9f 	bl	8000bf4 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 ff7f 	bl	8005fc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050e0:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	021a      	lsls	r2, r3, #8
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80050f6:	e002      	b.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	75fb      	strb	r3, [r7, #23]
      break;
 80050fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005106:	7dfb      	ldrb	r3, [r7, #23]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40010000 	.word	0x40010000
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40010400 	.word	0x40010400
 8005124:	08007ec8 	.word	0x08007ec8

08005128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_TIM_ConfigClockSource+0x1c>
 8005140:	2302      	movs	r3, #2
 8005142:	e38e      	b.n	8005862 <HAL_TIM_ConfigClockSource+0x73a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800515c:	d029      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x8a>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b70      	cmp	r3, #112	@ 0x70
 8005164:	d025      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x8a>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800516e:	d020      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x8a>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b40      	cmp	r3, #64	@ 0x40
 8005176:	d01c      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x8a>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b50      	cmp	r3, #80	@ 0x50
 800517e:	d018      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x8a>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b60      	cmp	r3, #96	@ 0x60
 8005186:	d014      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x8a>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d010      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x8a>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b10      	cmp	r3, #16
 8005196:	d00c      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x8a>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b20      	cmp	r3, #32
 800519e:	d008      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x8a>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b30      	cmp	r3, #48	@ 0x30
 80051a6:	d004      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x8a>
 80051a8:	f241 5151 	movw	r1, #5457	@ 0x1551
 80051ac:	4868      	ldr	r0, [pc, #416]	@ (8005350 <HAL_TIM_ConfigClockSource+0x228>)
 80051ae:	f7fb fd21 	bl	8000bf4 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	4b65      	ldr	r3, [pc, #404]	@ (8005354 <HAL_TIM_ConfigClockSource+0x22c>)
 80051be:	4013      	ands	r3, r2
 80051c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a60      	ldr	r2, [pc, #384]	@ (8005358 <HAL_TIM_ConfigClockSource+0x230>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	f000 82ff 	beq.w	80057dc <HAL_TIM_ConfigClockSource+0x6b4>
 80051de:	4a5e      	ldr	r2, [pc, #376]	@ (8005358 <HAL_TIM_ConfigClockSource+0x230>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	f200 8331 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 80051e6:	4a5d      	ldr	r2, [pc, #372]	@ (800535c <HAL_TIM_ConfigClockSource+0x234>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	f000 82f7 	beq.w	80057dc <HAL_TIM_ConfigClockSource+0x6b4>
 80051ee:	4a5b      	ldr	r2, [pc, #364]	@ (800535c <HAL_TIM_ConfigClockSource+0x234>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	f200 8329 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 80051f6:	4a5a      	ldr	r2, [pc, #360]	@ (8005360 <HAL_TIM_ConfigClockSource+0x238>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	f000 82ef 	beq.w	80057dc <HAL_TIM_ConfigClockSource+0x6b4>
 80051fe:	4a58      	ldr	r2, [pc, #352]	@ (8005360 <HAL_TIM_ConfigClockSource+0x238>)
 8005200:	4293      	cmp	r3, r2
 8005202:	f200 8321 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 8005206:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800520a:	f000 82e7 	beq.w	80057dc <HAL_TIM_ConfigClockSource+0x6b4>
 800520e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005212:	f200 8319 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 8005216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800521a:	f000 82df 	beq.w	80057dc <HAL_TIM_ConfigClockSource+0x6b4>
 800521e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005222:	f200 8311 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 8005226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800522a:	f000 812a 	beq.w	8005482 <HAL_TIM_ConfigClockSource+0x35a>
 800522e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005232:	f200 8309 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 8005236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800523a:	d02e      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x172>
 800523c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005240:	f200 8302 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 8005244:	2b70      	cmp	r3, #112	@ 0x70
 8005246:	f000 80a7 	beq.w	8005398 <HAL_TIM_ConfigClockSource+0x270>
 800524a:	2b70      	cmp	r3, #112	@ 0x70
 800524c:	f200 82fc 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 8005250:	2b60      	cmp	r3, #96	@ 0x60
 8005252:	f000 81f3 	beq.w	800563c <HAL_TIM_ConfigClockSource+0x514>
 8005256:	2b60      	cmp	r3, #96	@ 0x60
 8005258:	f200 82f6 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 800525c:	2b50      	cmp	r3, #80	@ 0x50
 800525e:	f000 818d 	beq.w	800557c <HAL_TIM_ConfigClockSource+0x454>
 8005262:	2b50      	cmp	r3, #80	@ 0x50
 8005264:	f200 82f0 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 8005268:	2b40      	cmp	r3, #64	@ 0x40
 800526a:	f000 8257 	beq.w	800571c <HAL_TIM_ConfigClockSource+0x5f4>
 800526e:	2b40      	cmp	r3, #64	@ 0x40
 8005270:	f200 82ea 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 8005274:	2b30      	cmp	r3, #48	@ 0x30
 8005276:	f000 82b1 	beq.w	80057dc <HAL_TIM_ConfigClockSource+0x6b4>
 800527a:	2b30      	cmp	r3, #48	@ 0x30
 800527c:	f200 82e4 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 8005280:	2b20      	cmp	r3, #32
 8005282:	f000 82ab 	beq.w	80057dc <HAL_TIM_ConfigClockSource+0x6b4>
 8005286:	2b20      	cmp	r3, #32
 8005288:	f200 82de 	bhi.w	8005848 <HAL_TIM_ConfigClockSource+0x720>
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 82a5 	beq.w	80057dc <HAL_TIM_ConfigClockSource+0x6b4>
 8005292:	2b10      	cmp	r3, #16
 8005294:	f000 82a2 	beq.w	80057dc <HAL_TIM_ConfigClockSource+0x6b4>
 8005298:	e2d6      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x720>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a31      	ldr	r2, [pc, #196]	@ (8005364 <HAL_TIM_ConfigClockSource+0x23c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	f000 82d4 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ae:	f000 82ce 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005368 <HAL_TIM_ConfigClockSource+0x240>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	f000 82c8 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a2a      	ldr	r2, [pc, #168]	@ (800536c <HAL_TIM_ConfigClockSource+0x244>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	f000 82c2 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a28      	ldr	r2, [pc, #160]	@ (8005370 <HAL_TIM_ConfigClockSource+0x248>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	f000 82bc 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a26      	ldr	r2, [pc, #152]	@ (8005374 <HAL_TIM_ConfigClockSource+0x24c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	f000 82b6 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a24      	ldr	r2, [pc, #144]	@ (8005378 <HAL_TIM_ConfigClockSource+0x250>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	f000 82b0 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a22      	ldr	r2, [pc, #136]	@ (800537c <HAL_TIM_ConfigClockSource+0x254>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	f000 82aa 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a20      	ldr	r2, [pc, #128]	@ (8005380 <HAL_TIM_ConfigClockSource+0x258>)
 8005300:	4293      	cmp	r3, r2
 8005302:	f000 82a4 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1e      	ldr	r2, [pc, #120]	@ (8005384 <HAL_TIM_ConfigClockSource+0x25c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	f000 829e 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1c      	ldr	r2, [pc, #112]	@ (8005388 <HAL_TIM_ConfigClockSource+0x260>)
 8005318:	4293      	cmp	r3, r2
 800531a:	f000 8298 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1a      	ldr	r2, [pc, #104]	@ (800538c <HAL_TIM_ConfigClockSource+0x264>)
 8005324:	4293      	cmp	r3, r2
 8005326:	f000 8292 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a18      	ldr	r2, [pc, #96]	@ (8005390 <HAL_TIM_ConfigClockSource+0x268>)
 8005330:	4293      	cmp	r3, r2
 8005332:	f000 828c 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a16      	ldr	r2, [pc, #88]	@ (8005394 <HAL_TIM_ConfigClockSource+0x26c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	f000 8286 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x726>
 8005342:	f241 515d 	movw	r1, #5469	@ 0x155d
 8005346:	4802      	ldr	r0, [pc, #8]	@ (8005350 <HAL_TIM_ConfigClockSource+0x228>)
 8005348:	f7fb fc54 	bl	8000bf4 <assert_failed>
      break;
 800534c:	e27f      	b.n	800584e <HAL_TIM_ConfigClockSource+0x726>
 800534e:	bf00      	nop
 8005350:	08007ec8 	.word	0x08007ec8
 8005354:	ffceff88 	.word	0xffceff88
 8005358:	00100040 	.word	0x00100040
 800535c:	00100030 	.word	0x00100030
 8005360:	00100020 	.word	0x00100020
 8005364:	40010000 	.word	0x40010000
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40001000 	.word	0x40001000
 8005378:	40001400 	.word	0x40001400
 800537c:	40010400 	.word	0x40010400
 8005380:	40001800 	.word	0x40001800
 8005384:	40001c00 	.word	0x40001c00
 8005388:	40002000 	.word	0x40002000
 800538c:	40014000 	.word	0x40014000
 8005390:	40014400 	.word	0x40014400
 8005394:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a71      	ldr	r2, [pc, #452]	@ (8005564 <HAL_TIM_ConfigClockSource+0x43c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d01d      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x2b6>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053aa:	d018      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x2b6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a6d      	ldr	r2, [pc, #436]	@ (8005568 <HAL_TIM_ConfigClockSource+0x440>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x2b6>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a6c      	ldr	r2, [pc, #432]	@ (800556c <HAL_TIM_ConfigClockSource+0x444>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00e      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x2b6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a6a      	ldr	r2, [pc, #424]	@ (8005570 <HAL_TIM_ConfigClockSource+0x448>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x2b6>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a69      	ldr	r2, [pc, #420]	@ (8005574 <HAL_TIM_ConfigClockSource+0x44c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x2b6>
 80053d4:	f241 5164 	movw	r1, #5476	@ 0x1564
 80053d8:	4867      	ldr	r0, [pc, #412]	@ (8005578 <HAL_TIM_ConfigClockSource+0x450>)
 80053da:	f7fb fc0b 	bl	8000bf4 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d013      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x2e6>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ee:	d00e      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x2e6>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053f8:	d009      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x2e6>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005402:	d004      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x2e6>
 8005404:	f241 5167 	movw	r1, #5479	@ 0x1567
 8005408:	485b      	ldr	r0, [pc, #364]	@ (8005578 <HAL_TIM_ConfigClockSource+0x450>)
 800540a:	f7fb fbf3 	bl	8000bf4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005416:	d014      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x31a>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d010      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x31a>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00c      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x31a>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d008      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x31a>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b0a      	cmp	r3, #10
 8005436:	d004      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x31a>
 8005438:	f241 5168 	movw	r1, #5480	@ 0x1568
 800543c:	484e      	ldr	r0, [pc, #312]	@ (8005578 <HAL_TIM_ConfigClockSource+0x450>)
 800543e:	f7fb fbd9 	bl	8000bf4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2b0f      	cmp	r3, #15
 8005448:	d904      	bls.n	8005454 <HAL_TIM_ConfigClockSource+0x32c>
 800544a:	f241 5169 	movw	r1, #5481	@ 0x1569
 800544e:	484a      	ldr	r0, [pc, #296]	@ (8005578 <HAL_TIM_ConfigClockSource+0x450>)
 8005450:	f7fb fbd0 	bl	8000bf4 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005464:	f000 fe90 	bl	8006188 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005476:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]
      break;
 8005480:	e1e6      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x728>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a37      	ldr	r2, [pc, #220]	@ (8005564 <HAL_TIM_ConfigClockSource+0x43c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d01d      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x3a0>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005494:	d018      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x3a0>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a33      	ldr	r2, [pc, #204]	@ (8005568 <HAL_TIM_ConfigClockSource+0x440>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d013      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x3a0>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a31      	ldr	r2, [pc, #196]	@ (800556c <HAL_TIM_ConfigClockSource+0x444>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x3a0>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a30      	ldr	r2, [pc, #192]	@ (8005570 <HAL_TIM_ConfigClockSource+0x448>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x3a0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005574 <HAL_TIM_ConfigClockSource+0x44c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x3a0>
 80054be:	f241 517c 	movw	r1, #5500	@ 0x157c
 80054c2:	482d      	ldr	r0, [pc, #180]	@ (8005578 <HAL_TIM_ConfigClockSource+0x450>)
 80054c4:	f7fb fb96 	bl	8000bf4 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d013      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x3d0>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d8:	d00e      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x3d0>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054e2:	d009      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x3d0>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054ec:	d004      	beq.n	80054f8 <HAL_TIM_ConfigClockSource+0x3d0>
 80054ee:	f241 517f 	movw	r1, #5503	@ 0x157f
 80054f2:	4821      	ldr	r0, [pc, #132]	@ (8005578 <HAL_TIM_ConfigClockSource+0x450>)
 80054f4:	f7fb fb7e 	bl	8000bf4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005500:	d014      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x404>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d010      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x404>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x404>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d008      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x404>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b0a      	cmp	r3, #10
 8005520:	d004      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x404>
 8005522:	f44f 51ac 	mov.w	r1, #5504	@ 0x1580
 8005526:	4814      	ldr	r0, [pc, #80]	@ (8005578 <HAL_TIM_ConfigClockSource+0x450>)
 8005528:	f7fb fb64 	bl	8000bf4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b0f      	cmp	r3, #15
 8005532:	d904      	bls.n	800553e <HAL_TIM_ConfigClockSource+0x416>
 8005534:	f241 5181 	movw	r1, #5505	@ 0x1581
 8005538:	480f      	ldr	r0, [pc, #60]	@ (8005578 <HAL_TIM_ConfigClockSource+0x450>)
 800553a:	f7fb fb5b 	bl	8000bf4 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800554e:	f000 fe1b 	bl	8006188 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005560:	609a      	str	r2, [r3, #8]
      break;
 8005562:	e175      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x728>
 8005564:	40010000 	.word	0x40010000
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800
 8005570:	40000c00 	.word	0x40000c00
 8005574:	40010400 	.word	0x40010400
 8005578:	08007ec8 	.word	0x08007ec8
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a5e      	ldr	r2, [pc, #376]	@ (80056fc <HAL_TIM_ConfigClockSource+0x5d4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d027      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x4ae>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558e:	d022      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x4ae>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a5a      	ldr	r2, [pc, #360]	@ (8005700 <HAL_TIM_ConfigClockSource+0x5d8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01d      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x4ae>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a59      	ldr	r2, [pc, #356]	@ (8005704 <HAL_TIM_ConfigClockSource+0x5dc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d018      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x4ae>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a57      	ldr	r2, [pc, #348]	@ (8005708 <HAL_TIM_ConfigClockSource+0x5e0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x4ae>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a56      	ldr	r2, [pc, #344]	@ (800570c <HAL_TIM_ConfigClockSource+0x5e4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00e      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x4ae>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a54      	ldr	r2, [pc, #336]	@ (8005710 <HAL_TIM_ConfigClockSource+0x5e8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d009      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x4ae>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a53      	ldr	r2, [pc, #332]	@ (8005714 <HAL_TIM_ConfigClockSource+0x5ec>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x4ae>
 80055cc:	f241 5190 	movw	r1, #5520	@ 0x1590
 80055d0:	4851      	ldr	r0, [pc, #324]	@ (8005718 <HAL_TIM_ConfigClockSource+0x5f0>)
 80055d2:	f7fb fb0f 	bl	8000bf4 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055de:	d014      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x4e2>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d010      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x4e2>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00c      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x4e2>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d008      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x4e2>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b0a      	cmp	r3, #10
 80055fe:	d004      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x4e2>
 8005600:	f241 5193 	movw	r1, #5523	@ 0x1593
 8005604:	4844      	ldr	r0, [pc, #272]	@ (8005718 <HAL_TIM_ConfigClockSource+0x5f0>)
 8005606:	f7fb faf5 	bl	8000bf4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	2b0f      	cmp	r3, #15
 8005610:	d904      	bls.n	800561c <HAL_TIM_ConfigClockSource+0x4f4>
 8005612:	f241 5194 	movw	r1, #5524	@ 0x1594
 8005616:	4840      	ldr	r0, [pc, #256]	@ (8005718 <HAL_TIM_ConfigClockSource+0x5f0>)
 8005618:	f7fb faec 	bl	8000bf4 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005628:	461a      	mov	r2, r3
 800562a:	f000 fd2f 	bl	800608c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2150      	movs	r1, #80	@ 0x50
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fd89 	bl	800614c <TIM_ITRx_SetConfig>
      break;
 800563a:	e109      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x728>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2e      	ldr	r2, [pc, #184]	@ (80056fc <HAL_TIM_ConfigClockSource+0x5d4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d027      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x56e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800564e:	d022      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x56e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2a      	ldr	r2, [pc, #168]	@ (8005700 <HAL_TIM_ConfigClockSource+0x5d8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01d      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x56e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a29      	ldr	r2, [pc, #164]	@ (8005704 <HAL_TIM_ConfigClockSource+0x5dc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d018      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x56e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a27      	ldr	r2, [pc, #156]	@ (8005708 <HAL_TIM_ConfigClockSource+0x5e0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x56e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a26      	ldr	r2, [pc, #152]	@ (800570c <HAL_TIM_ConfigClockSource+0x5e4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00e      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x56e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a24      	ldr	r2, [pc, #144]	@ (8005710 <HAL_TIM_ConfigClockSource+0x5e8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d009      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x56e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a23      	ldr	r2, [pc, #140]	@ (8005714 <HAL_TIM_ConfigClockSource+0x5ec>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x56e>
 800568c:	f44f 51ad 	mov.w	r1, #5536	@ 0x15a0
 8005690:	4821      	ldr	r0, [pc, #132]	@ (8005718 <HAL_TIM_ConfigClockSource+0x5f0>)
 8005692:	f7fb faaf 	bl	8000bf4 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800569e:	d014      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x5a2>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d010      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x5a2>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00c      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x5a2>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d008      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x5a2>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b0a      	cmp	r3, #10
 80056be:	d004      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x5a2>
 80056c0:	f241 51a3 	movw	r1, #5539	@ 0x15a3
 80056c4:	4814      	ldr	r0, [pc, #80]	@ (8005718 <HAL_TIM_ConfigClockSource+0x5f0>)
 80056c6:	f7fb fa95 	bl	8000bf4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	2b0f      	cmp	r3, #15
 80056d0:	d904      	bls.n	80056dc <HAL_TIM_ConfigClockSource+0x5b4>
 80056d2:	f241 51a4 	movw	r1, #5540	@ 0x15a4
 80056d6:	4810      	ldr	r0, [pc, #64]	@ (8005718 <HAL_TIM_ConfigClockSource+0x5f0>)
 80056d8:	f7fb fa8c 	bl	8000bf4 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056e8:	461a      	mov	r2, r3
 80056ea:	f000 fcfe 	bl	80060ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2160      	movs	r1, #96	@ 0x60
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fd29 	bl	800614c <TIM_ITRx_SetConfig>
      break;
 80056fa:	e0a9      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x728>
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40010400 	.word	0x40010400
 8005710:	40001800 	.word	0x40001800
 8005714:	40014000 	.word	0x40014000
 8005718:	08007ec8 	.word	0x08007ec8
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a52      	ldr	r2, [pc, #328]	@ (800586c <HAL_TIM_ConfigClockSource+0x744>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d027      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x64e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572e:	d022      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x64e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a4e      	ldr	r2, [pc, #312]	@ (8005870 <HAL_TIM_ConfigClockSource+0x748>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01d      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x64e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a4d      	ldr	r2, [pc, #308]	@ (8005874 <HAL_TIM_ConfigClockSource+0x74c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d018      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x64e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a4b      	ldr	r2, [pc, #300]	@ (8005878 <HAL_TIM_ConfigClockSource+0x750>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x64e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a4a      	ldr	r2, [pc, #296]	@ (800587c <HAL_TIM_ConfigClockSource+0x754>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x64e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a48      	ldr	r2, [pc, #288]	@ (8005880 <HAL_TIM_ConfigClockSource+0x758>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x64e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a47      	ldr	r2, [pc, #284]	@ (8005884 <HAL_TIM_ConfigClockSource+0x75c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x64e>
 800576c:	f241 51b0 	movw	r1, #5552	@ 0x15b0
 8005770:	4845      	ldr	r0, [pc, #276]	@ (8005888 <HAL_TIM_ConfigClockSource+0x760>)
 8005772:	f7fb fa3f 	bl	8000bf4 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800577e:	d014      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x682>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d010      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x682>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00c      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x682>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d008      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x682>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b0a      	cmp	r3, #10
 800579e:	d004      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x682>
 80057a0:	f241 51b3 	movw	r1, #5555	@ 0x15b3
 80057a4:	4838      	ldr	r0, [pc, #224]	@ (8005888 <HAL_TIM_ConfigClockSource+0x760>)
 80057a6:	f7fb fa25 	bl	8000bf4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	2b0f      	cmp	r3, #15
 80057b0:	d904      	bls.n	80057bc <HAL_TIM_ConfigClockSource+0x694>
 80057b2:	f241 51b4 	movw	r1, #5556	@ 0x15b4
 80057b6:	4834      	ldr	r0, [pc, #208]	@ (8005888 <HAL_TIM_ConfigClockSource+0x760>)
 80057b8:	f7fb fa1c 	bl	8000bf4 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c8:	461a      	mov	r2, r3
 80057ca:	f000 fc5f 	bl	800608c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2140      	movs	r1, #64	@ 0x40
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fcb9 	bl	800614c <TIM_ITRx_SetConfig>
      break;
 80057da:	e039      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x728>
    case TIM_CLOCKSOURCE_ITR6:
    case TIM_CLOCKSOURCE_ITR7:
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a22      	ldr	r2, [pc, #136]	@ (800586c <HAL_TIM_ConfigClockSource+0x744>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d027      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x70e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ee:	d022      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x70e>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005870 <HAL_TIM_ConfigClockSource+0x748>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01d      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x70e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005874 <HAL_TIM_ConfigClockSource+0x74c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d018      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x70e>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1b      	ldr	r2, [pc, #108]	@ (8005878 <HAL_TIM_ConfigClockSource+0x750>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x70e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1a      	ldr	r2, [pc, #104]	@ (800587c <HAL_TIM_ConfigClockSource+0x754>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x70e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a18      	ldr	r2, [pc, #96]	@ (8005880 <HAL_TIM_ConfigClockSource+0x758>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x70e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a17      	ldr	r2, [pc, #92]	@ (8005884 <HAL_TIM_ConfigClockSource+0x75c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x70e>
 800582c:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 8005830:	4815      	ldr	r0, [pc, #84]	@ (8005888 <HAL_TIM_ConfigClockSource+0x760>)
 8005832:	f7fb f9df 	bl	8000bf4 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4619      	mov	r1, r3
 8005840:	4610      	mov	r0, r2
 8005842:	f000 fc83 	bl	800614c <TIM_ITRx_SetConfig>
      break;
 8005846:	e003      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x728>
    }

    default:
      status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
      break;
 800584c:	e000      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x728>
      break;
 800584e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40010000 	.word	0x40010000
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40000c00 	.word	0x40000c00
 800587c:	40010400 	.word	0x40010400
 8005880:	40001800 	.word	0x40001800
 8005884:	40014000 	.word	0x40014000
 8005888:	08007ec8 	.word	0x08007ec8

0800588c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a43      	ldr	r2, [pc, #268]	@ (80059ac <TIM_Base_SetConfig+0x120>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058aa:	d00f      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a40      	ldr	r2, [pc, #256]	@ (80059b0 <TIM_Base_SetConfig+0x124>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00b      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a3f      	ldr	r2, [pc, #252]	@ (80059b4 <TIM_Base_SetConfig+0x128>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a3e      	ldr	r2, [pc, #248]	@ (80059b8 <TIM_Base_SetConfig+0x12c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a3d      	ldr	r2, [pc, #244]	@ (80059bc <TIM_Base_SetConfig+0x130>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a32      	ldr	r2, [pc, #200]	@ (80059ac <TIM_Base_SetConfig+0x120>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01f      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ec:	d01b      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2f      	ldr	r2, [pc, #188]	@ (80059b0 <TIM_Base_SetConfig+0x124>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d017      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2e      	ldr	r2, [pc, #184]	@ (80059b4 <TIM_Base_SetConfig+0x128>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2d      	ldr	r2, [pc, #180]	@ (80059b8 <TIM_Base_SetConfig+0x12c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00f      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2c      	ldr	r2, [pc, #176]	@ (80059bc <TIM_Base_SetConfig+0x130>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00b      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2b      	ldr	r2, [pc, #172]	@ (80059c0 <TIM_Base_SetConfig+0x134>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a2a      	ldr	r2, [pc, #168]	@ (80059c4 <TIM_Base_SetConfig+0x138>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_Base_SetConfig+0x9a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a29      	ldr	r2, [pc, #164]	@ (80059c8 <TIM_Base_SetConfig+0x13c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d108      	bne.n	8005938 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800592c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a14      	ldr	r2, [pc, #80]	@ (80059ac <TIM_Base_SetConfig+0x120>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00f      	beq.n	800597e <TIM_Base_SetConfig+0xf2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a16      	ldr	r2, [pc, #88]	@ (80059bc <TIM_Base_SetConfig+0x130>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00b      	beq.n	800597e <TIM_Base_SetConfig+0xf2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <TIM_Base_SetConfig+0x134>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d007      	beq.n	800597e <TIM_Base_SetConfig+0xf2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a14      	ldr	r2, [pc, #80]	@ (80059c4 <TIM_Base_SetConfig+0x138>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d003      	beq.n	800597e <TIM_Base_SetConfig+0xf2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a13      	ldr	r2, [pc, #76]	@ (80059c8 <TIM_Base_SetConfig+0x13c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d103      	bne.n	8005986 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f043 0204 	orr.w	r2, r3, #4
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]
}
 800599e:	bf00      	nop
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40010400 	.word	0x40010400
 80059c0:	40014000 	.word	0x40014000
 80059c4:	40014400 	.word	0x40014400
 80059c8:	40014800 	.word	0x40014800

080059cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f023 0201 	bic.w	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005b24 <TIM_OC1_SetConfig+0x158>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0303 	bic.w	r3, r3, #3
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f023 0302 	bic.w	r3, r3, #2
 8005a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a41      	ldr	r2, [pc, #260]	@ (8005b28 <TIM_OC1_SetConfig+0x15c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00f      	beq.n	8005a48 <TIM_OC1_SetConfig+0x7c>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a40      	ldr	r2, [pc, #256]	@ (8005b2c <TIM_OC1_SetConfig+0x160>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00b      	beq.n	8005a48 <TIM_OC1_SetConfig+0x7c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a3f      	ldr	r2, [pc, #252]	@ (8005b30 <TIM_OC1_SetConfig+0x164>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d007      	beq.n	8005a48 <TIM_OC1_SetConfig+0x7c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a3e      	ldr	r2, [pc, #248]	@ (8005b34 <TIM_OC1_SetConfig+0x168>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_OC1_SetConfig+0x7c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a3d      	ldr	r2, [pc, #244]	@ (8005b38 <TIM_OC1_SetConfig+0x16c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d119      	bne.n	8005a7c <TIM_OC1_SetConfig+0xb0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <TIM_OC1_SetConfig+0x96>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d004      	beq.n	8005a62 <TIM_OC1_SetConfig+0x96>
 8005a58:	f641 316b 	movw	r1, #7019	@ 0x1b6b
 8005a5c:	4837      	ldr	r0, [pc, #220]	@ (8005b3c <TIM_OC1_SetConfig+0x170>)
 8005a5e:	f7fb f8c9 	bl	8000bf4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f023 0308 	bic.w	r3, r3, #8
 8005a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0304 	bic.w	r3, r3, #4
 8005a7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8005b28 <TIM_OC1_SetConfig+0x15c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00f      	beq.n	8005aa4 <TIM_OC1_SetConfig+0xd8>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a29      	ldr	r2, [pc, #164]	@ (8005b2c <TIM_OC1_SetConfig+0x160>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00b      	beq.n	8005aa4 <TIM_OC1_SetConfig+0xd8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a28      	ldr	r2, [pc, #160]	@ (8005b30 <TIM_OC1_SetConfig+0x164>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d007      	beq.n	8005aa4 <TIM_OC1_SetConfig+0xd8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a27      	ldr	r2, [pc, #156]	@ (8005b34 <TIM_OC1_SetConfig+0x168>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_OC1_SetConfig+0xd8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a26      	ldr	r2, [pc, #152]	@ (8005b38 <TIM_OC1_SetConfig+0x16c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d12d      	bne.n	8005b00 <TIM_OC1_SetConfig+0x134>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aac:	d008      	beq.n	8005ac0 <TIM_OC1_SetConfig+0xf4>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d004      	beq.n	8005ac0 <TIM_OC1_SetConfig+0xf4>
 8005ab6:	f641 3178 	movw	r1, #7032	@ 0x1b78
 8005aba:	4820      	ldr	r0, [pc, #128]	@ (8005b3c <TIM_OC1_SetConfig+0x170>)
 8005abc:	f7fb f89a 	bl	8000bf4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac8:	d008      	beq.n	8005adc <TIM_OC1_SetConfig+0x110>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d004      	beq.n	8005adc <TIM_OC1_SetConfig+0x110>
 8005ad2:	f641 3179 	movw	r1, #7033	@ 0x1b79
 8005ad6:	4819      	ldr	r0, [pc, #100]	@ (8005b3c <TIM_OC1_SetConfig+0x170>)
 8005ad8:	f7fb f88c 	bl	8000bf4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	fffeff8f 	.word	0xfffeff8f
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40010400 	.word	0x40010400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800
 8005b3c:	08007ec8 	.word	0x08007ec8

08005b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	f023 0210 	bic.w	r2, r3, #16
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4b47      	ldr	r3, [pc, #284]	@ (8005c88 <TIM_OC2_SetConfig+0x148>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 0320 	bic.w	r3, r3, #32
 8005b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a3c      	ldr	r2, [pc, #240]	@ (8005c8c <TIM_OC2_SetConfig+0x14c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC2_SetConfig+0x68>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a3b      	ldr	r2, [pc, #236]	@ (8005c90 <TIM_OC2_SetConfig+0x150>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d11a      	bne.n	8005bde <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d008      	beq.n	8005bc2 <TIM_OC2_SetConfig+0x82>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d004      	beq.n	8005bc2 <TIM_OC2_SetConfig+0x82>
 8005bb8:	f641 31b7 	movw	r1, #7095	@ 0x1bb7
 8005bbc:	4835      	ldr	r0, [pc, #212]	@ (8005c94 <TIM_OC2_SetConfig+0x154>)
 8005bbe:	f7fb f819 	bl	8000bf4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c8c <TIM_OC2_SetConfig+0x14c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00f      	beq.n	8005c06 <TIM_OC2_SetConfig+0xc6>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a29      	ldr	r2, [pc, #164]	@ (8005c90 <TIM_OC2_SetConfig+0x150>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00b      	beq.n	8005c06 <TIM_OC2_SetConfig+0xc6>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a29      	ldr	r2, [pc, #164]	@ (8005c98 <TIM_OC2_SetConfig+0x158>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d007      	beq.n	8005c06 <TIM_OC2_SetConfig+0xc6>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a28      	ldr	r2, [pc, #160]	@ (8005c9c <TIM_OC2_SetConfig+0x15c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_OC2_SetConfig+0xc6>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a27      	ldr	r2, [pc, #156]	@ (8005ca0 <TIM_OC2_SetConfig+0x160>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d12f      	bne.n	8005c66 <TIM_OC2_SetConfig+0x126>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c0e:	d008      	beq.n	8005c22 <TIM_OC2_SetConfig+0xe2>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <TIM_OC2_SetConfig+0xe2>
 8005c18:	f641 31c4 	movw	r1, #7108	@ 0x1bc4
 8005c1c:	481d      	ldr	r0, [pc, #116]	@ (8005c94 <TIM_OC2_SetConfig+0x154>)
 8005c1e:	f7fa ffe9 	bl	8000bf4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c2a:	d008      	beq.n	8005c3e <TIM_OC2_SetConfig+0xfe>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <TIM_OC2_SetConfig+0xfe>
 8005c34:	f641 31c5 	movw	r1, #7109	@ 0x1bc5
 8005c38:	4816      	ldr	r0, [pc, #88]	@ (8005c94 <TIM_OC2_SetConfig+0x154>)
 8005c3a:	f7fa ffdb 	bl	8000bf4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	feff8fff 	.word	0xfeff8fff
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400
 8005c94:	08007ec8 	.word	0x08007ec8
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800

08005ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4b47      	ldr	r3, [pc, #284]	@ (8005dec <TIM_OC3_SetConfig+0x148>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8005df0 <TIM_OC3_SetConfig+0x14c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d003      	beq.n	8005d0a <TIM_OC3_SetConfig+0x66>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a3b      	ldr	r2, [pc, #236]	@ (8005df4 <TIM_OC3_SetConfig+0x150>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d11a      	bne.n	8005d40 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <TIM_OC3_SetConfig+0x80>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d004      	beq.n	8005d24 <TIM_OC3_SetConfig+0x80>
 8005d1a:	f641 4102 	movw	r1, #7170	@ 0x1c02
 8005d1e:	4836      	ldr	r0, [pc, #216]	@ (8005df8 <TIM_OC3_SetConfig+0x154>)
 8005d20:	f7fa ff68 	bl	8000bf4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	021b      	lsls	r3, r3, #8
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a2b      	ldr	r2, [pc, #172]	@ (8005df0 <TIM_OC3_SetConfig+0x14c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00f      	beq.n	8005d68 <TIM_OC3_SetConfig+0xc4>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8005df4 <TIM_OC3_SetConfig+0x150>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00b      	beq.n	8005d68 <TIM_OC3_SetConfig+0xc4>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a2a      	ldr	r2, [pc, #168]	@ (8005dfc <TIM_OC3_SetConfig+0x158>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d007      	beq.n	8005d68 <TIM_OC3_SetConfig+0xc4>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a29      	ldr	r2, [pc, #164]	@ (8005e00 <TIM_OC3_SetConfig+0x15c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC3_SetConfig+0xc4>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a28      	ldr	r2, [pc, #160]	@ (8005e04 <TIM_OC3_SetConfig+0x160>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d12f      	bne.n	8005dc8 <TIM_OC3_SetConfig+0x124>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d70:	d008      	beq.n	8005d84 <TIM_OC3_SetConfig+0xe0>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <TIM_OC3_SetConfig+0xe0>
 8005d7a:	f641 410f 	movw	r1, #7183	@ 0x1c0f
 8005d7e:	481e      	ldr	r0, [pc, #120]	@ (8005df8 <TIM_OC3_SetConfig+0x154>)
 8005d80:	f7fa ff38 	bl	8000bf4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d8c:	d008      	beq.n	8005da0 <TIM_OC3_SetConfig+0xfc>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <TIM_OC3_SetConfig+0xfc>
 8005d96:	f641 4110 	movw	r1, #7184	@ 0x1c10
 8005d9a:	4817      	ldr	r0, [pc, #92]	@ (8005df8 <TIM_OC3_SetConfig+0x154>)
 8005d9c:	f7fa ff2a 	bl	8000bf4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	fffeff8f 	.word	0xfffeff8f
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40010400 	.word	0x40010400
 8005df8:	08007ec8 	.word	0x08007ec8
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800

08005e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4b2a      	ldr	r3, [pc, #168]	@ (8005edc <TIM_OC4_SetConfig+0xd4>)
 8005e34:	4013      	ands	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	031b      	lsls	r3, r3, #12
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee0 <TIM_OC4_SetConfig+0xd8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00f      	beq.n	8005e88 <TIM_OC4_SetConfig+0x80>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ee4 <TIM_OC4_SetConfig+0xdc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00b      	beq.n	8005e88 <TIM_OC4_SetConfig+0x80>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee8 <TIM_OC4_SetConfig+0xe0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d007      	beq.n	8005e88 <TIM_OC4_SetConfig+0x80>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005eec <TIM_OC4_SetConfig+0xe4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d003      	beq.n	8005e88 <TIM_OC4_SetConfig+0x80>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef0 <TIM_OC4_SetConfig+0xe8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d117      	bne.n	8005eb8 <TIM_OC4_SetConfig+0xb0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e90:	d008      	beq.n	8005ea4 <TIM_OC4_SetConfig+0x9c>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d004      	beq.n	8005ea4 <TIM_OC4_SetConfig+0x9c>
 8005e9a:	f641 414f 	movw	r1, #7247	@ 0x1c4f
 8005e9e:	4815      	ldr	r0, [pc, #84]	@ (8005ef4 <TIM_OC4_SetConfig+0xec>)
 8005ea0:	f7fa fea8 	bl	8000bf4 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	019b      	lsls	r3, r3, #6
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	feff8fff 	.word	0xfeff8fff
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40010400 	.word	0x40010400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800
 8005ef4:	08007ec8 	.word	0x08007ec8

08005ef8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4b21      	ldr	r3, [pc, #132]	@ (8005fa8 <TIM_OC5_SetConfig+0xb0>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	041b      	lsls	r3, r3, #16
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a18      	ldr	r2, [pc, #96]	@ (8005fac <TIM_OC5_SetConfig+0xb4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00f      	beq.n	8005f6e <TIM_OC5_SetConfig+0x76>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a17      	ldr	r2, [pc, #92]	@ (8005fb0 <TIM_OC5_SetConfig+0xb8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00b      	beq.n	8005f6e <TIM_OC5_SetConfig+0x76>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a16      	ldr	r2, [pc, #88]	@ (8005fb4 <TIM_OC5_SetConfig+0xbc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d007      	beq.n	8005f6e <TIM_OC5_SetConfig+0x76>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a15      	ldr	r2, [pc, #84]	@ (8005fb8 <TIM_OC5_SetConfig+0xc0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d003      	beq.n	8005f6e <TIM_OC5_SetConfig+0x76>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a14      	ldr	r2, [pc, #80]	@ (8005fbc <TIM_OC5_SetConfig+0xc4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d109      	bne.n	8005f82 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	021b      	lsls	r3, r3, #8
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	621a      	str	r2, [r3, #32]
}
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	fffeff8f 	.word	0xfffeff8f
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40010400 	.word	0x40010400
 8005fb4:	40014000 	.word	0x40014000
 8005fb8:	40014400 	.word	0x40014400
 8005fbc:	40014800 	.word	0x40014800

08005fc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4b22      	ldr	r3, [pc, #136]	@ (8006074 <TIM_OC6_SetConfig+0xb4>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	051b      	lsls	r3, r3, #20
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a19      	ldr	r2, [pc, #100]	@ (8006078 <TIM_OC6_SetConfig+0xb8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00f      	beq.n	8006038 <TIM_OC6_SetConfig+0x78>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a18      	ldr	r2, [pc, #96]	@ (800607c <TIM_OC6_SetConfig+0xbc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00b      	beq.n	8006038 <TIM_OC6_SetConfig+0x78>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a17      	ldr	r2, [pc, #92]	@ (8006080 <TIM_OC6_SetConfig+0xc0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <TIM_OC6_SetConfig+0x78>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a16      	ldr	r2, [pc, #88]	@ (8006084 <TIM_OC6_SetConfig+0xc4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_OC6_SetConfig+0x78>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a15      	ldr	r2, [pc, #84]	@ (8006088 <TIM_OC6_SetConfig+0xc8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d109      	bne.n	800604c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800603e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	029b      	lsls	r3, r3, #10
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	feff8fff 	.word	0xfeff8fff
 8006078:	40010000 	.word	0x40010000
 800607c:	40010400 	.word	0x40010400
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800

0800608c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f023 0201 	bic.w	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 030a 	bic.w	r3, r3, #10
 80060c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	621a      	str	r2, [r3, #32]
}
 80060de:	bf00      	nop
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b087      	sub	sp, #28
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	f023 0210 	bic.w	r2, r3, #16
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	031b      	lsls	r3, r3, #12
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006126:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4b09      	ldr	r3, [pc, #36]	@ (8006184 <TIM_ITRx_SetConfig+0x38>)
 8006160:	4013      	ands	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	f043 0307 	orr.w	r3, r3, #7
 800616e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	609a      	str	r2, [r3, #8]
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	ffcfff8f 	.word	0xffcfff8f

08006188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	021a      	lsls	r2, r3, #8
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	609a      	str	r2, [r3, #8]
}
 80061bc:	bf00      	nop
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4a35      	ldr	r2, [pc, #212]	@ (80062ac <TIM_CCxChannelCmd+0xe4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d030      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e2:	d02c      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4a32      	ldr	r2, [pc, #200]	@ (80062b0 <TIM_CCxChannelCmd+0xe8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d028      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a31      	ldr	r2, [pc, #196]	@ (80062b4 <TIM_CCxChannelCmd+0xec>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d024      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4a30      	ldr	r2, [pc, #192]	@ (80062b8 <TIM_CCxChannelCmd+0xf0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d020      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4a2f      	ldr	r2, [pc, #188]	@ (80062bc <TIM_CCxChannelCmd+0xf4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d01c      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4a2e      	ldr	r2, [pc, #184]	@ (80062c0 <TIM_CCxChannelCmd+0xf8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d018      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a2d      	ldr	r2, [pc, #180]	@ (80062c4 <TIM_CCxChannelCmd+0xfc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d014      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4a2c      	ldr	r2, [pc, #176]	@ (80062c8 <TIM_CCxChannelCmd+0x100>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d010      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4a2b      	ldr	r2, [pc, #172]	@ (80062cc <TIM_CCxChannelCmd+0x104>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00c      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4a2a      	ldr	r2, [pc, #168]	@ (80062d0 <TIM_CCxChannelCmd+0x108>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d008      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4a29      	ldr	r2, [pc, #164]	@ (80062d4 <TIM_CCxChannelCmd+0x10c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d004      	beq.n	800623e <TIM_CCxChannelCmd+0x76>
 8006234:	f44f 51f6 	mov.w	r1, #7872	@ 0x1ec0
 8006238:	4827      	ldr	r0, [pc, #156]	@ (80062d8 <TIM_CCxChannelCmd+0x110>)
 800623a:	f7fa fcdb 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d016      	beq.n	8006272 <TIM_CCxChannelCmd+0xaa>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b04      	cmp	r3, #4
 8006248:	d013      	beq.n	8006272 <TIM_CCxChannelCmd+0xaa>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d010      	beq.n	8006272 <TIM_CCxChannelCmd+0xaa>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b0c      	cmp	r3, #12
 8006254:	d00d      	beq.n	8006272 <TIM_CCxChannelCmd+0xaa>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b10      	cmp	r3, #16
 800625a:	d00a      	beq.n	8006272 <TIM_CCxChannelCmd+0xaa>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b14      	cmp	r3, #20
 8006260:	d007      	beq.n	8006272 <TIM_CCxChannelCmd+0xaa>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b3c      	cmp	r3, #60	@ 0x3c
 8006266:	d004      	beq.n	8006272 <TIM_CCxChannelCmd+0xaa>
 8006268:	f641 61c1 	movw	r1, #7873	@ 0x1ec1
 800626c:	481a      	ldr	r0, [pc, #104]	@ (80062d8 <TIM_CCxChannelCmd+0x110>)
 800626e:	f7fa fcc1 	bl	8000bf4 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	2201      	movs	r2, #1
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1a      	ldr	r2, [r3, #32]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	43db      	mvns	r3, r3
 8006288:	401a      	ands	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	fa01 f303 	lsl.w	r3, r1, r3
 800629e:	431a      	orrs	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	bf00      	nop
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40010400 	.word	0x40010400
 80062c0:	40001800 	.word	0x40001800
 80062c4:	40001c00 	.word	0x40001c00
 80062c8:	40002000 	.word	0x40002000
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40014400 	.word	0x40014400
 80062d4:	40014800 	.word	0x40014800
 80062d8:	08007ec8 	.word	0x08007ec8

080062dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a37      	ldr	r2, [pc, #220]	@ (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d031      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f8:	d02c      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a33      	ldr	r2, [pc, #204]	@ (80063cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d027      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a31      	ldr	r2, [pc, #196]	@ (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d022      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a30      	ldr	r2, [pc, #192]	@ (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d01d      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a2e      	ldr	r2, [pc, #184]	@ (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d018      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a2d      	ldr	r2, [pc, #180]	@ (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d013      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a2b      	ldr	r2, [pc, #172]	@ (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00e      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a2a      	ldr	r2, [pc, #168]	@ (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d009      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a28      	ldr	r2, [pc, #160]	@ (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d004      	beq.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800634a:	f240 71cb 	movw	r1, #1995	@ 0x7cb
 800634e:	4827      	ldr	r0, [pc, #156]	@ (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006350:	f7fa fc50 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d020      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b10      	cmp	r3, #16
 8006362:	d01c      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b20      	cmp	r3, #32
 800636a:	d018      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b30      	cmp	r3, #48	@ 0x30
 8006372:	d014      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d010      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b50      	cmp	r3, #80	@ 0x50
 8006382:	d00c      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b60      	cmp	r3, #96	@ 0x60
 800638a:	d008      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b70      	cmp	r3, #112	@ 0x70
 8006392:	d004      	beq.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006394:	f240 71cc 	movw	r1, #1996	@ 0x7cc
 8006398:	4814      	ldr	r0, [pc, #80]	@ (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800639a:	f7fa fc2b 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	2b80      	cmp	r3, #128	@ 0x80
 80063a4:	d008      	beq.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80063ae:	f240 71cd 	movw	r1, #1997	@ 0x7cd
 80063b2:	480e      	ldr	r0, [pc, #56]	@ (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063b4:	f7fa fc1e 	bl	8000bf4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d116      	bne.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80063c2:	2302      	movs	r3, #2
 80063c4:	e0db      	b.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x2a2>
 80063c6:	bf00      	nop
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40000400 	.word	0x40000400
 80063d0:	40000800 	.word	0x40000800
 80063d4:	40000c00 	.word	0x40000c00
 80063d8:	40001000 	.word	0x40001000
 80063dc:	40001400 	.word	0x40001400
 80063e0:	40010400 	.word	0x40010400
 80063e4:	40001800 	.word	0x40001800
 80063e8:	40014000 	.word	0x40014000
 80063ec:	08007f34 	.word	0x08007f34
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a5c      	ldr	r2, [pc, #368]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a5b      	ldr	r2, [pc, #364]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d161      	bne.n	80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d054      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006434:	d04f      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800643e:	d04a      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006448:	d045      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006452:	d040      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800645c:	d03b      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006466:	d036      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006470:	d031      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800647a:	d02c      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006484:	d027      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800648e:	d022      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006498:	d01d      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 80064a2:	d018      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80064ac:	d013      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 80064b6:	d00e      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 80064c0:	d009      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 80064ca:	d004      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0x1fa>
 80064cc:	f240 71df 	movw	r1, #2015	@ 0x7df
 80064d0:	482f      	ldr	r0, [pc, #188]	@ (8006590 <HAL_TIMEx_MasterConfigSynchronization+0x2b4>)
 80064d2:	f7fa fb8f 	bl	8000bf4 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a20      	ldr	r2, [pc, #128]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d022      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006514:	d01d      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1e      	ldr	r2, [pc, #120]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0x2b8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d018      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1c      	ldr	r2, [pc, #112]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0x2bc>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d013      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1b      	ldr	r2, [pc, #108]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00e      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a14      	ldr	r2, [pc, #80]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0x2b0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d009      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a17      	ldr	r2, [pc, #92]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d004      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x276>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a15      	ldr	r2, [pc, #84]	@ (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10c      	bne.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0x290>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	4313      	orrs	r3, r2
 8006562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40010400 	.word	0x40010400
 8006590:	08007f34 	.word	0x08007f34
 8006594:	40000400 	.word	0x40000400
 8006598:	40000800 	.word	0x40000800
 800659c:	40000c00 	.word	0x40000c00
 80065a0:	40001800 	.word	0x40001800
 80065a4:	40014000 	.word	0x40014000

080065a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a91      	ldr	r2, [pc, #580]	@ (8006800 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d018      	beq.n	80065f2 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a8f      	ldr	r2, [pc, #572]	@ (8006804 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a8e      	ldr	r2, [pc, #568]	@ (8006808 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00e      	beq.n	80065f2 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a8c      	ldr	r2, [pc, #560]	@ (800680c <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d009      	beq.n	80065f2 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a8b      	ldr	r2, [pc, #556]	@ (8006810 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d004      	beq.n	80065f2 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80065e8:	f640 0114 	movw	r1, #2068	@ 0x814
 80065ec:	4889      	ldr	r0, [pc, #548]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80065ee:	f7fa fb01 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065fa:	d008      	beq.n	800660e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8006604:	f640 0115 	movw	r1, #2069	@ 0x815
 8006608:	4882      	ldr	r0, [pc, #520]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800660a:	f7fa faf3 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006616:	d008      	beq.n	800662a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d004      	beq.n	800662a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8006620:	f640 0116 	movw	r1, #2070	@ 0x816
 8006624:	487b      	ldr	r0, [pc, #492]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8006626:	f7fa fae5 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d013      	beq.n	800665a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800663a:	d00e      	beq.n	800665a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006644:	d009      	beq.n	800665a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800664e:	d004      	beq.n	800665a <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8006650:	f640 0117 	movw	r1, #2071	@ 0x817
 8006654:	486f      	ldr	r0, [pc, #444]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8006656:	f7fa facd 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	2bff      	cmp	r3, #255	@ 0xff
 8006660:	d904      	bls.n	800666c <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 8006662:	f640 0118 	movw	r1, #2072	@ 0x818
 8006666:	486b      	ldr	r0, [pc, #428]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8006668:	f7fa fac4 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006674:	d008      	beq.n	8006688 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800667e:	f640 0119 	movw	r1, #2073	@ 0x819
 8006682:	4864      	ldr	r0, [pc, #400]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8006684:	f7fa fab6 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d009      	beq.n	80066a4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006698:	d004      	beq.n	80066a4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800669a:	f640 011a 	movw	r1, #2074	@ 0x81a
 800669e:	485d      	ldr	r0, [pc, #372]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80066a0:	f7fa faa8 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2b0f      	cmp	r3, #15
 80066aa:	d904      	bls.n	80066b6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80066ac:	f640 011b 	movw	r1, #2075	@ 0x81b
 80066b0:	4858      	ldr	r0, [pc, #352]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80066b2:	f7fa fa9f 	bl	8000bf4 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066be:	d008      	beq.n	80066d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d004      	beq.n	80066d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80066c8:	f640 011c 	movw	r1, #2076	@ 0x81c
 80066cc:	4851      	ldr	r0, [pc, #324]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80066ce:	f7fa fa91 	bl	8000bf4 <assert_failed>
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 80066dc:	2302      	movs	r3, #2
 80066de:	e08a      	b.n	80067f6 <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	041b      	lsls	r3, r3, #16
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a28      	ldr	r2, [pc, #160]	@ (8006800 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a26      	ldr	r2, [pc, #152]	@ (8006804 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d13a      	bne.n	80067e4 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006776:	d008      	beq.n	800678a <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 8006780:	f640 0137 	movw	r1, #2103	@ 0x837
 8006784:	4823      	ldr	r0, [pc, #140]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8006786:	f7fa fa35 	bl	8000bf4 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d009      	beq.n	80067a6 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800679a:	d004      	beq.n	80067a6 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800679c:	f640 0138 	movw	r1, #2104	@ 0x838
 80067a0:	481c      	ldr	r0, [pc, #112]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80067a2:	f7fa fa27 	bl	8000bf4 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067aa:	2b0f      	cmp	r3, #15
 80067ac:	d904      	bls.n	80067b8 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 80067ae:	f640 0139 	movw	r1, #2105	@ 0x839
 80067b2:	4818      	ldr	r0, [pc, #96]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80067b4:	f7fa fa1e 	bl	8000bf4 <assert_failed>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c2:	051b      	lsls	r3, r3, #20
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40010000 	.word	0x40010000
 8006804:	40010400 	.word	0x40010400
 8006808:	40014000 	.word	0x40014000
 800680c:	40014400 	.word	0x40014400
 8006810:	40014800 	.word	0x40014800
 8006814:	08007f34 	.word	0x08007f34

08006818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e0ab      	b.n	8006982 <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d032      	beq.n	8006898 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a55      	ldr	r2, [pc, #340]	@ (800698c <HAL_UART_Init+0x174>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d05f      	beq.n	80068fc <HAL_UART_Init+0xe4>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a53      	ldr	r2, [pc, #332]	@ (8006990 <HAL_UART_Init+0x178>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d05a      	beq.n	80068fc <HAL_UART_Init+0xe4>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a52      	ldr	r2, [pc, #328]	@ (8006994 <HAL_UART_Init+0x17c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d055      	beq.n	80068fc <HAL_UART_Init+0xe4>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a50      	ldr	r2, [pc, #320]	@ (8006998 <HAL_UART_Init+0x180>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d050      	beq.n	80068fc <HAL_UART_Init+0xe4>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a4f      	ldr	r2, [pc, #316]	@ (800699c <HAL_UART_Init+0x184>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d04b      	beq.n	80068fc <HAL_UART_Init+0xe4>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a4d      	ldr	r2, [pc, #308]	@ (80069a0 <HAL_UART_Init+0x188>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d046      	beq.n	80068fc <HAL_UART_Init+0xe4>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a4c      	ldr	r2, [pc, #304]	@ (80069a4 <HAL_UART_Init+0x18c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d041      	beq.n	80068fc <HAL_UART_Init+0xe4>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a4a      	ldr	r2, [pc, #296]	@ (80069a8 <HAL_UART_Init+0x190>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d03c      	beq.n	80068fc <HAL_UART_Init+0xe4>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a49      	ldr	r2, [pc, #292]	@ (80069ac <HAL_UART_Init+0x194>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d037      	beq.n	80068fc <HAL_UART_Init+0xe4>
 800688c:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8006890:	4847      	ldr	r0, [pc, #284]	@ (80069b0 <HAL_UART_Init+0x198>)
 8006892:	f7fa f9af 	bl	8000bf4 <assert_failed>
 8006896:	e031      	b.n	80068fc <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a3b      	ldr	r2, [pc, #236]	@ (800698c <HAL_UART_Init+0x174>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d02c      	beq.n	80068fc <HAL_UART_Init+0xe4>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a3a      	ldr	r2, [pc, #232]	@ (8006990 <HAL_UART_Init+0x178>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d027      	beq.n	80068fc <HAL_UART_Init+0xe4>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a38      	ldr	r2, [pc, #224]	@ (8006994 <HAL_UART_Init+0x17c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d022      	beq.n	80068fc <HAL_UART_Init+0xe4>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a37      	ldr	r2, [pc, #220]	@ (8006998 <HAL_UART_Init+0x180>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d01d      	beq.n	80068fc <HAL_UART_Init+0xe4>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a35      	ldr	r2, [pc, #212]	@ (800699c <HAL_UART_Init+0x184>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d018      	beq.n	80068fc <HAL_UART_Init+0xe4>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a34      	ldr	r2, [pc, #208]	@ (80069a0 <HAL_UART_Init+0x188>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d013      	beq.n	80068fc <HAL_UART_Init+0xe4>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a32      	ldr	r2, [pc, #200]	@ (80069a4 <HAL_UART_Init+0x18c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00e      	beq.n	80068fc <HAL_UART_Init+0xe4>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a31      	ldr	r2, [pc, #196]	@ (80069a8 <HAL_UART_Init+0x190>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d009      	beq.n	80068fc <HAL_UART_Init+0xe4>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a2f      	ldr	r2, [pc, #188]	@ (80069ac <HAL_UART_Init+0x194>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d004      	beq.n	80068fc <HAL_UART_Init+0xe4>
 80068f2:	f240 1143 	movw	r1, #323	@ 0x143
 80068f6:	482e      	ldr	r0, [pc, #184]	@ (80069b0 <HAL_UART_Init+0x198>)
 80068f8:	f7fa f97c 	bl	8000bf4 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f850 	bl	80069b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2224      	movs	r2, #36	@ 0x24
 8006918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 0201 	bic.w	r2, r2, #1
 800692a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_UART_Init+0x122>
  {
    UART_AdvFeatureConfig(huart);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fe8b 	bl	8007650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f844 	bl	80069c8 <UART_SetConfig>
 8006940:	4603      	mov	r3, r0
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_UART_Init+0x132>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e01b      	b.n	8006982 <HAL_UART_Init+0x16a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006958:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006968:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f042 0201 	orr.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 ffdc 	bl	8007938 <UART_CheckIdleState>
 8006980:	4603      	mov	r3, r0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40011000 	.word	0x40011000
 8006990:	40004400 	.word	0x40004400
 8006994:	40004800 	.word	0x40004800
 8006998:	40004c00 	.word	0x40004c00
 800699c:	40005000 	.word	0x40005000
 80069a0:	40011400 	.word	0x40011400
 80069a4:	40007800 	.word	0x40007800
 80069a8:	40007c00 	.word	0x40007c00
 80069ac:	58000c00 	.word	0x58000c00
 80069b0:	08007fa4 	.word	0x08007fa4

080069b4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069cc:	b092      	sub	sp, #72	@ 0x48
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	4a17      	ldr	r2, [pc, #92]	@ (8006a3c <UART_SetConfig+0x74>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d904      	bls.n	80069ec <UART_SetConfig+0x24>
 80069e2:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 80069e6:	4816      	ldr	r0, [pc, #88]	@ (8006a40 <UART_SetConfig+0x78>)
 80069e8:	f7fa f904 	bl	8000bf4 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069f4:	d00d      	beq.n	8006a12 <UART_SetConfig+0x4a>
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d009      	beq.n	8006a12 <UART_SetConfig+0x4a>
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a06:	d004      	beq.n	8006a12 <UART_SetConfig+0x4a>
 8006a08:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8006a0c:	480c      	ldr	r0, [pc, #48]	@ (8006a40 <UART_SetConfig+0x78>)
 8006a0e:	f7fa f8f1 	bl	8000bf4 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a0b      	ldr	r2, [pc, #44]	@ (8006a44 <UART_SetConfig+0x7c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d115      	bne.n	8006a48 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d037      	beq.n	8006a94 <UART_SetConfig+0xcc>
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a2c:	d032      	beq.n	8006a94 <UART_SetConfig+0xcc>
 8006a2e:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 8006a32:	4803      	ldr	r0, [pc, #12]	@ (8006a40 <UART_SetConfig+0x78>)
 8006a34:	f7fa f8de 	bl	8000bf4 <assert_failed>
 8006a38:	e02c      	b.n	8006a94 <UART_SetConfig+0xcc>
 8006a3a:	bf00      	nop
 8006a3c:	00bebc20 	.word	0x00bebc20
 8006a40:	08007fa4 	.word	0x08007fa4
 8006a44:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a50:	d012      	beq.n	8006a78 <UART_SetConfig+0xb0>
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00e      	beq.n	8006a78 <UART_SetConfig+0xb0>
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a62:	d009      	beq.n	8006a78 <UART_SetConfig+0xb0>
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a6c:	d004      	beq.n	8006a78 <UART_SetConfig+0xb0>
 8006a6e:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8006a72:	48a5      	ldr	r0, [pc, #660]	@ (8006d08 <UART_SetConfig+0x340>)
 8006a74:	f7fa f8be 	bl	8000bf4 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d009      	beq.n	8006a94 <UART_SetConfig+0xcc>
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a88:	d004      	beq.n	8006a94 <UART_SetConfig+0xcc>
 8006a8a:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 8006a8e:	489e      	ldr	r0, [pc, #632]	@ (8006d08 <UART_SetConfig+0x340>)
 8006a90:	f7fa f8b0 	bl	8000bf4 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00e      	beq.n	8006aba <UART_SetConfig+0xf2>
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa4:	d009      	beq.n	8006aba <UART_SetConfig+0xf2>
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006aae:	d004      	beq.n	8006aba <UART_SetConfig+0xf2>
 8006ab0:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8006ab4:	4894      	ldr	r0, [pc, #592]	@ (8006d08 <UART_SetConfig+0x340>)
 8006ab6:	f7fa f89d 	bl	8000bf4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f023 030c 	bic.w	r3, r3, #12
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d103      	bne.n	8006ace <UART_SetConfig+0x106>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <UART_SetConfig+0x110>
 8006ace:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8006ad2:	488d      	ldr	r0, [pc, #564]	@ (8006d08 <UART_SetConfig+0x340>)
 8006ad4:	f7fa f88e 	bl	8000bf4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d013      	beq.n	8006b08 <UART_SetConfig+0x140>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae8:	d00e      	beq.n	8006b08 <UART_SetConfig+0x140>
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af2:	d009      	beq.n	8006b08 <UART_SetConfig+0x140>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006afc:	d004      	beq.n	8006b08 <UART_SetConfig+0x140>
 8006afe:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8006b02:	4881      	ldr	r0, [pc, #516]	@ (8006d08 <UART_SetConfig+0x340>)
 8006b04:	f7fa f876 	bl	8000bf4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d009      	beq.n	8006b24 <UART_SetConfig+0x15c>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b18:	d004      	beq.n	8006b24 <UART_SetConfig+0x15c>
 8006b1a:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 8006b1e:	487a      	ldr	r0, [pc, #488]	@ (8006d08 <UART_SetConfig+0x340>)
 8006b20:	f7fa f868 	bl	8000bf4 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d030      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d02c      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d028      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d024      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d020      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b50:	2b05      	cmp	r3, #5
 8006b52:	d01c      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b58:	2b06      	cmp	r3, #6
 8006b5a:	d018      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b60:	2b07      	cmp	r3, #7
 8006b62:	d014      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d010      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b70:	2b09      	cmp	r3, #9
 8006b72:	d00c      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b78:	2b0a      	cmp	r3, #10
 8006b7a:	d008      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b80:	2b0b      	cmp	r3, #11
 8006b82:	d004      	beq.n	8006b8e <UART_SetConfig+0x1c6>
 8006b84:	f640 31f2 	movw	r1, #3058	@ 0xbf2
 8006b88:	485f      	ldr	r0, [pc, #380]	@ (8006d08 <UART_SetConfig+0x340>)
 8006b8a:	f7fa f833 	bl	8000bf4 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	431a      	orrs	r2, r3
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	4b57      	ldr	r3, [pc, #348]	@ (8006d0c <UART_SetConfig+0x344>)
 8006bae:	4013      	ands	r3, r2
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	6812      	ldr	r2, [r2, #0]
 8006bb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a4d      	ldr	r2, [pc, #308]	@ (8006d10 <UART_SetConfig+0x348>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d004      	beq.n	8006bea <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006be6:	4313      	orrs	r3, r2
 8006be8:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	4b48      	ldr	r3, [pc, #288]	@ (8006d14 <UART_SetConfig+0x34c>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	6812      	ldr	r2, [r2, #0]
 8006bf8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c04:	f023 010f 	bic.w	r1, r3, #15
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a3f      	ldr	r2, [pc, #252]	@ (8006d18 <UART_SetConfig+0x350>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	f040 8084 	bne.w	8006d28 <UART_SetConfig+0x360>
 8006c20:	4b3e      	ldr	r3, [pc, #248]	@ (8006d1c <UART_SetConfig+0x354>)
 8006c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c28:	2b28      	cmp	r3, #40	@ 0x28
 8006c2a:	d879      	bhi.n	8006d20 <UART_SetConfig+0x358>
 8006c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <UART_SetConfig+0x26c>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006cd9 	.word	0x08006cd9
 8006c38:	08006d21 	.word	0x08006d21
 8006c3c:	08006d21 	.word	0x08006d21
 8006c40:	08006d21 	.word	0x08006d21
 8006c44:	08006d21 	.word	0x08006d21
 8006c48:	08006d21 	.word	0x08006d21
 8006c4c:	08006d21 	.word	0x08006d21
 8006c50:	08006d21 	.word	0x08006d21
 8006c54:	08006ce1 	.word	0x08006ce1
 8006c58:	08006d21 	.word	0x08006d21
 8006c5c:	08006d21 	.word	0x08006d21
 8006c60:	08006d21 	.word	0x08006d21
 8006c64:	08006d21 	.word	0x08006d21
 8006c68:	08006d21 	.word	0x08006d21
 8006c6c:	08006d21 	.word	0x08006d21
 8006c70:	08006d21 	.word	0x08006d21
 8006c74:	08006ce9 	.word	0x08006ce9
 8006c78:	08006d21 	.word	0x08006d21
 8006c7c:	08006d21 	.word	0x08006d21
 8006c80:	08006d21 	.word	0x08006d21
 8006c84:	08006d21 	.word	0x08006d21
 8006c88:	08006d21 	.word	0x08006d21
 8006c8c:	08006d21 	.word	0x08006d21
 8006c90:	08006d21 	.word	0x08006d21
 8006c94:	08006cf1 	.word	0x08006cf1
 8006c98:	08006d21 	.word	0x08006d21
 8006c9c:	08006d21 	.word	0x08006d21
 8006ca0:	08006d21 	.word	0x08006d21
 8006ca4:	08006d21 	.word	0x08006d21
 8006ca8:	08006d21 	.word	0x08006d21
 8006cac:	08006d21 	.word	0x08006d21
 8006cb0:	08006d21 	.word	0x08006d21
 8006cb4:	08006cf9 	.word	0x08006cf9
 8006cb8:	08006d21 	.word	0x08006d21
 8006cbc:	08006d21 	.word	0x08006d21
 8006cc0:	08006d21 	.word	0x08006d21
 8006cc4:	08006d21 	.word	0x08006d21
 8006cc8:	08006d21 	.word	0x08006d21
 8006ccc:	08006d21 	.word	0x08006d21
 8006cd0:	08006d21 	.word	0x08006d21
 8006cd4:	08006d01 	.word	0x08006d01
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cde:	e22a      	b.n	8007136 <UART_SetConfig+0x76e>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce6:	e226      	b.n	8007136 <UART_SetConfig+0x76e>
 8006ce8:	2308      	movs	r3, #8
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cee:	e222      	b.n	8007136 <UART_SetConfig+0x76e>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e21e      	b.n	8007136 <UART_SetConfig+0x76e>
 8006cf8:	2320      	movs	r3, #32
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	e21a      	b.n	8007136 <UART_SetConfig+0x76e>
 8006d00:	2340      	movs	r3, #64	@ 0x40
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d06:	e216      	b.n	8007136 <UART_SetConfig+0x76e>
 8006d08:	08007fa4 	.word	0x08007fa4
 8006d0c:	cfff69f3 	.word	0xcfff69f3
 8006d10:	58000c00 	.word	0x58000c00
 8006d14:	11fff4ff 	.word	0x11fff4ff
 8006d18:	40011000 	.word	0x40011000
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	2380      	movs	r3, #128	@ 0x80
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d26:	e206      	b.n	8007136 <UART_SetConfig+0x76e>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4ac3      	ldr	r2, [pc, #780]	@ (800703c <UART_SetConfig+0x674>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d130      	bne.n	8006d94 <UART_SetConfig+0x3cc>
 8006d32:	4bc3      	ldr	r3, [pc, #780]	@ (8007040 <UART_SetConfig+0x678>)
 8006d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	d826      	bhi.n	8006d8c <UART_SetConfig+0x3c4>
 8006d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <UART_SetConfig+0x37c>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d5d 	.word	0x08006d5d
 8006d48:	08006d65 	.word	0x08006d65
 8006d4c:	08006d6d 	.word	0x08006d6d
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d62:	e1e8      	b.n	8007136 <UART_SetConfig+0x76e>
 8006d64:	2304      	movs	r3, #4
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d6a:	e1e4      	b.n	8007136 <UART_SetConfig+0x76e>
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d72:	e1e0      	b.n	8007136 <UART_SetConfig+0x76e>
 8006d74:	2310      	movs	r3, #16
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d7a:	e1dc      	b.n	8007136 <UART_SetConfig+0x76e>
 8006d7c:	2320      	movs	r3, #32
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d82:	e1d8      	b.n	8007136 <UART_SetConfig+0x76e>
 8006d84:	2340      	movs	r3, #64	@ 0x40
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8a:	e1d4      	b.n	8007136 <UART_SetConfig+0x76e>
 8006d8c:	2380      	movs	r3, #128	@ 0x80
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d92:	e1d0      	b.n	8007136 <UART_SetConfig+0x76e>
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4aaa      	ldr	r2, [pc, #680]	@ (8007044 <UART_SetConfig+0x67c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d130      	bne.n	8006e00 <UART_SetConfig+0x438>
 8006d9e:	4ba8      	ldr	r3, [pc, #672]	@ (8007040 <UART_SetConfig+0x678>)
 8006da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	2b05      	cmp	r3, #5
 8006da8:	d826      	bhi.n	8006df8 <UART_SetConfig+0x430>
 8006daa:	a201      	add	r2, pc, #4	@ (adr r2, 8006db0 <UART_SetConfig+0x3e8>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dc9 	.word	0x08006dc9
 8006db4:	08006dd1 	.word	0x08006dd1
 8006db8:	08006dd9 	.word	0x08006dd9
 8006dbc:	08006de1 	.word	0x08006de1
 8006dc0:	08006de9 	.word	0x08006de9
 8006dc4:	08006df1 	.word	0x08006df1
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dce:	e1b2      	b.n	8007136 <UART_SetConfig+0x76e>
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd6:	e1ae      	b.n	8007136 <UART_SetConfig+0x76e>
 8006dd8:	2308      	movs	r3, #8
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dde:	e1aa      	b.n	8007136 <UART_SetConfig+0x76e>
 8006de0:	2310      	movs	r3, #16
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de6:	e1a6      	b.n	8007136 <UART_SetConfig+0x76e>
 8006de8:	2320      	movs	r3, #32
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dee:	e1a2      	b.n	8007136 <UART_SetConfig+0x76e>
 8006df0:	2340      	movs	r3, #64	@ 0x40
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df6:	e19e      	b.n	8007136 <UART_SetConfig+0x76e>
 8006df8:	2380      	movs	r3, #128	@ 0x80
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfe:	e19a      	b.n	8007136 <UART_SetConfig+0x76e>
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a90      	ldr	r2, [pc, #576]	@ (8007048 <UART_SetConfig+0x680>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d130      	bne.n	8006e6c <UART_SetConfig+0x4a4>
 8006e0a:	4b8d      	ldr	r3, [pc, #564]	@ (8007040 <UART_SetConfig+0x678>)
 8006e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	2b05      	cmp	r3, #5
 8006e14:	d826      	bhi.n	8006e64 <UART_SetConfig+0x49c>
 8006e16:	a201      	add	r2, pc, #4	@ (adr r2, 8006e1c <UART_SetConfig+0x454>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006e35 	.word	0x08006e35
 8006e20:	08006e3d 	.word	0x08006e3d
 8006e24:	08006e45 	.word	0x08006e45
 8006e28:	08006e4d 	.word	0x08006e4d
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e5d 	.word	0x08006e5d
 8006e34:	2300      	movs	r3, #0
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3a:	e17c      	b.n	8007136 <UART_SetConfig+0x76e>
 8006e3c:	2304      	movs	r3, #4
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e42:	e178      	b.n	8007136 <UART_SetConfig+0x76e>
 8006e44:	2308      	movs	r3, #8
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e4a:	e174      	b.n	8007136 <UART_SetConfig+0x76e>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e52:	e170      	b.n	8007136 <UART_SetConfig+0x76e>
 8006e54:	2320      	movs	r3, #32
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5a:	e16c      	b.n	8007136 <UART_SetConfig+0x76e>
 8006e5c:	2340      	movs	r3, #64	@ 0x40
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e62:	e168      	b.n	8007136 <UART_SetConfig+0x76e>
 8006e64:	2380      	movs	r3, #128	@ 0x80
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e6a:	e164      	b.n	8007136 <UART_SetConfig+0x76e>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a76      	ldr	r2, [pc, #472]	@ (800704c <UART_SetConfig+0x684>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d130      	bne.n	8006ed8 <UART_SetConfig+0x510>
 8006e76:	4b72      	ldr	r3, [pc, #456]	@ (8007040 <UART_SetConfig+0x678>)
 8006e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	d826      	bhi.n	8006ed0 <UART_SetConfig+0x508>
 8006e82:	a201      	add	r2, pc, #4	@ (adr r2, 8006e88 <UART_SetConfig+0x4c0>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006ea1 	.word	0x08006ea1
 8006e8c:	08006ea9 	.word	0x08006ea9
 8006e90:	08006eb1 	.word	0x08006eb1
 8006e94:	08006eb9 	.word	0x08006eb9
 8006e98:	08006ec1 	.word	0x08006ec1
 8006e9c:	08006ec9 	.word	0x08006ec9
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea6:	e146      	b.n	8007136 <UART_SetConfig+0x76e>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eae:	e142      	b.n	8007136 <UART_SetConfig+0x76e>
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb6:	e13e      	b.n	8007136 <UART_SetConfig+0x76e>
 8006eb8:	2310      	movs	r3, #16
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ebe:	e13a      	b.n	8007136 <UART_SetConfig+0x76e>
 8006ec0:	2320      	movs	r3, #32
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec6:	e136      	b.n	8007136 <UART_SetConfig+0x76e>
 8006ec8:	2340      	movs	r3, #64	@ 0x40
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ece:	e132      	b.n	8007136 <UART_SetConfig+0x76e>
 8006ed0:	2380      	movs	r3, #128	@ 0x80
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed6:	e12e      	b.n	8007136 <UART_SetConfig+0x76e>
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a5c      	ldr	r2, [pc, #368]	@ (8007050 <UART_SetConfig+0x688>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d176      	bne.n	8006fd0 <UART_SetConfig+0x608>
 8006ee2:	4b57      	ldr	r3, [pc, #348]	@ (8007040 <UART_SetConfig+0x678>)
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eea:	2b28      	cmp	r3, #40	@ 0x28
 8006eec:	d86c      	bhi.n	8006fc8 <UART_SetConfig+0x600>
 8006eee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef4 <UART_SetConfig+0x52c>)
 8006ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef4:	08006f99 	.word	0x08006f99
 8006ef8:	08006fc9 	.word	0x08006fc9
 8006efc:	08006fc9 	.word	0x08006fc9
 8006f00:	08006fc9 	.word	0x08006fc9
 8006f04:	08006fc9 	.word	0x08006fc9
 8006f08:	08006fc9 	.word	0x08006fc9
 8006f0c:	08006fc9 	.word	0x08006fc9
 8006f10:	08006fc9 	.word	0x08006fc9
 8006f14:	08006fa1 	.word	0x08006fa1
 8006f18:	08006fc9 	.word	0x08006fc9
 8006f1c:	08006fc9 	.word	0x08006fc9
 8006f20:	08006fc9 	.word	0x08006fc9
 8006f24:	08006fc9 	.word	0x08006fc9
 8006f28:	08006fc9 	.word	0x08006fc9
 8006f2c:	08006fc9 	.word	0x08006fc9
 8006f30:	08006fc9 	.word	0x08006fc9
 8006f34:	08006fa9 	.word	0x08006fa9
 8006f38:	08006fc9 	.word	0x08006fc9
 8006f3c:	08006fc9 	.word	0x08006fc9
 8006f40:	08006fc9 	.word	0x08006fc9
 8006f44:	08006fc9 	.word	0x08006fc9
 8006f48:	08006fc9 	.word	0x08006fc9
 8006f4c:	08006fc9 	.word	0x08006fc9
 8006f50:	08006fc9 	.word	0x08006fc9
 8006f54:	08006fb1 	.word	0x08006fb1
 8006f58:	08006fc9 	.word	0x08006fc9
 8006f5c:	08006fc9 	.word	0x08006fc9
 8006f60:	08006fc9 	.word	0x08006fc9
 8006f64:	08006fc9 	.word	0x08006fc9
 8006f68:	08006fc9 	.word	0x08006fc9
 8006f6c:	08006fc9 	.word	0x08006fc9
 8006f70:	08006fc9 	.word	0x08006fc9
 8006f74:	08006fb9 	.word	0x08006fb9
 8006f78:	08006fc9 	.word	0x08006fc9
 8006f7c:	08006fc9 	.word	0x08006fc9
 8006f80:	08006fc9 	.word	0x08006fc9
 8006f84:	08006fc9 	.word	0x08006fc9
 8006f88:	08006fc9 	.word	0x08006fc9
 8006f8c:	08006fc9 	.word	0x08006fc9
 8006f90:	08006fc9 	.word	0x08006fc9
 8006f94:	08006fc1 	.word	0x08006fc1
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9e:	e0ca      	b.n	8007136 <UART_SetConfig+0x76e>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa6:	e0c6      	b.n	8007136 <UART_SetConfig+0x76e>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fae:	e0c2      	b.n	8007136 <UART_SetConfig+0x76e>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb6:	e0be      	b.n	8007136 <UART_SetConfig+0x76e>
 8006fb8:	2320      	movs	r3, #32
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fbe:	e0ba      	b.n	8007136 <UART_SetConfig+0x76e>
 8006fc0:	2340      	movs	r3, #64	@ 0x40
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc6:	e0b6      	b.n	8007136 <UART_SetConfig+0x76e>
 8006fc8:	2380      	movs	r3, #128	@ 0x80
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fce:	e0b2      	b.n	8007136 <UART_SetConfig+0x76e>
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8007054 <UART_SetConfig+0x68c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d13e      	bne.n	8007058 <UART_SetConfig+0x690>
 8006fda:	4b19      	ldr	r3, [pc, #100]	@ (8007040 <UART_SetConfig+0x678>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	2b05      	cmp	r3, #5
 8006fe4:	d826      	bhi.n	8007034 <UART_SetConfig+0x66c>
 8006fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <UART_SetConfig+0x624>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007005 	.word	0x08007005
 8006ff0:	0800700d 	.word	0x0800700d
 8006ff4:	08007015 	.word	0x08007015
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	08007025 	.word	0x08007025
 8007000:	0800702d 	.word	0x0800702d
 8007004:	2300      	movs	r3, #0
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800700a:	e094      	b.n	8007136 <UART_SetConfig+0x76e>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007012:	e090      	b.n	8007136 <UART_SetConfig+0x76e>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701a:	e08c      	b.n	8007136 <UART_SetConfig+0x76e>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007022:	e088      	b.n	8007136 <UART_SetConfig+0x76e>
 8007024:	2320      	movs	r3, #32
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702a:	e084      	b.n	8007136 <UART_SetConfig+0x76e>
 800702c:	2340      	movs	r3, #64	@ 0x40
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007032:	e080      	b.n	8007136 <UART_SetConfig+0x76e>
 8007034:	2380      	movs	r3, #128	@ 0x80
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703a:	e07c      	b.n	8007136 <UART_SetConfig+0x76e>
 800703c:	40004400 	.word	0x40004400
 8007040:	58024400 	.word	0x58024400
 8007044:	40004800 	.word	0x40004800
 8007048:	40004c00 	.word	0x40004c00
 800704c:	40005000 	.word	0x40005000
 8007050:	40011400 	.word	0x40011400
 8007054:	40007800 	.word	0x40007800
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4aae      	ldr	r2, [pc, #696]	@ (8007318 <UART_SetConfig+0x950>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d130      	bne.n	80070c4 <UART_SetConfig+0x6fc>
 8007062:	4bae      	ldr	r3, [pc, #696]	@ (800731c <UART_SetConfig+0x954>)
 8007064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	2b05      	cmp	r3, #5
 800706c:	d826      	bhi.n	80070bc <UART_SetConfig+0x6f4>
 800706e:	a201      	add	r2, pc, #4	@ (adr r2, 8007074 <UART_SetConfig+0x6ac>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	0800708d 	.word	0x0800708d
 8007078:	08007095 	.word	0x08007095
 800707c:	0800709d 	.word	0x0800709d
 8007080:	080070a5 	.word	0x080070a5
 8007084:	080070ad 	.word	0x080070ad
 8007088:	080070b5 	.word	0x080070b5
 800708c:	2300      	movs	r3, #0
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007092:	e050      	b.n	8007136 <UART_SetConfig+0x76e>
 8007094:	2304      	movs	r3, #4
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709a:	e04c      	b.n	8007136 <UART_SetConfig+0x76e>
 800709c:	2308      	movs	r3, #8
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a2:	e048      	b.n	8007136 <UART_SetConfig+0x76e>
 80070a4:	2310      	movs	r3, #16
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070aa:	e044      	b.n	8007136 <UART_SetConfig+0x76e>
 80070ac:	2320      	movs	r3, #32
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b2:	e040      	b.n	8007136 <UART_SetConfig+0x76e>
 80070b4:	2340      	movs	r3, #64	@ 0x40
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ba:	e03c      	b.n	8007136 <UART_SetConfig+0x76e>
 80070bc:	2380      	movs	r3, #128	@ 0x80
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c2:	e038      	b.n	8007136 <UART_SetConfig+0x76e>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a95      	ldr	r2, [pc, #596]	@ (8007320 <UART_SetConfig+0x958>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d130      	bne.n	8007130 <UART_SetConfig+0x768>
 80070ce:	4b93      	ldr	r3, [pc, #588]	@ (800731c <UART_SetConfig+0x954>)
 80070d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	2b05      	cmp	r3, #5
 80070d8:	d826      	bhi.n	8007128 <UART_SetConfig+0x760>
 80070da:	a201      	add	r2, pc, #4	@ (adr r2, 80070e0 <UART_SetConfig+0x718>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	080070f9 	.word	0x080070f9
 80070e4:	08007101 	.word	0x08007101
 80070e8:	08007109 	.word	0x08007109
 80070ec:	08007111 	.word	0x08007111
 80070f0:	08007119 	.word	0x08007119
 80070f4:	08007121 	.word	0x08007121
 80070f8:	2302      	movs	r3, #2
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fe:	e01a      	b.n	8007136 <UART_SetConfig+0x76e>
 8007100:	2304      	movs	r3, #4
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007106:	e016      	b.n	8007136 <UART_SetConfig+0x76e>
 8007108:	2308      	movs	r3, #8
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710e:	e012      	b.n	8007136 <UART_SetConfig+0x76e>
 8007110:	2310      	movs	r3, #16
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007116:	e00e      	b.n	8007136 <UART_SetConfig+0x76e>
 8007118:	2320      	movs	r3, #32
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711e:	e00a      	b.n	8007136 <UART_SetConfig+0x76e>
 8007120:	2340      	movs	r3, #64	@ 0x40
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e006      	b.n	8007136 <UART_SetConfig+0x76e>
 8007128:	2380      	movs	r3, #128	@ 0x80
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712e:	e002      	b.n	8007136 <UART_SetConfig+0x76e>
 8007130:	2380      	movs	r3, #128	@ 0x80
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a79      	ldr	r2, [pc, #484]	@ (8007320 <UART_SetConfig+0x958>)
 800713c:	4293      	cmp	r3, r2
 800713e:	f040 80f7 	bne.w	8007330 <UART_SetConfig+0x968>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007142:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007146:	2b20      	cmp	r3, #32
 8007148:	dc46      	bgt.n	80071d8 <UART_SetConfig+0x810>
 800714a:	2b02      	cmp	r3, #2
 800714c:	db75      	blt.n	800723a <UART_SetConfig+0x872>
 800714e:	3b02      	subs	r3, #2
 8007150:	2b1e      	cmp	r3, #30
 8007152:	d872      	bhi.n	800723a <UART_SetConfig+0x872>
 8007154:	a201      	add	r2, pc, #4	@ (adr r2, 800715c <UART_SetConfig+0x794>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	080071df 	.word	0x080071df
 8007160:	0800723b 	.word	0x0800723b
 8007164:	080071e7 	.word	0x080071e7
 8007168:	0800723b 	.word	0x0800723b
 800716c:	0800723b 	.word	0x0800723b
 8007170:	0800723b 	.word	0x0800723b
 8007174:	080071f7 	.word	0x080071f7
 8007178:	0800723b 	.word	0x0800723b
 800717c:	0800723b 	.word	0x0800723b
 8007180:	0800723b 	.word	0x0800723b
 8007184:	0800723b 	.word	0x0800723b
 8007188:	0800723b 	.word	0x0800723b
 800718c:	0800723b 	.word	0x0800723b
 8007190:	0800723b 	.word	0x0800723b
 8007194:	08007207 	.word	0x08007207
 8007198:	0800723b 	.word	0x0800723b
 800719c:	0800723b 	.word	0x0800723b
 80071a0:	0800723b 	.word	0x0800723b
 80071a4:	0800723b 	.word	0x0800723b
 80071a8:	0800723b 	.word	0x0800723b
 80071ac:	0800723b 	.word	0x0800723b
 80071b0:	0800723b 	.word	0x0800723b
 80071b4:	0800723b 	.word	0x0800723b
 80071b8:	0800723b 	.word	0x0800723b
 80071bc:	0800723b 	.word	0x0800723b
 80071c0:	0800723b 	.word	0x0800723b
 80071c4:	0800723b 	.word	0x0800723b
 80071c8:	0800723b 	.word	0x0800723b
 80071cc:	0800723b 	.word	0x0800723b
 80071d0:	0800723b 	.word	0x0800723b
 80071d4:	0800722d 	.word	0x0800722d
 80071d8:	2b40      	cmp	r3, #64	@ 0x40
 80071da:	d02a      	beq.n	8007232 <UART_SetConfig+0x86a>
 80071dc:	e02d      	b.n	800723a <UART_SetConfig+0x872>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80071de:	f7fc fc95 	bl	8003b0c <HAL_RCCEx_GetD3PCLK1Freq>
 80071e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071e4:	e02f      	b.n	8007246 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fc fca4 	bl	8003b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f4:	e027      	b.n	8007246 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071f6:	f107 0318 	add.w	r3, r7, #24
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fc fdf0 	bl	8003de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007204:	e01f      	b.n	8007246 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007206:	4b45      	ldr	r3, [pc, #276]	@ (800731c <UART_SetConfig+0x954>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d009      	beq.n	8007226 <UART_SetConfig+0x85e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007212:	4b42      	ldr	r3, [pc, #264]	@ (800731c <UART_SetConfig+0x954>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	08db      	lsrs	r3, r3, #3
 8007218:	f003 0303 	and.w	r3, r3, #3
 800721c:	4a41      	ldr	r2, [pc, #260]	@ (8007324 <UART_SetConfig+0x95c>)
 800721e:	fa22 f303 	lsr.w	r3, r2, r3
 8007222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007224:	e00f      	b.n	8007246 <UART_SetConfig+0x87e>
          pclk = (uint32_t) HSI_VALUE;
 8007226:	4b3f      	ldr	r3, [pc, #252]	@ (8007324 <UART_SetConfig+0x95c>)
 8007228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800722a:	e00c      	b.n	8007246 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800722c:	4b3e      	ldr	r3, [pc, #248]	@ (8007328 <UART_SetConfig+0x960>)
 800722e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007230:	e009      	b.n	8007246 <UART_SetConfig+0x87e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007238:	e005      	b.n	8007246 <UART_SetConfig+0x87e>
      default:
        pclk = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007244:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 81e3 	beq.w	8007614 <UART_SetConfig+0xc4c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007252:	4a36      	ldr	r2, [pc, #216]	@ (800732c <UART_SetConfig+0x964>)
 8007254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007258:	461a      	mov	r2, r3
 800725a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800725c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007260:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	4413      	add	r3, r2
 800726c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800726e:	429a      	cmp	r2, r3
 8007270:	d305      	bcc.n	800727e <UART_SetConfig+0x8b6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800727a:	429a      	cmp	r2, r3
 800727c:	d903      	bls.n	8007286 <UART_SetConfig+0x8be>
      {
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007284:	e1c6      	b.n	8007614 <UART_SetConfig+0xc4c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007288:	2200      	movs	r2, #0
 800728a:	60bb      	str	r3, [r7, #8]
 800728c:	60fa      	str	r2, [r7, #12]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007292:	4a26      	ldr	r2, [pc, #152]	@ (800732c <UART_SetConfig+0x964>)
 8007294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007298:	b29b      	uxth	r3, r3
 800729a:	2200      	movs	r2, #0
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072a8:	f7f9 f816 	bl	80002d8 <__aeabi_uldivmod>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4610      	mov	r0, r2
 80072b2:	4619      	mov	r1, r3
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	020b      	lsls	r3, r1, #8
 80072be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072c2:	0202      	lsls	r2, r0, #8
 80072c4:	6979      	ldr	r1, [r7, #20]
 80072c6:	6849      	ldr	r1, [r1, #4]
 80072c8:	0849      	lsrs	r1, r1, #1
 80072ca:	2000      	movs	r0, #0
 80072cc:	460c      	mov	r4, r1
 80072ce:	4605      	mov	r5, r0
 80072d0:	eb12 0804 	adds.w	r8, r2, r4
 80072d4:	eb43 0905 	adc.w	r9, r3, r5
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	469a      	mov	sl, r3
 80072e0:	4693      	mov	fp, r2
 80072e2:	4652      	mov	r2, sl
 80072e4:	465b      	mov	r3, fp
 80072e6:	4640      	mov	r0, r8
 80072e8:	4649      	mov	r1, r9
 80072ea:	f7f8 fff5 	bl	80002d8 <__aeabi_uldivmod>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	4613      	mov	r3, r2
 80072f4:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072fc:	d308      	bcc.n	8007310 <UART_SetConfig+0x948>
 80072fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007300:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007304:	d204      	bcs.n	8007310 <UART_SetConfig+0x948>
        {
          huart->Instance->BRR = usartdiv;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800730c:	60da      	str	r2, [r3, #12]
 800730e:	e181      	b.n	8007614 <UART_SetConfig+0xc4c>
        }
        else
        {
          ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007316:	e17d      	b.n	8007614 <UART_SetConfig+0xc4c>
 8007318:	40007c00 	.word	0x40007c00
 800731c:	58024400 	.word	0x58024400
 8007320:	58000c00 	.word	0x58000c00
 8007324:	03d09000 	.word	0x03d09000
 8007328:	003d0900 	.word	0x003d0900
 800732c:	0800802c 	.word	0x0800802c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007338:	f040 80be 	bne.w	80074b8 <UART_SetConfig+0xaf0>
  {
    switch (clocksource)
 800733c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007340:	2b20      	cmp	r3, #32
 8007342:	dc49      	bgt.n	80073d8 <UART_SetConfig+0xa10>
 8007344:	2b00      	cmp	r3, #0
 8007346:	db7c      	blt.n	8007442 <UART_SetConfig+0xa7a>
 8007348:	2b20      	cmp	r3, #32
 800734a:	d87a      	bhi.n	8007442 <UART_SetConfig+0xa7a>
 800734c:	a201      	add	r2, pc, #4	@ (adr r2, 8007354 <UART_SetConfig+0x98c>)
 800734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007352:	bf00      	nop
 8007354:	080073df 	.word	0x080073df
 8007358:	080073e7 	.word	0x080073e7
 800735c:	08007443 	.word	0x08007443
 8007360:	08007443 	.word	0x08007443
 8007364:	080073ef 	.word	0x080073ef
 8007368:	08007443 	.word	0x08007443
 800736c:	08007443 	.word	0x08007443
 8007370:	08007443 	.word	0x08007443
 8007374:	080073ff 	.word	0x080073ff
 8007378:	08007443 	.word	0x08007443
 800737c:	08007443 	.word	0x08007443
 8007380:	08007443 	.word	0x08007443
 8007384:	08007443 	.word	0x08007443
 8007388:	08007443 	.word	0x08007443
 800738c:	08007443 	.word	0x08007443
 8007390:	08007443 	.word	0x08007443
 8007394:	0800740f 	.word	0x0800740f
 8007398:	08007443 	.word	0x08007443
 800739c:	08007443 	.word	0x08007443
 80073a0:	08007443 	.word	0x08007443
 80073a4:	08007443 	.word	0x08007443
 80073a8:	08007443 	.word	0x08007443
 80073ac:	08007443 	.word	0x08007443
 80073b0:	08007443 	.word	0x08007443
 80073b4:	08007443 	.word	0x08007443
 80073b8:	08007443 	.word	0x08007443
 80073bc:	08007443 	.word	0x08007443
 80073c0:	08007443 	.word	0x08007443
 80073c4:	08007443 	.word	0x08007443
 80073c8:	08007443 	.word	0x08007443
 80073cc:	08007443 	.word	0x08007443
 80073d0:	08007443 	.word	0x08007443
 80073d4:	08007435 	.word	0x08007435
 80073d8:	2b40      	cmp	r3, #64	@ 0x40
 80073da:	d02e      	beq.n	800743a <UART_SetConfig+0xa72>
 80073dc:	e031      	b.n	8007442 <UART_SetConfig+0xa7a>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073de:	f7fc fb69 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 80073e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073e4:	e033      	b.n	800744e <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073e6:	f7fc fb7b 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 80073ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073ec:	e02f      	b.n	800744e <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fc fba0 	bl	8003b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073fc:	e027      	b.n	800744e <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073fe:	f107 0318 	add.w	r3, r7, #24
 8007402:	4618      	mov	r0, r3
 8007404:	f7fc fcec 	bl	8003de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800740c:	e01f      	b.n	800744e <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800740e:	4b8c      	ldr	r3, [pc, #560]	@ (8007640 <UART_SetConfig+0xc78>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b00      	cmp	r3, #0
 8007418:	d009      	beq.n	800742e <UART_SetConfig+0xa66>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800741a:	4b89      	ldr	r3, [pc, #548]	@ (8007640 <UART_SetConfig+0xc78>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	08db      	lsrs	r3, r3, #3
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	4a87      	ldr	r2, [pc, #540]	@ (8007644 <UART_SetConfig+0xc7c>)
 8007426:	fa22 f303 	lsr.w	r3, r2, r3
 800742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800742c:	e00f      	b.n	800744e <UART_SetConfig+0xa86>
          pclk = (uint32_t) HSI_VALUE;
 800742e:	4b85      	ldr	r3, [pc, #532]	@ (8007644 <UART_SetConfig+0xc7c>)
 8007430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007432:	e00c      	b.n	800744e <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007434:	4b84      	ldr	r3, [pc, #528]	@ (8007648 <UART_SetConfig+0xc80>)
 8007436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007438:	e009      	b.n	800744e <UART_SetConfig+0xa86>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800743a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800743e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007440:	e005      	b.n	800744e <UART_SetConfig+0xa86>
      default:
        pclk = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800744c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800744e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 80df 	beq.w	8007614 <UART_SetConfig+0xc4c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745a:	4a7c      	ldr	r2, [pc, #496]	@ (800764c <UART_SetConfig+0xc84>)
 800745c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007460:	461a      	mov	r2, r3
 8007462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007464:	fbb3 f3f2 	udiv	r3, r3, r2
 8007468:	005a      	lsls	r2, r3, #1
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	085b      	lsrs	r3, r3, #1
 8007470:	441a      	add	r2, r3
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	fbb2 f3f3 	udiv	r3, r2, r3
 800747a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	2b0f      	cmp	r3, #15
 8007480:	d916      	bls.n	80074b0 <UART_SetConfig+0xae8>
 8007482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007488:	d212      	bcs.n	80074b0 <UART_SetConfig+0xae8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800748a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748c:	b29b      	uxth	r3, r3
 800748e:	f023 030f 	bic.w	r3, r3, #15
 8007492:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	085b      	lsrs	r3, r3, #1
 8007498:	b29b      	uxth	r3, r3
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	b29a      	uxth	r2, r3
 80074a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80074a2:	4313      	orrs	r3, r2
 80074a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80074ac:	60da      	str	r2, [r3, #12]
 80074ae:	e0b1      	b.n	8007614 <UART_SetConfig+0xc4c>
      }
      else
      {
        ret = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80074b6:	e0ad      	b.n	8007614 <UART_SetConfig+0xc4c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80074bc:	2b20      	cmp	r3, #32
 80074be:	dc49      	bgt.n	8007554 <UART_SetConfig+0xb8c>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	db7c      	blt.n	80075be <UART_SetConfig+0xbf6>
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d87a      	bhi.n	80075be <UART_SetConfig+0xbf6>
 80074c8:	a201      	add	r2, pc, #4	@ (adr r2, 80074d0 <UART_SetConfig+0xb08>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	0800755b 	.word	0x0800755b
 80074d4:	08007563 	.word	0x08007563
 80074d8:	080075bf 	.word	0x080075bf
 80074dc:	080075bf 	.word	0x080075bf
 80074e0:	0800756b 	.word	0x0800756b
 80074e4:	080075bf 	.word	0x080075bf
 80074e8:	080075bf 	.word	0x080075bf
 80074ec:	080075bf 	.word	0x080075bf
 80074f0:	0800757b 	.word	0x0800757b
 80074f4:	080075bf 	.word	0x080075bf
 80074f8:	080075bf 	.word	0x080075bf
 80074fc:	080075bf 	.word	0x080075bf
 8007500:	080075bf 	.word	0x080075bf
 8007504:	080075bf 	.word	0x080075bf
 8007508:	080075bf 	.word	0x080075bf
 800750c:	080075bf 	.word	0x080075bf
 8007510:	0800758b 	.word	0x0800758b
 8007514:	080075bf 	.word	0x080075bf
 8007518:	080075bf 	.word	0x080075bf
 800751c:	080075bf 	.word	0x080075bf
 8007520:	080075bf 	.word	0x080075bf
 8007524:	080075bf 	.word	0x080075bf
 8007528:	080075bf 	.word	0x080075bf
 800752c:	080075bf 	.word	0x080075bf
 8007530:	080075bf 	.word	0x080075bf
 8007534:	080075bf 	.word	0x080075bf
 8007538:	080075bf 	.word	0x080075bf
 800753c:	080075bf 	.word	0x080075bf
 8007540:	080075bf 	.word	0x080075bf
 8007544:	080075bf 	.word	0x080075bf
 8007548:	080075bf 	.word	0x080075bf
 800754c:	080075bf 	.word	0x080075bf
 8007550:	080075b1 	.word	0x080075b1
 8007554:	2b40      	cmp	r3, #64	@ 0x40
 8007556:	d02e      	beq.n	80075b6 <UART_SetConfig+0xbee>
 8007558:	e031      	b.n	80075be <UART_SetConfig+0xbf6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800755a:	f7fc faab 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 800755e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007560:	e033      	b.n	80075ca <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007562:	f7fc fabd 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8007566:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007568:	e02f      	b.n	80075ca <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800756a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800756e:	4618      	mov	r0, r3
 8007570:	f7fc fae2 	bl	8003b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007578:	e027      	b.n	80075ca <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800757a:	f107 0318 	add.w	r3, r7, #24
 800757e:	4618      	mov	r0, r3
 8007580:	f7fc fc2e 	bl	8003de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007588:	e01f      	b.n	80075ca <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800758a:	4b2d      	ldr	r3, [pc, #180]	@ (8007640 <UART_SetConfig+0xc78>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0320 	and.w	r3, r3, #32
 8007592:	2b00      	cmp	r3, #0
 8007594:	d009      	beq.n	80075aa <UART_SetConfig+0xbe2>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007596:	4b2a      	ldr	r3, [pc, #168]	@ (8007640 <UART_SetConfig+0xc78>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	08db      	lsrs	r3, r3, #3
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	4a28      	ldr	r2, [pc, #160]	@ (8007644 <UART_SetConfig+0xc7c>)
 80075a2:	fa22 f303 	lsr.w	r3, r2, r3
 80075a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075a8:	e00f      	b.n	80075ca <UART_SetConfig+0xc02>
          pclk = (uint32_t) HSI_VALUE;
 80075aa:	4b26      	ldr	r3, [pc, #152]	@ (8007644 <UART_SetConfig+0xc7c>)
 80075ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ae:	e00c      	b.n	80075ca <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075b0:	4b25      	ldr	r3, [pc, #148]	@ (8007648 <UART_SetConfig+0xc80>)
 80075b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075b4:	e009      	b.n	80075ca <UART_SetConfig+0xc02>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075bc:	e005      	b.n	80075ca <UART_SetConfig+0xc02>
      default:
        pclk = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80075c8:	bf00      	nop
    }

    if (pclk != 0U)
 80075ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d021      	beq.n	8007614 <UART_SetConfig+0xc4c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d4:	4a1d      	ldr	r2, [pc, #116]	@ (800764c <UART_SetConfig+0xc84>)
 80075d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075da:	461a      	mov	r2, r3
 80075dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075de:	fbb3 f2f2 	udiv	r2, r3, r2
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	085b      	lsrs	r3, r3, #1
 80075e8:	441a      	add	r2, r3
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f6:	2b0f      	cmp	r3, #15
 80075f8:	d909      	bls.n	800760e <UART_SetConfig+0xc46>
 80075fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007600:	d205      	bcs.n	800760e <UART_SetConfig+0xc46>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007604:	b29a      	uxth	r2, r3
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60da      	str	r2, [r3, #12]
 800760c:	e002      	b.n	8007614 <UART_SetConfig+0xc4c>
      }
      else
      {
        ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2201      	movs	r2, #1
 8007618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2201      	movs	r2, #1
 8007620:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2200      	movs	r2, #0
 8007628:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2200      	movs	r2, #0
 800762e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007630:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007634:	4618      	mov	r0, r3
 8007636:	3748      	adds	r7, #72	@ 0x48
 8007638:	46bd      	mov	sp, r7
 800763a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800763e:	bf00      	nop
 8007640:	58024400 	.word	0x58024400
 8007644:	03d09000 	.word	0x03d09000
 8007648:	003d0900 	.word	0x003d0900
 800764c:	0800802c 	.word	0x0800802c

08007650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765c:	2bff      	cmp	r3, #255	@ 0xff
 800765e:	d904      	bls.n	800766a <UART_AdvFeatureConfig+0x1a>
 8007660:	f44f 614e 	mov.w	r1, #3296	@ 0xce0
 8007664:	4893      	ldr	r0, [pc, #588]	@ (80078b4 <UART_AdvFeatureConfig+0x264>)
 8007666:	f7f9 fac5 	bl	8000bf4 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d018      	beq.n	80076a8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <UART_AdvFeatureConfig+0x42>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007686:	d004      	beq.n	8007692 <UART_AdvFeatureConfig+0x42>
 8007688:	f640 41e5 	movw	r1, #3301	@ 0xce5
 800768c:	4889      	ldr	r0, [pc, #548]	@ (80078b4 <UART_AdvFeatureConfig+0x264>)
 800768e:	f7f9 fab1 	bl	8000bf4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d018      	beq.n	80076e6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d009      	beq.n	80076d0 <UART_AdvFeatureConfig+0x80>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076c4:	d004      	beq.n	80076d0 <UART_AdvFeatureConfig+0x80>
 80076c6:	f640 41ec 	movw	r1, #3308	@ 0xcec
 80076ca:	487a      	ldr	r0, [pc, #488]	@ (80078b4 <UART_AdvFeatureConfig+0x264>)
 80076cc:	f7f9 fa92 	bl	8000bf4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d018      	beq.n	8007724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d009      	beq.n	800770e <UART_AdvFeatureConfig+0xbe>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007702:	d004      	beq.n	800770e <UART_AdvFeatureConfig+0xbe>
 8007704:	f640 41f3 	movw	r1, #3315	@ 0xcf3
 8007708:	486a      	ldr	r0, [pc, #424]	@ (80078b4 <UART_AdvFeatureConfig+0x264>)
 800770a:	f7f9 fa73 	bl	8000bf4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d018      	beq.n	8007762 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007734:	2b00      	cmp	r3, #0
 8007736:	d009      	beq.n	800774c <UART_AdvFeatureConfig+0xfc>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800773c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007740:	d004      	beq.n	800774c <UART_AdvFeatureConfig+0xfc>
 8007742:	f640 41fa 	movw	r1, #3322	@ 0xcfa
 8007746:	485b      	ldr	r0, [pc, #364]	@ (80078b4 <UART_AdvFeatureConfig+0x264>)
 8007748:	f7f9 fa54 	bl	8000bf4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2b00      	cmp	r3, #0
 800776c:	d018      	beq.n	80077a0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <UART_AdvFeatureConfig+0x13a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800777a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800777e:	d004      	beq.n	800778a <UART_AdvFeatureConfig+0x13a>
 8007780:	f640 5101 	movw	r1, #3329	@ 0xd01
 8007784:	484b      	ldr	r0, [pc, #300]	@ (80078b4 <UART_AdvFeatureConfig+0x264>)
 8007786:	f7f9 fa35 	bl	8000bf4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d018      	beq.n	80077de <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d009      	beq.n	80077c8 <UART_AdvFeatureConfig+0x178>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077bc:	d004      	beq.n	80077c8 <UART_AdvFeatureConfig+0x178>
 80077be:	f640 5108 	movw	r1, #3336	@ 0xd08
 80077c2:	483c      	ldr	r0, [pc, #240]	@ (80078b4 <UART_AdvFeatureConfig+0x264>)
 80077c4:	f7f9 fa16 	bl	8000bf4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 8081 	beq.w	80078ee <UART_AdvFeatureConfig+0x29e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a31      	ldr	r2, [pc, #196]	@ (80078b8 <UART_AdvFeatureConfig+0x268>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d027      	beq.n	8007846 <UART_AdvFeatureConfig+0x1f6>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a30      	ldr	r2, [pc, #192]	@ (80078bc <UART_AdvFeatureConfig+0x26c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d022      	beq.n	8007846 <UART_AdvFeatureConfig+0x1f6>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a2e      	ldr	r2, [pc, #184]	@ (80078c0 <UART_AdvFeatureConfig+0x270>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d01d      	beq.n	8007846 <UART_AdvFeatureConfig+0x1f6>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a2d      	ldr	r2, [pc, #180]	@ (80078c4 <UART_AdvFeatureConfig+0x274>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d018      	beq.n	8007846 <UART_AdvFeatureConfig+0x1f6>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a2b      	ldr	r2, [pc, #172]	@ (80078c8 <UART_AdvFeatureConfig+0x278>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d013      	beq.n	8007846 <UART_AdvFeatureConfig+0x1f6>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a2a      	ldr	r2, [pc, #168]	@ (80078cc <UART_AdvFeatureConfig+0x27c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d00e      	beq.n	8007846 <UART_AdvFeatureConfig+0x1f6>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a28      	ldr	r2, [pc, #160]	@ (80078d0 <UART_AdvFeatureConfig+0x280>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d009      	beq.n	8007846 <UART_AdvFeatureConfig+0x1f6>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a27      	ldr	r2, [pc, #156]	@ (80078d4 <UART_AdvFeatureConfig+0x284>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d004      	beq.n	8007846 <UART_AdvFeatureConfig+0x1f6>
 800783c:	f640 510f 	movw	r1, #3343	@ 0xd0f
 8007840:	481c      	ldr	r0, [pc, #112]	@ (80078b4 <UART_AdvFeatureConfig+0x264>)
 8007842:	f7f9 f9d7 	bl	8000bf4 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <UART_AdvFeatureConfig+0x212>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007856:	d004      	beq.n	8007862 <UART_AdvFeatureConfig+0x212>
 8007858:	f44f 6151 	mov.w	r1, #3344	@ 0xd10
 800785c:	4815      	ldr	r0, [pc, #84]	@ (80078b4 <UART_AdvFeatureConfig+0x264>)
 800785e:	f7f9 f9c9 	bl	8000bf4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800787c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007880:	d135      	bne.n	80078ee <UART_AdvFeatureConfig+0x29e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007886:	2b00      	cmp	r3, #0
 8007888:	d026      	beq.n	80078d8 <UART_AdvFeatureConfig+0x288>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800788e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007892:	d021      	beq.n	80078d8 <UART_AdvFeatureConfig+0x288>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007898:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800789c:	d01c      	beq.n	80078d8 <UART_AdvFeatureConfig+0x288>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80078a6:	d017      	beq.n	80078d8 <UART_AdvFeatureConfig+0x288>
 80078a8:	f640 5115 	movw	r1, #3349	@ 0xd15
 80078ac:	4801      	ldr	r0, [pc, #4]	@ (80078b4 <UART_AdvFeatureConfig+0x264>)
 80078ae:	f7f9 f9a1 	bl	8000bf4 <assert_failed>
 80078b2:	e011      	b.n	80078d8 <UART_AdvFeatureConfig+0x288>
 80078b4:	08007fa4 	.word	0x08007fa4
 80078b8:	40011000 	.word	0x40011000
 80078bc:	40004400 	.word	0x40004400
 80078c0:	40004800 	.word	0x40004800
 80078c4:	40004c00 	.word	0x40004c00
 80078c8:	40005000 	.word	0x40005000
 80078cc:	40011400 	.word	0x40011400
 80078d0:	40007800 	.word	0x40007800
 80078d4:	40007c00 	.word	0x40007c00
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d018      	beq.n	800792c <UART_AdvFeatureConfig+0x2dc>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d009      	beq.n	8007916 <UART_AdvFeatureConfig+0x2c6>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007906:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800790a:	d004      	beq.n	8007916 <UART_AdvFeatureConfig+0x2c6>
 800790c:	f640 511d 	movw	r1, #3357	@ 0xd1d
 8007910:	4808      	ldr	r0, [pc, #32]	@ (8007934 <UART_AdvFeatureConfig+0x2e4>)
 8007912:	f7f9 f96f 	bl	8000bf4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	605a      	str	r2, [r3, #4]
  }
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	08007fa4 	.word	0x08007fa4

08007938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b098      	sub	sp, #96	@ 0x60
 800793c:	af02      	add	r7, sp, #8
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007948:	f7fa f880 	bl	8001a4c <HAL_GetTick>
 800794c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0308 	and.w	r3, r3, #8
 8007958:	2b08      	cmp	r3, #8
 800795a:	d12f      	bne.n	80079bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800795c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007964:	2200      	movs	r2, #0
 8007966:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f88e 	bl	8007a8c <UART_WaitOnFlagUntilTimeout>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d022      	beq.n	80079bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800798a:	653b      	str	r3, [r7, #80]	@ 0x50
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007994:	647b      	str	r3, [r7, #68]	@ 0x44
 8007996:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800799a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800799c:	e841 2300 	strex	r3, r2, [r1]
 80079a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e6      	bne.n	8007976 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e063      	b.n	8007a84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0304 	and.w	r3, r3, #4
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d149      	bne.n	8007a5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079d2:	2200      	movs	r2, #0
 80079d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f857 	bl	8007a8c <UART_WaitOnFlagUntilTimeout>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d03c      	beq.n	8007a5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	623b      	str	r3, [r7, #32]
   return(result);
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a02:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e6      	bne.n	80079e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a36:	61fa      	str	r2, [r7, #28]
 8007a38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	69b9      	ldr	r1, [r7, #24]
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	617b      	str	r3, [r7, #20]
   return(result);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e5      	bne.n	8007a16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e012      	b.n	8007a84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2220      	movs	r2, #32
 8007a62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3758      	adds	r7, #88	@ 0x58
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a9c:	e04f      	b.n	8007b3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aa4:	d04b      	beq.n	8007b3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aa6:	f7f9 ffd1 	bl	8001a4c <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d302      	bcc.n	8007abc <UART_WaitOnFlagUntilTimeout+0x30>
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e04e      	b.n	8007b5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0304 	and.w	r3, r3, #4
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d037      	beq.n	8007b3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b80      	cmp	r3, #128	@ 0x80
 8007ad2:	d034      	beq.n	8007b3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b40      	cmp	r3, #64	@ 0x40
 8007ad8:	d031      	beq.n	8007b3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b08      	cmp	r3, #8
 8007ae6:	d110      	bne.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2208      	movs	r2, #8
 8007aee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f839 	bl	8007b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2208      	movs	r2, #8
 8007afa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e029      	b.n	8007b5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b18:	d111      	bne.n	8007b3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 f81f 	bl	8007b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e00f      	b.n	8007b5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69da      	ldr	r2, [r3, #28]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4013      	ands	r3, r2
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	bf0c      	ite	eq
 8007b4e:	2301      	moveq	r3, #1
 8007b50:	2300      	movne	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	461a      	mov	r2, r3
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d0a0      	beq.n	8007a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b095      	sub	sp, #84	@ 0x54
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e6      	bne.n	8007b70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8007c30 <UART_EndRxTransfer+0xc8>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e5      	bne.n	8007ba2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d118      	bne.n	8007c10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f023 0310 	bic.w	r3, r3, #16
 8007bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6979      	ldr	r1, [r7, #20]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	613b      	str	r3, [r7, #16]
   return(result);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e6      	bne.n	8007bde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c24:	bf00      	nop
 8007c26:	3754      	adds	r7, #84	@ 0x54
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	effffffe 	.word	0xeffffffe

08007c34 <memset>:
 8007c34:	4402      	add	r2, r0
 8007c36:	4603      	mov	r3, r0
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d100      	bne.n	8007c3e <memset+0xa>
 8007c3c:	4770      	bx	lr
 8007c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c42:	e7f9      	b.n	8007c38 <memset+0x4>

08007c44 <__libc_init_array>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	4d0d      	ldr	r5, [pc, #52]	@ (8007c7c <__libc_init_array+0x38>)
 8007c48:	4c0d      	ldr	r4, [pc, #52]	@ (8007c80 <__libc_init_array+0x3c>)
 8007c4a:	1b64      	subs	r4, r4, r5
 8007c4c:	10a4      	asrs	r4, r4, #2
 8007c4e:	2600      	movs	r6, #0
 8007c50:	42a6      	cmp	r6, r4
 8007c52:	d109      	bne.n	8007c68 <__libc_init_array+0x24>
 8007c54:	4d0b      	ldr	r5, [pc, #44]	@ (8007c84 <__libc_init_array+0x40>)
 8007c56:	4c0c      	ldr	r4, [pc, #48]	@ (8007c88 <__libc_init_array+0x44>)
 8007c58:	f000 f818 	bl	8007c8c <_init>
 8007c5c:	1b64      	subs	r4, r4, r5
 8007c5e:	10a4      	asrs	r4, r4, #2
 8007c60:	2600      	movs	r6, #0
 8007c62:	42a6      	cmp	r6, r4
 8007c64:	d105      	bne.n	8007c72 <__libc_init_array+0x2e>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6c:	4798      	blx	r3
 8007c6e:	3601      	adds	r6, #1
 8007c70:	e7ee      	b.n	8007c50 <__libc_init_array+0xc>
 8007c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c76:	4798      	blx	r3
 8007c78:	3601      	adds	r6, #1
 8007c7a:	e7f2      	b.n	8007c62 <__libc_init_array+0x1e>
 8007c7c:	0800804c 	.word	0x0800804c
 8007c80:	0800804c 	.word	0x0800804c
 8007c84:	0800804c 	.word	0x0800804c
 8007c88:	08008050 	.word	0x08008050

08007c8c <_init>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr

08007c98 <_fini>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr
